<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Activity:&nbsp;Incorporate Existing Design Elements</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Activity:<rpw name="PresentationName">Incorporate Existing Design Elements</rpw><a name="Top"></a></h2>
<div align="left">

<table border="1" width="85%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
  <tr>
    <td colspan="2"><b>Purpose</b>
    <ul>
            <li><a name="XE_class__refining_analysis_classes"></a>To analyze interactions of analysis classes to find interfaces, 
              design classes and design subsystems</li>
            <li>To refine the architecture, incorporating reuse where possible.</li>
            <li>To identify common solutions to commonly encountered design problems</li>
            <li>To include architecturally significant design model elements in the 
              Logical View section of the Software Architecture Document.</li>
    </ul>
        </td>
  </tr>
  <tr>
    <td colspan="2"><b>Steps</b>
          <ul>
            <li><a href="#Identify Reuse Opportunities">Identify Reuse Opportunities</a></li>
            <li><a href="#Reverse Engineer Components and Databases">Reverse-Engineer 
              Components and Databases</a></li>
            <li><a href="#Update the Organization of the Design Model">Update 
              the Organization of the Design Model</a></li>
            <li><a href="#Update the Logical View">Update the Logical View</a></li>
          </ul>
    </td>
  </tr>
  <tr>
    <td width="50%"><b>Input Artifacts:&nbsp;</b>
      <ul>
<li><a href="../artifact/ar_desmd.htm">Design Model</a></li>
<li><a href="../artifact/ar_projspecgls.htm">Project Specific Guidelines</a></li>
<li><a href="../artifact/ar_sadoc.htm">Software Architecture Document</a></li>
</ul>
&nbsp;
	</td>
    <td width="50%"><b>Resulting Artifacts:&nbsp;</b>
	  <ul>
<li><a href="../artifact/ar_class.htm">Design Class</a></li>
<li><a href="../artifact/ar_desmd.htm">Design Model</a></li>
<li><a href="../artifact/ar_despk.htm">Design Package</a></li>
<li><a href="../artifact/ar_dsub.htm">Design Subsystem</a></li>
<li><a href="../artifact/ar_if.htm">Interface</a></li>
<li><a href="../artifact/ar_sadoc.htm">Software Architecture Document</a></li>
</ul>
&nbsp;
	</td>
  </tr>
  <tr>
     <td colspan="2"><b>Frequency:&nbsp;</b>Once per iteration&nbsp;</td>
  </tr>
  <tr>
    <td colspan="2"><b>Role:&nbsp;</b>
	  <a href="../workers/wk_archt.htm">Software Architect</a>&nbsp;
	</td>
  </tr>
  <tr>
    <td colspan="2"><b>Tool Mentors:&nbsp;</b>
      <ul>
<li><a href="../../toolment/xde_vsnet/tm_incds.htm">Incorporating Existing Design Elements Using Rational XDE Developer - .NET Edition</a></li>
<li><a href="../../toolment/xde_eclipse/tm_incds.htm">Incorporating Existing Design Elements Using Rational XDE Developer - Java Platform Edition</a></li>
</ul>
&nbsp;
  	</td>
  </tr>  
    <tr>
    <td colspan="2"> <b>More Information:&nbsp;</b><ul>
<li><a href="../modguide/md_layer.htm">Guideline: Layering</a></li>
<li><a href="../modguide/md_rdboo.htm">Guideline: Reverse-engineering Relational Databases</a></li>
</ul>
</td>
    </tr>
</table>
<!-- Linked to Workflow Begin -->
<p></p>
<table border="1" width="85%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
  <tr>
    <td colspan="2"><b>Workflow Details:&nbsp;</b>
	  <ul>
<li><a href="../workflow/ovu_and.htm">Analysis & Design</a>
<ul>
<li><a href="../workflow/ana_desi/wfs_and2.htm">Refine the Architecture</a></li>
</ul>
</li>
</ul>
&nbsp;
	</td>
  </tr>
</table>
<!-- Linked to Workflow End -->
</div>

<h3><a name="XE_reuse__identify_reuse_opportunities"></a><a name="Identify Reuse Opportunities">Identify
Reuse Opportunities</a>
 <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<div align="left">
<table border="1" width="92%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
    <tr>
      <td width="5%"><b>Purpose</b></td>
	  <td width="95%">To identify where existing subsystems and/or components may be reused based on their interfaces.&nbsp;</td>
    </tr>
</table>
<br>
</div>

<p><b>Look for existing subsystems or components which offer similar
interfaces. </b>Compare each interface identified to the interfaces
provided by existing subsystems or components. There usually will not be an
exact match, but approximate matches can be found. Look first for similar
behavior and returned values, then consider parameters.</p>
<p><b>Modify the newly identified interfaces to improve the fit</b>.
There may be opportunities to make minor changes to a candidate interface which
will improve its conformance to the existing interface. Simple changes include
rearranging or adding parameters to the candidate interface, and then factoring
the interface by splitting it into several interfaces, one or more of which
match those of the existing component, with the &quot;new&quot; behaviors
located in a separate interface.</p>
<p><b>Replace candidate interfaces with existing interfaces where exact
matches occur. </b>After simplification and factoring, if there is an exact
match to an existing interface, eliminate the candidate interface and simply use
the existing interface.</p>
<p><b>Map the candidate subsystem to existing components. </b>Look at
existing components and the set of candidate subsystems. Factor the subsystems
so that existing components are used wherever possible to satisfy the required
behavior of the system. Where a candidate subsystem can be realized by an
existing component, create traceability between the design subsystem and the
component in the implementation model.</p>
<p>In mapping subsystems onto reusable components, consider the design mechanisms 
  associated with the subsystem; performance or security requirements may disqualify 
  a component from reuse despite an otherwise perfect match between operation 
  signatures.</p>

<h3><a name="XE_database__reverse_engineering"></a><a name="XE_component__reverse_engineer"></a><a name="XE_code__reverse_engineering"></a><a name="Reverse Engineer Components and Databases">Reverse-Engineer
Components and Databases</a>
 <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<div align="left">
<table border="1" width="92%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
  <tr>
    <td width="5%"><b>Purpose</b></td>
	<td width="95%">To incorporate potentially reusable model elements from other projects, external sources or prior iterations.&nbsp;</td>
  </tr>
</table>
<br>
</div>

<p>Existing code and database definitions can be 'scavenged' to make work done 
  on previous projects or iterations available to the current project/iteration. 
  By using potential reuse opportunities as a filter, the work that is reverse 
  engineered can be focused on just the components which are reusable for the 
  current iteration.</p>
<h4>Reverse Engineer Components</h4>
<p>In organizations which build similar systems, there is often a set of common
components which provide many of the architectural mechanisms needed for a new
system. There may also be components available in the marketplace which also
provide the architectural mechanisms. Existing components should be examined to
determine their suitability and compatibility within the software architecture.</p>
<p>Existing components, either developed during prior iterations but not yet included 
  in the Design Model, or purchased components, must be reverse-engineered and 
  incorporated into the Design Model. In the Design Model, such components are 
  commonly represented as a Subsystem with one or more Interfaces.</p>
<h4>Reverse Engineer Databases</h4>
<p>Databases, and the data residing in them, represent one of the most important 
  sources for reusable assets. To reuse the implicit class definitions embodied 
  in existing databases, determine which information used by the application already 
  resides in existing databases. Reverse-engineer a set of classes to represent 
  the database structures that hold this information. At the same time, construct 
  a mapping between the application's class representation and the structures 
  used in the database.</p>

<p>For more information on reverse engineering databases, see <a href="../modguide/md_rdboo.htm">Guidelines: 
  Reverse-engineering Relational Databases</a>. For more on mapping betwen classes 
  and tables in a relational database, see <a href="../modguide/md_datmd.htm">Guidelines: 
  Data Model</a>.</p>


<h3><a name="XE_design_subsystem__defining_low-level_organization_of"></a><a name="Update the Organization of the Design Model">Update
the Organization of the Design Model</a>
 <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<div align="left">
<table border="1" width="92%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
  <tr>
    <td width="5%"><b>Purpose</b></td>
 	<td width="95%">To account for the new model elements in the organization of the Design Model.<br>
      To re-balance the structure of the Design Model where necessary.&nbsp;
	</td>
    </tr>
  </table>
<br>
</div>

<p>As new elements have been added to the Design Model, re-packaging the
elements of the Design Model is often necessary. Repackaging achieves several
objectives: it reduces coupling between packages and improves cohesion within
packages in the design model. The ultimate goal is to allow different packages
(and subsystems) to be designed and developed independently of one another by
separate individuals or teams. While complete independence is probably
impossible to achieve, loose coupling between packages tends to improve the ease
of development of large or complex systems.</p>
<p>A 'flat' model structure (where all packages and subsystems reside at the
same conceptual level in the system) is suitable for a small system; larger
systems need an additional structuring tool called 'layering' (see <a href="../modguide/md_layer.htm">Guidelines:
Layering</a>).
Layering rules define restrictions on allowed relationships between certain
types of packages. These rules recognize that certain dependencies should not
exist: application functionality should not be directly dependent on specific
operating system or windowing system services - there should be an intermediate
layer containing logical operating system and windowing services that insulate
the application functionality from changes in low-level implementation services.
Layering provides a way to reduce the impact of change: by enforcing rules which
restrict the dependencies between packages and subsystems, reducing the degree
of coupling between packages and subsystems, the system becomes more robust. It
tolerates change.</p>
<p>As new model elements are added to the system, existing packages may grow too
large to be managed by a single team: the package must be split into several
packages which are highly cohesive within the package but loosely coupled
between the packages. Doing this may be difficult - some elements may be
difficult to place in one specific package because they are used by elements of
both packages. There are two possible solutions: split the element into several
objects, one in each package (this works where the element has several
'personalities', or sets of somewhat disjoint responsibilities), or move the
element into a package in a lower layer, where all higher layer elements may
depend upon it equally.</p>
<p>As the system grows in complexity, a larger number of layers will be needed
in order to have a maintainable and understandable structure. More than 7-10
layers, however, are unusual in even the largest systems, since complexity
increases and understandability decreases with the number of layers.</p>
<p>An example of layering, including middle-ware and System-software layers, is
shown below:</p>
<p align="center"><img src="images/layers.gif" alt="Layers" border="0" width="496" height="554"></p>
<p class="picturetext">Sample package layering for a Java/Web-based application.
Note: the dependencies on the TCP/IP package would not normally be explicitly
modeled as the use of TCP/IP services is encapsulated within the Java VM,
java.rmi and the Web Browser. They are depicted here only for illustration.</p>
<p>Assign responsibilities for the subsystems and layers to individuals or
teams. Each package or subsystem should be the responsibility of a single person
(if its scope is small) or a team (if its scope is large).</p>
<h3><a name="XE_logical_view__including_classes_in"></a><a name="Update the Logical View">Update
the Logical View</a>
 <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<div align="left">
<table border="1" width="92%" cellspacing="0" cellpadding="4" style="border: 1px solid rgb(128,128,128)" bordercolorlight="#808080" bordercolordark="#808080">
 <tbody valign="top">
  <tr>
    <td width="5%"><b>Purpose</b></td>
    <td width="95%">To ensure that the <a href="../artifact/ar_sadoc.htm">Artifact: Software Architecture Document (Logical View)</a> remains up to date.&nbsp;</td>
  </tr>
</table>
<br>
</div>
<p>When design classes, packages and subsystems (model elements) are important 
  from an architectural perspective, they should be included in the Logical View 
  section of the <a href="../artifact/ar_sadoc.htm">Artifact: Software Architecture 
  Document</a>. This will ensure that new architecturally significant model elements 
  are communicated to other project team members.</p>
<p>In addition, the software architect role collaborates with the process engineer 
  role to provide detailed guidance to designers and implementers on how to use 
  the newly incorporated design elements.  
  See <a href="ac_dvlprjspcgdl.htm">Activity: Prepare Project Specific Guidelines</a>. 
  </p>
<br>
<br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>