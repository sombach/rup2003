<!-- RPW META DATA START --

 
 


-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Implementation Subsystem</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Guidelines:&nbsp;<rpw name="PresentationName">Implementation 
  Subsystem</rpw><a name="Top"></a><a name="XE_implementation_subsystem__guidelines_for"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Use">Use</a></li>
</ul>
<h3><a name="Explanation"></a>Explanation <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>A basic way of reducing complexity in an implementation model containing
hundreds of elements, is to use implementation subsystems.</p>
<p>Subsystems typically take the form of directories, with additional structural 
  or management information. For example, a subsystem can be created as a directory 
  or a folder in a file system, or a subsystem in Rational Apex for C++ or Ada, 
  or packages using Java. In Rational XDE developments, a Subsystem is a &quot;project&quot; 
  as defined by the Integrated Development Environment (IDE).</p>
<p>The implementation subsystem is the implementation analogue of <a href="../glossary.htm#design_package"><i>design 
  package</i></a><i> (or large grained <a href="../artifact/ar_dsub.htm">design 
  subsystem</a>). </i>The implementation model and the implementation subsystems 
  are the target of the <a href="../glossary.htm#implementation_view"><i>implementation 
  view</i></a>, and so are of primary importance at development time.</p>
<h4><a name="XE_implementation_subsystem__exporting_elements"></a><a name="XE_element__exporting_from_implementation_subsystems"></a>Exporting 
  Elements</h4>
<p>An implementation subsystem controls the external visibility of its contents.
An element can be referenced by elements outside the subsystem, if it is made
visible (&quot;exported&quot;) by its declaring subsystem.</p>
<p>All elements (and contained subsystems) in a subsystem are typically visible 
  outside a subsystem by default. This means that any element outside this subsystem 
  can reference all elements. For example, in C++ this means that elements 
  outside can #include all elements inside the subsystem.</p>
<h3><a name="Use"></a>Use <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The implementation model can be more or less close to the design model,
depending on how you map the design packages to implementation subsystems in the
implementation model.</p>
<p>It is recommended to keep the mapping one to one, i.e. one design package
should be mapped to one implementation subsystem. The primary reason for that is
to have a seamless traceability from design to code.</p>
<p>There are situations where you need the subsystems in implementation to differ 
  from the packages and subsystems in design. For more information, see the <a href="../activity/ac_strim.htm">Activity: 
  Structure the Implementation Model</a>. If and how to represent this mapping 
  should be covered by the <a href="../artifact/ar_projspecgls.htm">Artifact: Project Specific
  Guidelines</a>.</p>
<p>You can partition a system into subsystems for many reasons. The same
criteria as in design apply in implementation. For more information, see <a href="md_despk.htm">Guidelines:
Design Package</a>.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>