<!-- RPW META DATA START --

 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Import Dependency in Design</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Guidelines:&nbsp;<rpw name="PresentationName">Import Dependency 
  in Design</rpw><a name="Top"></a><a name="XE_import-dependency_in_design__guidelines_for"></a><a name="XE_design_package__organizing_using_import-dependency"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Use">Use</a></li>
</ul>
<h3><a name="Explanation">Explanation </a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Handling import dependencies between packages is an important aspect of
structuring an object model. A package depends on another if any of its classes
have relationships that are navigable to classes in the other package. To
express such dependencies you use the import dependency<b> </b>from
one package to the package on which it depends.</p>
<p class="picturecenter" align="center"><img src="images/md_andi2.gif" width="385" height="284"></p>
<p class="picturetext">Dependencies between packages are expressed by import
dependencies.</p>
<h3><a name="XE_layering__organizing_design_packages_using_import_dependency"></a><a name="XE_import-dependency_in_design__organizing_packages_with"></a><a name="Use">Use
</a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>You evolve import dependencies in the following manner:
<ul>
  <li>Before you start working with the object model, make outlines of
    dependencies for use as guidelines during the work.</li>
  <li>When the model is completed, use it to show the dependencies actually
    there. This entails updating the import dependencies in the object model.</li>
  <li>If you divided the model into packages early on, use the import
    dependencies to show where dependencies are allowed.</li>
  <li>How packages depend on one another affects a system's tolerance to change.
    An object model will be easier to change if you:</li>
  <li>Reference a minimum number of contained classes from outside each package.
    If you reference many classes, the package may have too many different
    responsibilities and should be divided into two.</li>
  <li>Make each package depend on few other packages.</li>
  <li>Test each package separately. This means that you should be able to test a
    package by simulating the package on which it depends. You should not
    require other packages to be completely or almost completely implemented. If
    you can test a package separately, system development and maintenance for
    each package will be easier.</li>
  <li>Place general parts of the object model in separate packages on which
    other packages depend. If there is such a package, pay strict attention to
    release handling, since several parts of the system may be affected by
    changes to the package.</li>
</ul>
<p class="exampleheading">Example</p>
<p class="example">Suppose you find something in common for the classes <b>Customer
Panel </b>and <b>Operator Panel </b>in the recycling machine. You
assign these general services to a new class, <b>Panel</b> that you
place in a new package, <b>Panels</b>. The other two classes may then
refer to this class to use the general services. Because the classes belong to
two separate packages, the two packages will depend on the new package. This
elimination of redundancy implies that changes to the common functionality only
needs to be done in one place.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>