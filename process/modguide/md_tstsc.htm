<!-- RPW META DATA START --
 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Programming Automated Test Scripts</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner"><a name="Top"></a>Guidelines:&nbsp;<rpw name="PresentationName">Programming&nbsp;Automated&nbsp;Test&nbsp;Scripts</rpw><a name="XE_test_script__guidelines_for"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#StructureOfTestScripts">Structure of Test Scripts</a></li>
  <li><a href="#RecordingTechnique">Recording Technique</a></li>
  <li><a href="#Data-DrivenTesting">Data-Driven Testing</a></li>
  <li><a href="#ErrorHandling">Error Handling</a></li>
  <li><a href="#TestScriptSynchronizationAndScheduling">Test Script
    Synchronization and Scheduling</a></li>
  <li><a href="#TestingAndDebuggingTestScripts">Testing and Debugging Test
    Scripts</a></li>
</ul>

<h3><a name="StructureOfTestScripts">Structure of Test Scripts</a> 
<a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To increase the maintainability and reusability of your Test Scripts, they 
  should have been structured before they are implemented. You will probably find 
  that there are actions that will appear in several Test Scripts. A goal should 
  be to identify these actions so that you can reuse their implementation.</p>
<p>For example, you may have Test Scripts that are combinations of different actions 
  you can perform to a record. These Test Scripts may be combinations of the addition, 
  modification, and the deletion of a record:</p>
<ul>
  <li>Add, Modify, Delete (the obvious one)</li>
  <li>Add, Delete, Modify</li>
  <li>Add, Delete, Add, Delete, ...</li>
  <li>Add, Add, Add, ...</li>
</ul>
<p>If you identify and implement these actions as separate Test Scripts and reuse 
  them in other Test Scripts you will achieve a higher level of reuse.</p>
<p>Another goal would be to structure your Test Scripts in such a way that a change 
  in the target software causes a localized and controllable change in your Test 
  Scripts. This will make your Test Scripts more resilient to changes in the target 
  software. For example, say the log-in portion of the software has changed. For 
  all test cases that traverses the log-in portion, only the Test Script pertaining 
  to log-in will have to change.</p>

<h3><a name="RecordingTechnique">Recording Technique</a> <a name="XE_recording_techniques_for_test_scripts"></a><a name="XE_test_script__recording_techniques"></a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To achieve higher maintainability of your test scripts, you should record them 
  in a way that is least vulnerable to changes in the target-of-test. For example, 
  for a test script that fills in dialog box fields, there are choices for how 
  to proceed from one field to the next:</p>
<ul>
  <li>Use the TAB key</li>
  <li>Use the mouse</li>
  <li>Use the keyboard accelerator keys</li>
</ul>
<p>Of these choices, some are more vulnerable to design changes than others. If 
  a new field is inserted on the screen the TAB key approach will not be reliable. 
  If accelerator keys are reassigned, they will not provide a good recording. 
  If the method that the mouse uses to identify a field is subject to change, 
  that may not be a reliable method either. However, some test automation tools 
  have test script recorders that can be instructed to identify the field by a 
  more reliable method, such as its Object Name assigned by the development tool 
  (PowerBuilder, SQLWindows, or Visual Basic). In this way, a recorded test script 
  is not effected by minor changes to the user interface (e.g., layout changes, 
  field label changes, formatting changes, etc.)</p>

<h3><a name="Data-DrivenTesting">Data-Driven Testing</a> <a name="XE_data-driven_testing"></a><a name="XE_test_script__data-driven_testing"></a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Many Test Scripts involve entering several sets of field data in a given data 
  entry screen to check field validation functions, error handling, and so on. 
  The procedural steps are the same; only the data is different. Rather than recording 
  a Test Script for every set of input data, a single recording should be made 
  and then modified to handle multiple data sets. For example, all the data sets 
  that produce the same error because of invalid data can share the same recorded 
  Test Script. The Test Script is modified to address the data as variable information, 
  to read the data sets from a file or other external source, and to loop through 
  all of the relevant data sets.</p>
<p>If Test Scripts or test code have been developed to loop through sets of input 
  and output data the data sets must be established. The usual format to use for 
  these data sets is records of comma-separated fields in a text file. This format 
  is easy to read from Test Scripts and test code, and is easy to create and maintain.</p>
<p>Most database and spreadsheet packages can produce comma-separated textual 
  output. Using these packages to organize or capture data sets has two important 
  benefits. First, they provide a more structured environment for entering and 
  editing the data than simply using a text editor or word processor. Second, 
  most have the ability to query existing databases and capture the returned data, 
  allowing an easy way to extract data sets from existing sources.</p>

<h3><a name="ErrorHandling">Error Handling</a> <a name="XE_error_handling__in_testing"></a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The recorded Test Script is sequential in its execution. There are no branch 
  points. Robust error handling in the Test Scripts requires additional logic 
  to respond to error conditions. Decision logic that can be employed when errors 
  occur includes:</p>
<ul>
  <li>Branching to a different Test Script.</li>
  <li>Calling a script that attempts to clean up the error condition.</li>
  <li>Exiting the script and starting the next one.</li>
  <li>Exiting the script and the software, restarting, and resuming testing at 
    the next Test Script after the one that failed.</li>
</ul>
<p>Each error-handling technique requires program logic added to the Test Script. 
  As much as possible, this logic should be confined to the high-level Test Scripts 
  that control the sequencing of lower-level Test Scripts. This allows the lower-level 
  Test Scripts to be created completely from recording.</p>
  
<h3><a name="TestScriptSynchronizationAndScheduling">Test Script Synchronization 
  and Scheduling</a> <a name="XE_test_script__synchronization_and_scheduling_of"></a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>When doing stress testing, it is often desirable to synchronize Test Scripts 
  so that they start at predefined times. Test Scripts can be modified to start 
  at a particular time by comparing the desired start time with the system time. 
  In networked systems each test station will share, via the network, the same 
  clock. In the following example (from a script written in BASIC) statements 
  have been inserted at the start of a script to suspend the execution of the 
  script until the required time is reached.</p>
<p class="example"><code>InputFile$ = &quot;\TIME.DAT&quot;<br>
  Open InputFile$ For Input As 1<br>
  Input #1, StartTime$<br>
  Close #1<br>
  Do While TimeValue(StartTime$) &gt; Time<br>
  &nbsp;&nbsp;&nbsp;DoEvents<br>
  Loop</code><br>
  [Start script]</p>
<p>In this example, the required start time is stored in a file. This allows the 
  start time to be changed without changing the Test Script. The time is read 
  and stored in a variable called <code>StartTime$</code>. The <code>Do While</code> loop continues until 
  the starting time is reached. The <code>DoEvents</code> statement is important: it 
  allows background tasks to execute while the Test Script is suspended and waiting 
  to start. Without the <code>DoEvents</code> statement, the system would be unresponsive until 
  the start time had been reached.</p>

<h3><a name="TestingAndDebuggingTestScripts">Testing and Debugging Test Scripts</a> 
  <a name="XE_test_script__testing_and_debugging_test_scripts"></a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>When the newly recorded Test Scripts are executed on the same software on which 
  they were recorded, there should be no errors. The environment and the software 
  are identical to when it was recorded. There may be instances where the Test 
  Script does not run successfully. Testing the Test Scripts uncovers these cases, 
  and allows the scripts to be corrected before being used in a real test. Two 
  typical kinds of problems are discussed here: 
<ul>
  <li>Ambiguity in the methods used for selecting items in a user interface can 
    make Test Scripts operate differently upon playback. For example, two items 
    recognized by their text (or caption) may have identical text. There will 
    be ambiguity when the script is executed.</li>
  <li>Test run/session specific data is recorded (i.e., a pointer, date/timestamp 
    or some other system generated data value), but is different upon playback.</li>
</ul>
<p>Timing differences in recording and playback can lead to problems. Recording
a Test Script is inherently a slower process than executing it. Sometimes this
time difference results in the Test Script running ahead of the software. In
these cases, Wait States can be inserted to throttle the Test Script to the
speed of the software.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>