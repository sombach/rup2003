<!-- RPW META DATA START --

 
 


-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Subscribe-Association</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

  


<h2 class="banner">Guidelines:&nbsp;<rpw name="PresentationName">Subscribe-Association</rpw><a name="Top"></a><a name="XE_subscribe-association__guidelines_for"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Usage">Usage</a>
    <ul>
      <li><a href="#Subscribe-associations from Boundary Classes">Subscribe-associations
        from Boundary Classes</a></li>
      <li><a href="#Subscribe-associations from Entity Classes">Subscribe-associations
        from Entity Classes</a></li>
      <li><a href="#Subscribe-associations from Control Classes">Subscribe-associations
        from Control Classes</a></li>
    </ul>
  </li>
</ul>
<h3><a name="Explanation">Explanation</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>In some cases, an object is dependent upon a specific event occurring in
another object. If the event is taking place within a boundary or control
object, this object simply informs the other object about what has happened. But
if the event is taking place within an entity object, the situation is somewhat
different. An entity object may not be able to inform other objects about
anything if it is not specifically asked to do so.</p>
<p class="exampleheading">Example</p>
<p class="example">Assume that a system has been modeled with the possibility of
withdrawing money from a bank account via transferals. If an attempted
withdrawal causes a negative balance in the account, a notice must immediately
be written and sent to the customer. The account, which is modeled as an entity
object, should not be concerned with whether the customer is notified or not.
Instead, a boundary object should notify the customer.</p>
<p>In the example above, the boundary object would have to pose the question
&quot;has the event I am waiting for happened?&quot; repeatedly to the entity
object. To make the situation clearer, and to postpone the implementation
details until the design phase, there is a special association used to express
this, namely the subscribe-association.</p>
<p>The subscribe-association, which associates an object of any type with an
entity object, expresses that the associating object will be informed when a
particular event takes place in the entity object. We recommend that you use the
association only to associate entity objects, since it is the passive nature of
the entity objects that causes the need for the association. Interface- and
control objects, on the other hand, are both allowed to initiate communication.
Therefore, they do not need to be &quot;subscribed to&quot;, but can perform
their responsibilities in other ways.</p>
<p align="CENTER"><img src="images/sbscr001.gif" width="208" height="162"></p>
<p class="picturetext">The subscribe-association associates an object of any
type with an entity object. The associating object will be informed when a
particular event takes place in the associated entity object.</p>
<p>Note that the direction of the association shows that only the subscribing
object is aware of the relation between the two objects. The description of the
subscription is entirely within the subscribing object. The associated entity
object, in turn, is defined in the usual way without considering that other
objects might be interested in its activity. This also implies that a
subscribing object can be added to, or removed from, the model without changing
the object it subscribes to.</p>
<p>The subscribe-association is assigned a multiplicity that indicates how many
instances of the targeted object the associating object can associate
simultaneously. Then one or more conditions are described on the association,
which indicate what must occur in order for the associating object to be
informed. The event might be a change in an association's or attribute's
value, or (some part of) the evaluation of an operation. When the event takes
place, the subscribing object will be informed that something has happened. Note
that no information concerning any result of the event is transmitted, only the
fact that the event has happened. If the associating object is interested in the
resulting state of the entity object after the event, it will have to interact
with the entity object in the ordinary way. This means that it will need a link
to it as well.</p>
<p class="exampleheading">Example</p>
<p class="example">In the Depot-Handling System, spot checks must be made on
pallets, to gauge their life expectancy. Therefore, upon every hundredth move of
a pallet from one place in the depot to another, the pallet is checked at a
special testing station. This is modeled by a subscribe-association from the
control class Pallet Spot Checker to the entity class Pallet. Each instance of
Pallet counts the number of times it is moved, using a counter attribute. When
it has been moved a hundred times the Pallet Spot Checker is informed due to the
condition of the subscribe-association. The Pallet Spot Checker then creates a
special Task, which transports the pallet to the testing station. The Pallet
Spot Checker does not need any link to Pallet, but must have one to Task in
order to initiate it.</p>
<p align="CENTER"><img src="images/sbscr002.gif" width="279" height="160"></p>
<p class="picturetext">After a pallet have been moved a hundred times, the
Pallet Spot Checker creates a new Task.</p>
<p>The conditions of the subscribe-association should be expressed in terms of
abstract characteristics, rather than in terms of its specific attributes or
operations. In this way, the associating object is kept independent of the
contents of the associated entity object, which may well change.</p>
<p>The subscribe-association does not always associate two object instances. It
is also valid from a class to an instance, a meta relation. This is described in
subsections below. There are also cases where the class of an object is
associated by a subscribe-association, for example if the particular event
happens to be the instantiation of the class.</p>
<h3><a name="Usage">Usage</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<h4><a name="Subscribe-associations from Boundary Classes">Subscribe-associations
from Boundary Classes</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p>Sometimes, it is necessary for a boundary object to be informed if an event
takes place in an entity object. This calls for a <b>subscribe-association</b>.</p>
<p class="exampleheading">Example</p>
<p class="example">Consider a withdrawal from a bank account by means of
transferals. Here, it is the control object Transferal Handler that performs
operations on the entity object Account. If the balance of Account turns
negative, the customer will be sent a notice prepared by the boundary object
Notice Writer. This object has, therefore, a <b>subscribe-association </b>to
Account. The stated condition is that the balance goes below zero. As soon as
that event takes place, Notice Writer is informed. This particular <b>subscribe-association
</b>is an instance association, inasmuch as an instance of Notice Writer is
constantly on the look-out for overdrafts in instances of Account.</p>
<p>If the customer is not to receive any more information than that his balance
is low, then this is sufficient. But if he should also be told <b>how </b>low,
then Notice Writer must perform an operation on Account to learn the exact
amount. To do this, Notice Writer must have a link to Account.</p>
<p align="CENTER"><img src="images/sbscr005.gif" width="367" height="137"></p>
<p class="picturetext">The boundary class Notice Writer subscribe to the event
of the balance falling below a certain level in the entity object Account. If
Notice Writer also needs to know the exact sum of the deficit, it must have a
link to Account.</p>
<p>An example of a meta-association from a boundary class is when an event in an
entity object causes a new window to be presented to the user. Then an
interface-object class subscribes to instances of the entity object.</p>
<h4><a name="Subscribe-associations from Entity Classes">Subscribe-associations
from Entity Classes</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p class="exampleheading">Example</p>
<p class="example">In a system handling a network there are stations that
function as nodes in the network, and there are lines interconnecting them. Each
station is connected to other stations via a number of lines. The capacity of a
station is determined by how many of its lines are functioning. If over 80% of
them are functioning the capacity of the station is high, if less than 20 % are
functioning it is low, and anything in between is medium. In our model of the
system, we have two entity objects, Station and Line, where Station has a <b>subscribe-association
</b>to Line. The condition of the association is that Station should be
informed when the status of Line, which may be enabled or disabled, is changed.</p>
<p class="example">Furthermore, a control object that subscribes to Station will
be informed if the capacity of the station becomes low. This is described below,
where this example is continued.</p>
<p align="CENTER"><img src="images/sbscr003.gif" width="246" height="56"></p>
<p class="picturetext">A Station instance is informed as soon as the status of
one of its instances of Line is changed.</p>
<p>A <b>subscribe-association </b>between entity classes is almost
always an instance association, since what is involved, usually, is
already-existing instances. However, there may be cases where an instance of the
subscribing entity object is created when the specified event takes place in the
associated entity object. In such cases, the association goes from a class to an
instance, i.e., it is a meta association. One can also imagine that an instance
of a particular entity object would like to know when a new instance of another
entity object is created.</p>
<h4><a name="Subscribe-associations from Control Classes">Subscribe-associations
from Control Classes</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p class="exampleheading">Example</p>
<p class="example">In the example above, the entity object Station has a <b>subscribe-association
</b>to the entity object Line. Thus, Station will be informed each time the
status of a Line instance is changed. Such a change of status will change the
capacity of the Station. If the capacity becomes low, i.e., less than 20% of its
lines are functioning, the system must find suitable new ways through the
network so that this station is avoided. This, of course, is no task for
Station, but must be performed by the control object Station Supervisor, which
has a subscribe-association to each instance of Station.</p>
<p align="CENTER"><img src="images/sbscr004.gif" width="406" height="65"></p>
<p class="picturetext">The control object Station Supervisor subscribes to the
entity object Station, which in turn subscribes to the entity object Line.</p>
<p>Most often, a <b>subscribe-association </b>from a control object
will be from a class to an instance, or vice versa, i.e., a meta association.
Usually, the instance of the control object that will deal with the event in the
entity object is not created until the event actually takes place. But one can
also imagine, for example, that an instance of a control object would like to
know when a new instance of a certain entity object is created. Thus, in some
few cases the <b>subscribe-association </b>may be an instance
association.</p>
<p class="exampleheading">Example</p>
<p class="example">In the example above, the <b>subscribe-association</b>
from Station Supervisor to Station has the characteristics of a meta
association, i.e., it is the class Station Supervisor that is informed when the
capacity of the Station has run low. When Station Supervisor receives this
message, it creates an instance which deals with the event.</p><br>
<br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>