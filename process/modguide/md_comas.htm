<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Communicate-Association</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Guidelines:&nbsp;<rpw name="PresentationName">Communicate-Association</rpw><a name="Top"></a><a name="XE_communicates-association__guidelines_for"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Roles">Roles</a></li>
  <li><a href="#Multiplicity">Multiplicity</a></li>
  <li><a href="#Navigability">Navigability</a></li>
  <li><a href="#Communication from Actor to Use Case">Communication from actor
    to use case</a></li>
  <li><a href="#Communication from Use Case to Actor">Communication from use
    case to actor</a></li>
  <li><a href="#Optional Conventions">Optional conventions</a></li>
</ul>
<h3><a name="Explanation">Explanation</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Use cases and actors interact by sending signals to one another. To indicate
such interactions we use a <b>communicate-association</b> between
use-case and actor. A use-case has at most one communicate-association to a
specific actor, and an actor has at most one communicate-association to a
specific use-case, no matter how many signal transmissions there are. The
complete network of such associations is a static picture of the communication
between the system and its environment.</p>
<p>Communicate-associations are not given names. Because there can be only one
communicate-association between a use-case and an actor, you need only specify
the start and end points to identify a particular communicate-association.</p>
<p align="center"><img src="images/comasso1.gif" width="214" height="140"></p>
<p class="picturetext">A line or arrow between an actor and a use case indicates
they interact by sending signals to one another.</p>
<h3><a name="Roles">Roles</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Each end of a communicate-association is a <b>role</b> specifying
the face that a use case or actor plays in the association<i>.</i> The roles are
used to specify multiplicities and directions of the association (see below).</p>
<h3><a name="Multiplicity">Multiplicity</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Each role of a communicate-association indicates the <b>multiplicity</b><i>
</i>of its type, that is, how many instances of that actor or use case can be
associated with one instance of the other use case or actor. Multiplicity is
indicated by a text expression on the role. The expression is a comma-separated
list of integer ranges. A range is indicated by an integer (the lower value),
two dots, and an integer (the upper value); a single integer is a valid range,
and the symbol '*' indicates &quot;many&quot;, that is, an unlimited number of
objects. The symbol '*' by itself is equivalent to '0..*', that is, any number
including none; this is the default value. An optional scalar role has the
multiplicity 0..1.</p>
<p>The multiplicity may be augmented with a time unit constraint. This is done
to state how many instances that may be associated, possibly by different
instances, during the time unit. This information is useful since it can tell us
if the use case is performed often, and also how often each actor instance
employs the use case.</p>
<h5>Example:</h5>
<p align="center"><img src="images/md_coma4.gif" width="450" height="105"></p>
<p class="picturetext">The Conduct Transactions use case is used 400,000 times
per day by Customers. Each Customer employs the use case two times per month.</p>
<h3><a name="Navigability">Navigability</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Each role of a communicate-association has a <b>navigability</b><i>
</i>property, indicating who initiates communication in the interaction.&nbsp;
Navigability is shown by an open arrowhead.&nbsp; If the arrowhead points to a use case, the actor at the other end of the
association initiates the interaction with the system.&nbsp; If the arrowhead points to an actor, the system initiates
the interaction with the actor.&nbsp; Two-way navigability is shown by a line
with no arrow-heads (two arrow-heads tends to clutter diagrams).</p>
<p align="center"><img src="images/comasso2.gif" width="446" height="211"></p>
<p class="picturetext">The communication arrow defines the actor that initiated
the use case. For each communication arrow the return message is assumed. A line
with no arrow heads assumes two-way communication.</p>
<p>Do not confuse navigability with data flow; i<span style="mso-bidi-font-family:&quot;Courier New&quot;">t
is used<o:p>
</o:p>
</span> <span style="font-size:12.0pt;font-family:&quot;Times New Roman&quot;;mso-fareast-font-family:
&quot;Times New Roman&quot;;mso-bidi-font-family:&quot;Courier New&quot;;mso-ansi-language:EN-US;
mso-fareast-language:EN-US;mso-bidi-language:AR-SA">to show initiation of
communication only.&nbsp; For example, a customer request for data is shown by
an arrow to the use case representing the system, even though most of the data
flows from the system to the customer.</span></p>
<h3><a name="Communication from Actor to Use Case">Communication from Actor to
Use Case</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Actors communicate with the system by sending signals. To fully understand
the role of the actor, you must know which use cases the actor is involved in.
This is shown by communicate-associations between the actor and the use cases.</p>
<p>The multiplicity of the association shows how many instances of a use case
one instance of an actor can communicate with at the same time.</p>
<h5>Example:</h5>
<p class="example">In the Recycling Machine System, each time an instance of the
actor Customer hands in a deposit item, he sends a signal to the associated
instance of the use case Recycle Items. When the actor is finished, the use case
prints out a receipt. A Customer can communicate with only one instance of
Recycle Items. Thus, the multiplicity of the association is 1. The receipt
returned from the system is considered here as a response from the use-case
instance; thus, the communicate-association needs no navigability in the other
direction.</p>
<p class="picturecenter" align="center"><img src="images/md_coma2.gif" width="236" height="68"></p>
<p class="picturetext">A Customer who wants to return deposit items into a
recycling machine will communicate with the use case Recycle Items.</p>
<p>An actor communicates with use cases for many reasons, including:
<ul>
  <li>To invoke a use case. An actor instance always invokes a use-case
    instance.</li>
  <li>To ask for some data stored in the system, which the use case then fetches
    and presents to the actor.</li>
  <li>To change the data stored in the system by means of a dialog with the
    system.</li>
  <li>To report that something special has happened in the system's surroundings
    that the system should take care of.</li>
</ul>
<h3><a name="Communication from Use Case to Actor">Communication from Use Case
to Actor</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>One actor initiates a use case. However, once it has started, the use case
can communicate with several actors. You can use communicate-associations
between the use case and the actors to show which actors the use case
communicates with. The association's multiplicity shows how many instances of an
actor one instance of a use case can communicate with at the same time.</p>
<p>Use cases communicate with actors for many reasons, including:
<ul>
  <li>If something special has taken place in the system, an actor might need to
    know.</li>
  <li>A use case may need to ask an actor for help in making a decision if
    several options are available.</li>
</ul>
<p>It is common, but not always true, that the use case waits for an answer when
it has sent a signal to an actor. This should be explicitly described in the use
case.<h3><a name="Optional Conventions">Optional Conventions</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The following are common optional conventions which make it clear which actor
initiates the use case.</p>
<ul>
  <li><span style="mso-bidi-font-family: Courier New">The initiating
    actor-to-use-case arrowhead is always shown, even if the use case later
    initiates communication to the initiating actor.&nbsp; This is also the only
    actor-to-use-case arrowhead shown.</span></li>
  <li><span style="mso-bidi-font-family: Courier New">Arrowheads from use case
    to actors may be omitted, or may be included for clarity.</span></li>
</ul>
<p>Conventions such as these, if adopted by your project, should be documented
in your <a href="../artifact/ar_projspecgls.htm">Artifact: Project Specific
Guidelines</a>.</p>
<br><br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>