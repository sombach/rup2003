<!-- RPW META DATA START --




 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Capsule</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="reactivebanner">Guidelines:&nbsp;<rpw name="PresentationName">Capsule</rpw><a name="Top"></a><a name="XE_concurrency__capsule_guidelines"></a><a name="XE_capsule__guidelines_for"></a></h2>

<h3><p class="reactive">Topics</p></h3>
<ul class="reactive">
  <li><a href="#Ports">Ports</a>
    <ul class="reactive">
      <li><a href="#Relay ports">Relay Ports</a></li>
      <li><a href="#End Ports">End Ports</a></li>
      <li><a href="#Port Visibility">Port Visibility</a></li>
      <li><a href="#Port-Based Triggers">Port-Based Triggers</a></li>
    </ul>
  </li>
  <li><a href="#State Machines">State Machines</a></li>
  <li><a href="#Time Service">Time Service</a></li>
  <li><a href="#Capsule Taxonomy">Capsule Taxonomy</a></li>
</ul>
<h3 class="reactive"><a name="Ports">Ports</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p class="reactive">Because ports are on the boundary of a capsule, they may be 
  visible both from outside the capsule and inside. When viewed from the outside, 
  all ports present the same impenetrable object interface and cannot be differentiated 
  except by their identity and the role that they play in their protocol. However, 
  when viewed from within the capsule, we find that ports can be one of two kinds: 
  <b>relay ports</b> and <b>end ports</b>. They differ in their internal connections 
  &#151; relay ports are connected to sub-capsules while end ports are connected 
  to the capsule's state machine. Generally speaking, relay ports serve to selectively 
  export the &quot;interfaces&quot; of internal sub-capsules while end ports are 
  boundary objects for the state machine of a capsule. Both relay and end ports 
  may appear on the boundary of the capsule and, as noted, are indistinguishable 
  from the outside.</p>
<h4 class="reactive"><font size="3"><a name="Relay ports">Relay Ports</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>

<p class="reactive"><b>Relay ports</b> are ports that simply pass all signals
through. They provide an &quot;opening&quot; in the encapsulation shell of a
capsule that can be used by its sub-capsules to communicate with the outside
world without actually being exposed to the outside world (and vice versa). A
relay port is connected, through a connector, to a sub-capsule and is normally
also connected from outside to some other &quot;peer&quot; capsule. They receive
signals coming from either side and simply relay it to the other side keeping
the direction of signal flow. This is achieved without delay or loss of
information unless there is no connector attached on the other side. In the
latter case, the signal is lost.</p>
<p class="reactive">Relay ports allow the direct (zero overhead) delegation of
signals destined for a capsule to a sub-capsule without requiring intervention
by the state machine of the capsule. Relay ports can only appear on the boundary
of a capsule and, consequently, always have <b>public</b> visibility.</p>
<h4 class="reactive"><font size="3"><a name="End Ports">End Ports</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p class="reactive">To be useful, a chain of connectors must
ultimately terminate in an end port that communicates with a state machine. End
ports are boundary objects for the state machines of capsules (although, as we
shall see, some of them also serve as boundary objects for capsules as well).
End ports are the ultimate sources and sinks of all signals sent by capsules.
These signals are generated by the state machines of capsules. To send a signal,
a state machine invokes a send or call operation on one of its end ports. The
signal is then relayed through the attached connector, possibly passing through
one or more relay ports and chained connectors, until it finally encounters
another end port, usually in a different capsule. Since signal-based
communication can be asynchronous, an end port has a queue to hold messages that
have been received but not yet processed by the state machine (i.e., it acts as
a mailbox). The reception of the signal and the dispatching of the receiving
state machine is performed by the state machine according to standard UML
semantics.</p>
<p class="reactive">Like relay ports, end ports may appear on the boundary of a
capsule with public visibility. These ports are called <b>public end ports</b>.
Such ports are boundary objects of both the state machine and the containing
capsule. However, end ports may also appear completely inside the capsule as
part of its internal implementation structure. These ports are used by the state
machine to communicate with its sub-capsules or with external <b>implementation-support
layers</b>. These internal end ports are called <b>protected end ports</b> since
they have protected visibility.</p>
<p  class="reactive">Note that the kind of port is totally determined by its
internal connectivity and its visibility outside the capsule; the various terms
(relay port, public end port, private end port) are merely shorthand
terminology. A public port that is not connected internally may become either a
relay port or an end port depending on how it is later connected, or it may
remain unconnected and be a sink for incoming signals.</p>
<h4  class="reactive"><font size="3"><a name="Port Visibility">Port Visibility</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p  class="reactive">From an external viewpoint, a port is a port;
it is not possible or even desirable to determine whether a port is a relay port
or an end port. However, when the decomposition of a capsule is shown, we can
see inside the capsule and the end port/relay port distinction is indicated
graphically as shown below.</p>

<p align="CENTER" class="reactive"><img src="images/md_cpsl1.gif" width="451" height="173"></p>
<p align="CENTER" class="reactivepicturetext">Port notation - collaboration diagram
(internal view)</p>
<h4 class="reactive">
<font face="Arial" size="3"><a name="Port-Based Triggers">Port-Based Triggers</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p  class="reactive">In practice, it often happens that two or more ports of the
same capsule use the same protocol but are semantically distinct. Also, the same
signal may appear in more than one protocol role supported by different ports of
a capsule. In either case, it may be necessary to distinguish the specific end
port that received the current signal. That allows applications to handle the
same signal differently depending on the source of that signal as well as the
state. We refer to this type of trigger as a <b>port-based trigger</b>. Port-based
triggers are modeled in UML by using guard conditions that checks for a
particular source port.</p>
<h3 class="reactive"><font size="4"><a name="State Machines">State Machines</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p  class="reactive">The specification for the state machine part
of a capsule as well as the specification of valid protocol sequences is done
using standard UML state machines.</p>

<h3  class="reactive"><font size="3"><font size="4"><a name="Time Service">Time
Service</a> </font><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></font></h3>
<p  class="reactive">As can be expected, in most real-time systems
time is a first-order concern. In general, two forms of time-based situations
need to be modeled: the ability to trigger activities at a particular <b>time of
day</b> and, the ability to trigger activities after a certain <i>interval</i>
has expired from a given point in time.</p>
<p  class="reactive">Most real-time systems require an explicit and directly accessible 
  (controllable) timing facility &#151; a <b>time service</b>. This service, which 
  can be accessed through a standard port (service access point), converts time 
  into events that can then be handled in the same way as other signal-based events. 
  For example, with such a service, a state machine can request that it be notified 
  with a &quot;timeout&quot; event when a particular time of day has been reached 
  or when a particular interval has expired.</p>
<h3  class="reactive"><a name="Capsule Taxonomy"><font size="4">Capsule Taxonomy</font></a><font size="3">
<a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></font></h3>
<p class="reactive">Capsules as a concept may be used in a number of different ways. To reflect
this, a capsule hierarchy and taxonomy can be described to cover the common
usages of capsules.</p>
<p align="center" class="reactive"><map name="FPMap0">
<area href="#Role Model Realization" shape="rect" coords="219, 297, 363, 349">
<area href="#Typed Role Model" shape="rect" coords="137, 216, 264, 265">
<area href="#Typed Role Realization" shape="rect" coords="373, 248, 525, 295">
<area href="#Role Realization" shape="rect" coords="395, 110, 541, 154">
<area href="#Capsule" shape="rect" coords="94, 2, 166, 46">
<area href="#Role Model" shape="rect" coords="252, 114, 365, 161">
<area href="#Role Type" shape="rect" coords="98, 112, 211, 160"></map><img src="images/md_cpsl5.gif" border="0" usemap="#FPMap0" width="635" height="467"></p>
<p align="center" class="reactivepicturetext">Capsule Taxonomy showing generalization
hierarchy</p>
<p align="left" class="reactive">The basic capsule taxonomy is:</p>
<ul class="reactive">
  <li>
    <p align="left" class="reactive"><a name="Capsule"><b>Capsule</b></a></p>
    <p align="left" class="reactive">A basic capsule, lacking ports, internal structure or
    behavior is not terribly interesting - it doesn't do much. Such a capsule
    could be used to define an abstract capsule from which other capsules are
    derived. Since no ports, structure or behavior is defined, this capsule type
    is useful only to define a &quot;placeholder&quot; which will be refined
    later.</p>
  </li>
  <li>
    <p align="left" class="reactive"><b><a name="Role Type">Role
    Type</a></b></p>
    <p align="left" class="reactive">A capsule &quot;role
    type&quot; consists of a capsule definition which defines an abstract
    capsule with one or more ports; there is no structure or behavior defined.
    This type of capsule is used in cases where the &quot;interfaces&quot;
    (ports) of a set of capsules needs to be defined once, with the specific
    realizations of those interfaces defined by the sub-types of the 'role type'
    capsule.</p>
  </li>
  <li>
    <p align="left" class="reactive"><a name="Role Model"><b>Role
    Model</b></a></p>
    <p align="left" class="reactive">A capsule &quot;role
    model&quot; consists of a capsule definition with an internal structure
    (defined by a specification collaboration) of nested and potentially
    interconnected capsules, and potentially one or more ports. This type of
    capsule is used to define a &quot;template&quot; for the structure of a
    system, the 'details' of which are delegated to the contained capsules. If
    the role model capsule has ports, these ports define the 'interfaces' for
    the capsule.</p>
    <p align="left" class="reactive">The behavior of the 'role
    model' is unspecified (there is no state machine defined); the behavior must
    be defined by the sub-types of the capsule.</p>
  </li>
  <li>
    <p align="left" class="reactive"><a name="Role Realization"><b>Role
    Realization</b></a></p>
    <p align="left" class="reactive">A capsule &quot;role
    realization&quot; defines behavior (via a state machine) for the capsule,
    but neither internal structure nor interfaces. It essentially provides an
    abstract definition of behavior for all derivative capsules, which must then
    in turn define their own internal structure and interface. The behavior
    definition can be viewed as a 'design assertion' which must be satisfied by
    all capsules which are derived from the 'role realization' capsule.</p>
  </li>
</ul>
<p align="left" class="reactive">There are three useful hybrids of
these basic types, which represent mixtures of the basic definitions:</p>
<ul class="reactive">
  <li>
    <p align="left" class="reactive"><a name="Typed Role Realization"><b>Typed
    Role Realization</b></a></p>
    
    <p align="left" class="reactive">This type of capsule defines both an interface and
    the behavior of a set of capsules, but does not constrain the internal
    structure of derivative capsules. It is essentially a 'role realization'
    capsule which further defines an interface.</p>
    </li>
  <li>
    <p align="left" class="reactive"><a name="Typed Role Model"><b>Typed
    Role Model</b></a></p>
    <p align="left" class="reactive">This type of capsule defines
    an interface and the structure of a set of capsules, but does not constrain
    the behavior of those capsules. The benefit in doing this is to define a
    template for the interface and the structure which can then be subsequently
    specialized as needed by derivative capsules.</p>
  </li>
  <li>
    <p align="left" class="reactive"><a name="Role Model Realization"><b>Role
    Model Realization</b></a></p>
    <p align="left" class="reactive">This type of capsule defines
    an internal structure for the capsule and its abstract behavior, but does
    not define the interface. This type of capsule is useful in cases where a
    number of capsules may share a significant amount of internal structure and
    behavior, but have different interfaces.</p>
  </li>
</ul>

<p align="left" class="reactive">The remaining capsule type, the 'typed role model
realization', which defines structure and interface, plus behavior in the
abstract (for the interface) and in the specific (for the internal structure) is
complex and can be hard to understand, let alone implement correctly. It is
mentioned for the sake of the case where unit tests on the capsule need to be
defined as part of the capsule itself, hence the two separate state machines. In
most cases, this construct is best avoided.</p>
<br><br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>