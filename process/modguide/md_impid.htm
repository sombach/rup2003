<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Guidelines:&nbsp;Import Dependency in Implementation</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Guidelines:&nbsp;<rpw name="PresentationName">Import Dependency 
  in Implementation</rpw><a name="Top"></a><a name="XE_layering__guidelines_for_layering_in_implementation"></a><a name="XE_import-dependency_in_implementation__guidelines_for"></a><a name="XE_implementation_subsystem__handling_import_dependencies_between"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Use">Use</a></li>
</ul>
<h3><a name="Explanation"></a>Explanation <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Handling dependencies between subsystems is an important aspect of
structuring the implementation model. A element in a client subsystem can only
compile against elements in a supplier subsystem, if the client subsystem
imports the supplier subsystem. To express such dependencies use the import
dependency from one subsystem to another, to point out the subsystem on which
there is a dependence.</p>
<p class="exampleheading">Example:</p>
<p class="example">The following component diagram illustrates the import
dependencies between implementation subsystems.</p>
<p class="picturecenter" align="center"><img src="images/md_impi2.gif" width="217" height="203"></p>
<p class="picturetext">The subsystem Telephone Banking has an import dependency 
  to the subsystem Trading Services, allowing elements in Telephone Banking to 
  compile against public (visible) elements in Trading Services.</p>
<h3><a name="Use"></a>Use <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<h4><a name="XE_architectural_control__guidelines_for_import-dependency_in_implementation">Architectural
Control</a></h4>
<p>An important usage of the import dependency is to control the visibility between 
  subsystems, and to enforce an architecture on the implementers. When the import 
  dependency is defined by the software architect early in the development, the 
  implementers are only allowed to let their implementation elements reference 
  (compile against) public elements in the imported subsystems. Controlling the 
  imports helps maintain the software architecture and avoids unwanted dependencies.</p>
<h4>Subsystems Can Be Organized in Layers</h4>
<p>The implementation model is normally organized in layers. The number of
layers is not fixed, but vary from situation to situation. The following is a
typical architecture with four layers:
<ul>
  <li>The top layer, <b>application layer</b>, contains the
    application specific services.</li>
  <li>The next layer, <b>business-specific layer</b>, contains
    business specific components, used in several applications.</li>
  <li>The <b>middleware layer </b>contains components such as
    GUI-builders, interfaces to database management systems,
    platform-independent operating system services, and OLE-components such as
    spreadsheets and diagram editors.</li>
  <li>The bottom layer, <b>system software layer</b>, contains
    components such as operating systems, interfaces to specific hardware, and
    so on.</li>
</ul>
      <p class="picturecenter" align="center"><img src="images/md_impi3.gif" width="454" height="367"></p>
<p class="picturetext">An example of a layered implementation model for a
banking system. The arrows shows import dependencies between subsystems.</p><br>
<br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>