<!-- RPW META DATA START --
 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Prototypes</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Prototypes</rpw><a name="Top"></a><a name="XE_prototype__introduction_to"></a></h2>
<h5>Topics</h5>
<ul>
  <li><a href="#How to Use">How to use</a></li>
  <li><a href="#Types of Prototypes">Types of Prototypes</a></li>
  <li><a href="#Exploratory Prototypes">Exploratory Prototypes</a></li>
  <li><a href="#Evolutionary Prototypes">Evolutionary Prototypes</a></li>
  <li><a href="#Behavioral Prototypes">Behavioral Prototypes</a></li>
  <li><a href="#Structural Prototypes">Structural Prototypes</a></li>
</ul>
<h3><a name="How to Use">How to Use </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Prototypes are used in a directed way to reduce risk. Prototypes can reduce
uncertainty surrounding:
<ul>
  <li>The business viability of a product being developed</li>
  <li>The stability or performance of key technology</li>
  <li>Project commitment or funding: building a small proof-of-concept prototype</li>
  <li>The understanding of requirements</li>
  <li>The look and feel of the product, its usability.</li>
</ul>
<p>A prototype can help to build support for the product by showing something
concrete and executable to users, customers and managers.</p>
<p>The nature and goal of the prototype must remain clear, however, throughout
its lifetime. If you don't intend to evolve the prototype into the real product,
don't suddenly assume that because the prototype works it should become the
final product. An exploratory, behavioral prototype, intended to very rapidly
try out some user-interface, rarely evolves into a strong, resilient product.</p>
<h3><a name="Types of Prototypes">Types of Prototypes </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>You can view prototypes in two ways: what they explore; and how they evolve
or what is their outcome.</p>
<p>In the context of the first view - what they explore - there are two main
kinds of prototypes:
<ul>
  <li>A <b>behavioral </b>prototype, which focuses on exploring
    specific behavior of the system.</li>
  <li>A <b>structural </b>prototype, which explores some architectural
    or technological concerns.</li>
</ul>
<p>In the context of the second view - their outcome - there are also two kinds
of prototypes:
<ul>
  <li>An <b>exploratory</b> prototype, which is thrown away when done,
    also called a throw-away prototype.</li>
  <li>An <b>evolutionary</b> prototype, which gradually evolves to
    become the real system.</li>
</ul>
<h3><a name="XE_exploratory_prototype"></a><a name="XE_prototype__exploratory_prototype"></a><a name="Exploratory Prototypes">Exploratory
Prototypes </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>An exploratory prototype is designed to be like a small
&quot;experiment&quot; to test some key assumption about the project, either
functionality or technology or both. It might be something as small as a few
hundred lines of code, created to test the performance of a key software or
hardware component. Or it may be a way of clarifying requirements, a small
prototype developed to see if the developer understands a particular behavioral
or technical requirement.</p>
<p>Exploratory prototypes tend to be intentionally &quot;throw-away&quot;, and
testing of them tends to be informal. The design of exploratory prototypes tends
to be very informal, and also tends to be the work of one or two developers at
most.</p>
<h3><a name="XE_evolutionary_prototype"></a><a name="XE_prototype__evolutionary_prototype"></a><a name="Evolutionary Prototypes">Evolutionary
Prototypes </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Evolutionary prototypes, as their name implies, evolve from one iteration to
the next. While not initially production quality, their code tends to be
reworked as the product evolves. In order to keep rework manageable, they tend
to be more formally designed and somewhat formally tested even in the early
stages. As the product evolves, testing becomes formalized, as usually does
design.</p>
<h3><a name="XE_behavioral_prototype"></a><a name="XE_prototype__behavioral_prototype"></a><a name="Behavioral Prototypes">Behavioral
Prototypes </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Behavioral prototypes tend to be exploratory prototypes; they do not try to
reproduce the architecture of the system to be developed but instead focus on
what the system will do as seen by the users (the &quot;skin&quot;). Frequently,
this kind of prototype is &quot;<b>quick and dirty</b>,&quot; not
built to project standards. For example, Visual Basic may be used as the
prototyping language, while C++ is intended for the development project.
Exploratory prototypes are temporary, are done with minimal effort, and are
thrown away once they have served their purpose.</p>
<h3><a name="XE_prototype__structural_prototype"></a><a name="Structural Prototypes">Structural
Prototypes </a><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Structural prototypes tend to be evolutionary prototypes; they are more
likely to use the infrastructure of the ultimate system, (the
&quot;bones&quot;), and are more likely to evolve into becoming the real system.
If the prototype is done using the &quot;production&quot; language and tool set,
there is the added advantage of being able to test the development environment
and let some of the personnel get familiar with new tools and procedures.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

