<!-- RPW META DATA START --

 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Events and Signals</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 

<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Events and Signals</rpw><a name="Top"></a></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Introduction">Introduction</a></li>
  <li><a href="#Kinds of events">Kinds of events</a>
    <ul>
      <li><a href="#Signals">Signals</a></li>
      <li><a href="#Call events">Call events</a></li>
      <li><a href="#Time events">Time and change events</a></li>
    </ul>
  </li>
  <li><a href="#sending events">Sending and receiving events</a></li>
</ul>
<h3><a name="Introduction">Introduction</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>In the real world, things happen, often simultaneously and unpredictably.
&quot;Things that happen&quot; are called 'events'.</p>
<p>In the context of state machines, events model the occurrence of a stimulus
that may trigger a state transition. Events include signals, calls, the passage
of time, or a change in state. Events may be synchronous or asynchronous.</p>
<p>A 'signal' is a kind of event that represents the specification of an
asynchronous stimulus between two instances.</p>
<h3><a name="Kinds of events">Kinds of events</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Events may be external or internal. External events are those that pass between 
  the system and its actors. Internal events are those which pass among the objects 
  that live within the system. There are four kinds of events: signals, calls, 
  the passing of time, and a change in state.</p>
<h4><a name="Signals">Signals</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p>A signal represents an object that is dispatched (thrown) asynchronously by
one object and then received (caught) by another. Exceptions are an example of a
kind of signal.</p>
<p>Signals may have instances, although these instances are not typically
modeled explicitly. Signals may be involved in generalization relationships,
enabling the modeling of hierarchies of events.</p>
<p>Signals may have attributes and operations. The attributes of a signal serve
as its parameters.</p>
<p>A signal may be sent as the action of a state transition in a state machine
or the sending of a message in an interaction. The execution of an operation can
also send signals. When modeling a class or an interface, an important part of
specifying the behavior of the element is specifying the signals that can be
sent by its operations. The relationship between an operation and the events
which it can send are modeled using a dependency relationship, stereotyped as
&laquo;send&raquo;.</p>
<h4><a name="Call events">Call events</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p>Just as a signal event represents the occurrence of a signal, a call event
represents the dispatch of an operation. In both cases, the event may trigger a
state transition in a state machine.</p>
<p>Whereas a signal is an asynchronous event, a call event is, in general,
synchronous. This means that when an object invokes an operation on another
object, control passes from the sender to the receiver until the operation is
completed, whereupon control returns to the sender. Modeling a call event is
visualized in the same way as a signal event. In both cases, the event is
displayed along with its parameters as the trigger for a state transition.</p>
<p>Although there are no visual cues to distinguish a signal event from a call
event, the difference will appear in the receiver class, as it will declare an
operation which handles the call event. In the case of a signal, there will be a
transition in the state machine which is triggered by the signal.</p>
<h4><a name="Time events">Time and change events</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h4>
<p>A time event represents the passage of time. Time events are used to
synchronize time-dependent parts of the system using a common clock mechanism. A
change event represents a change in the state of the system or the satisfaction
of some condition.</p>
<h3><a name="sending events">Sending and receiving events</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Signal and call events involve at least two objects: a sender and a receiver.
When the signal is sent, the sender dispatches the signal and ten continues upon
its flow of control without waiting for a return from the receiver. This is in
contrast with the semantics of the operation call in which the sender waits for
the receiver to respond before resuming its flow of control. Because of this,
operations are typically used to represent &quot;blocking&quot; behavior
(behavior which blocks or prevents other things from happening), while signals
are used to represent non-blocking behavior.</p>
<p>The act of one object sending a signal to a set of objects is called
'multi-casting', and is represented by sending a signal to a container which
holds a set of receivers. Broadcasting is the act of sending a signal to all
objects in a system, and is represented by sending a signal to an object which
represents the system as a whole; this 'system object' in turn realizes message
distribution mechanism which ensure that the signal is sent to all appropriate
objects in the system.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>