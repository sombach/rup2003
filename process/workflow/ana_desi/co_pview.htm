<!-- RPW META DATA START --




 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Process View</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Process View</rpw></h2>
<p>To provide a basis for understanding the process organization of the system,
an architectural view called the <b>process view</b> is used in the
Analysis &amp; Design discipline. There is only one process view of the system,
which illustrates the process decomposition of the system, including the mapping
of classes and subsystems on to <a href="../../glossary.htm#process"> processes</a> and
<a href="../../glossary.htm#thread">threads</a>. The process view is
refined during each iteration. As [<a href="../../referenc.htm#BOO98">BOO98</a>]
states: &quot;With UML, the static and dynamic aspects of this view are captured
in the same kinds of diagrams as for the design view - i.e. class diagrams,
interaction diagrams, activity diagrams and statechart diagrams, but with a
focus on the active classes that represent these threads and processes.&quot; Of
concern when constructing and using the process view are, for example, issues of
concurrency, response time, deadlock, throughput, fault tolerance, and
scalability.</p>
<p>It is possible to design for concurrency without the use of direct underlying
operating system support - for example using a specially written scheduler or
other run-time support. In such cases, concurrency is simulated at the
application infrastructure level, rather than in the operating system. If
necessary, other stereotypes (in addition to the standard threads and processes)
may be used to make this distinction (to guide implementation). For example, the
Ada programming language contains its own model of concurrency, based on Ada
tasks; the Ada run-time has to provide this, whether or not the operating system
on which it runs has an appropriate equivalent - threads, say - which could be
used to support Ada tasking.</p>
In real-time systems, the
Rational Unified Process recommends the use of <a href="../../../process/artifact/ar_cpsl.htm">Capsule</a>s
to represent active classes in the process view. Capsules have strong semantics to simplify the
modeling of concurrency:
<ul class="reactive">
  <li>
    they use asynchronous message-based communication through <a href="../../../process/artifact/ar_cpsl.htm#Ports">Ports</a>
    using well-defined <a href="../../../process/artifact/ar_prot.htm">Protocol</a>s;</li>
  <li>
    they use run-to-completion semantics for message processing;</li>
  <li>
    they encapsulate passive objects (ensuring that thread interference cannot occur).
  </li>
</ul>
<p align="center"><img src="../../activity/images/proc3.gif" width="574" height="403"></p>
<p class="picturetext">The process view shows the process organization of the
system.</p>
<p>There are four additional views, the <b>Use-Case View </b>(handled
in the Requirements discipline), and the <b>Logical View</b>, <b>Deployment
View</b>, and <b>Implementation View</b>; these views are handled
in the Analysis &amp; Design and Implementation disciplines.</p>
<p>The architectural views are documented in a <b>Software Architecture
Document</b>. You may add different views, such as a security view, to
convey other specific aspects of the software architecture.</p>
<p>So in essence, architectural views can be seen as abstractions or
simplifications of the models built, in which you make important characteristics
more visible by leaving the details aside. The architecture is an important
means for increasing the quality of any model built during system development.</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>