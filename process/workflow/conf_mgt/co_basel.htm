<!-- RPW META DATA START --
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Baselining</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner"><a name="Top"></a>Concepts:&nbsp;<rpw name="PresentationName">Baselining</rpw></h2>

<h5>Topics</h5>
<ul>
  <li><a href="#Definition">Definition</a></li>
  <li><a href="#Explanation">Explanation</a></li>
  <li><a href="#Use">Use</a></li>
</ul>

<h3><a name="Definition">Definition</a><a name="XE_baseline__definition"></a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>A baseline is a 'snapshot' in time of one version of each artifact in the project 
  repository. It provides an official standard on which subsequent work is to 
  be based, and to which only authorized changes can be made. After an initial 
  baseline is established every subsequent change to a baseline is recorded as 
  a delta until the next baseline is set.</p>
<p>Developers on joining a project populate their work areas with versions of 
  directories and files represented by a baseline. As work proceeds, a baseline 
  incorporates work that developers have delivered since the last baseline was 
  created. Once changes have been incorporated into a baseline, developers rebase 
  to the new baseline to stay current with changes in the project. Rebasing merges 
  files from the integration workspace into the development workspace.</p>

<h3><a name="Explanation">Explanation</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The three main reasons for creating baselines are reproducibility, traceability, 
  and reporting.</p>
<p>Reproducibility is the ability to go back in time and reproduce a given release 
  of a software system, or reproduce a development environment at a prior time 
  in the project. Traceability establishes the predecessor-successor relationship 
  between project artifacts. Its purpose is to ensure that design fulfills requirements, 
  code implements the design, and executables are built from the correct code. 
  Reporting is based on comparing the contents of one baseline against another. 
  Baseline comparison assists in debugging and generating release notes.</p>
<p>When baselines are created, all constituent elements and baselines need to 
  be labeled such that they are uniquely identifiable and re-creatable.</p>
<p>There are several advantages to creating baselines:<a name="XE_baseline__advantages_of_creating"></a></p>
<ul>
  <li>A baseline provides a stable point, and a snapshot of the development artifacts.</li>
  <li>Baselines provide a stable point from which new projects can be created. 
    The new project, as a separate branch, would be isolated from subsequent changes 
    to the original project (on the main branch).</li>
  <li>Individual developers can take baselined elements as a basis for updates 
    in their isolated private workspaces.</li>
  <li>A baseline provides a way for a team to roll back changes in case the updates 
    are considered to be unstable or suspect.</li>
  <li>A baseline provide a way to reproduce reported bugs given that you can recreate 
    the configuration when a particular release was built.</li>
</ul>

<h3><a name="Use">Use</a><a name="XE_baseline__when_to_create"></a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Make baselines regularly to make sure that developers stay in sync with each 
  other's work. However, during the course of the project baselines should be 
  created routinely at the ends of iterations (minor milestones) and major milestones 
  associated with the end of the lifecycle phases:</p>
<ul>
  <li>Lifecycle Objectives Milestone (Inception Phase)</li>
  <li>Lifecycle Architecture Milestone (Elaboration Phase)</li>
  <li>Initial Operational Capability Milestone (Construction Phase)</li>
  <li>Product Release Milestone (Transition Phase)</li>
</ul>
<br>
<br>


 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

