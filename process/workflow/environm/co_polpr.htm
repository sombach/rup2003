<!-- RPW META DATA START --




 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;RUP Tailoring</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">RUP&nbsp;Tailoring</rpw><a name="Top"></a></h2>
<h5>Topics</h5>
<ul>
  <li><a href="#Introduction">Introduction</a></li>
  <li><a href="#Extend">Extend the RUP framework</a></li>
  <li><a href="#Configure">Create a RUP configuration</a></li>
  <li><a href="#Instantiate">Instantiate the configured process on the project</a></li>
</ul>
<h3><a name="Introduction">Introduction</a> <a href="#Top"><img border="0" src="../../../images/top.gif" width="26" height="20"></a></h3>
<p>The Rational Unified Process framework constitutes guidance on a rich set of 
  software engineering practices. It is applicable to projects of different size 
  and complexity, as well as for different development environments and domains. 
  This means that no single project will benefit from using of <b>all of RUP</b>. 
  Applying all of RUP on a single project will likely result in an inefficient 
  project environment, where teams will struggle to keep focused on the important 
  tasks, and struggle to find the right set of information. Thus, we recommend 
  that all projects tailor the RUP. 
<p>This is a high-level summary of the concept of RUP Tailoring, the goal of which 
  is to provide appropriate and customized guidance on how to develop software. 
  In general, process tailoring may happen at two levels : 
<ul>
  <li>At the <b>organizational level, </b> where process engineers modify, improve 
    or configure a common process to be used organization-wide. This takes into 
    consideration issues such as the application domain, reuse practices, and 
    core technologies mastered by the company. One organization can have more 
    than one organization-wide process, each adapted to a different type of development. 
    In some cases, the predefined classic RUP configuration serves as the organization-wide 
    process. Tailoring at the organizational level is described in more detail 
    in the Process Engineering Process (PEP) &#151; a component of the <a href="../../res_processworkbench.htm">Rational 
    Process Workbench&#153; product</a>. </li>
  <li>At the<b> project level</b>, where process engineers take the organization-wide 
    process and further refine it for a given project. This level takes into consideration 
    the size of the project, the reuse of company assets, the initial cycle (&quot;<a href="../../glossary.htm#green-field_development">green-field 
    development</a>&quot;) versus the evolution cycle, and so on. Process tailoring 
    at the project level is described in more details in the <a href="../../activity/ac_tlrprjprc.htm">Activity: 
    Tailor the Process for the Project</a>.</li>
</ul>
<p></p>
<p>The rest of this paper is organized into three categories of process customization 
  work : 
<ul>
  <li><b>Extend</b> the process framework by creating RUP plug-ins.</li>
  <li><b>Configure</b> the process by selecting the relevant process components 
    and plug-ins in the RUP framework.</li>
  <li><b>Instantiate</b> the process by fine-tuning the configuration to fit the 
    exact needs of a project.</li>
</ul>
<h3><a name="Extend">Extend the RUP Framework</a> <a href="#Top"><img src="../../../images/top.gif"alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The RUP process framework is manifested in a process model defined using an 
  UML based meta-model. This meta-model is compliant with Object Management Group's 
  (OMG) Software Process Engineering Meta-model (SPEM), which is a UML profile 
  for process modeling. The RUP Website that you are currently looking at, is 
  produced from this process model. The goal of extending the RUP framework is 
  to add additional process know-how to fit with the specific process needs of 
  the development organization or individual projects, in areas where the coverage 
  of the RUP process framework is deemed insufficient for the project. </p>
<p>The <a href="../../res_processworkbench.htm">RPW</a> enables the creation of RUP 
  extensions using the RUP plug-in technology. Following the recommendations for 
  this technology, the RUP framework can be extended in two ways. You either create 
  a structural plug-in to extend the RUP process model, or you create extensions 
  that will provide a development organization's relevant reusable assets to the 
  project through thin plug-ins. The two different options are discussed below.</p>
<p><b>Sub-topics:</b></p>
<ul>
  <li><a href="#StructuralPlugins">Extending the RUP by Creating Structural Plug-ins</a></li>
  <li><a href="#ThinPlugins">Extending the RUP by Creating Thin Plug-ins</a></li>
</ul>
<h4><a name="StructuralPlugins">Extending the RUP by Creating Structural Plug-ins 
  </a><a href="#Extend"><img src="../../../images/top.gif" alt="To Step Number 2" border="0" width="26" height="20"></a></h4>
<p> A RUP plug-in is typically a fraction of a software development process describing 
  a specific domain, technology, or platform. A structural plug-in is a process 
  fraction that extends the RUP process model by adding process elements, such 
  as roles, activities, artifacts, and disciplines. RUP Modeler&#153; is a tool 
  component of RPW that supports the development of structural plug-ins.</p>
<p>Most structural plug-ins will be developed in process mature organizations 
  where the focus is on utilizing the process synergy between projects, especially 
  where several projects are developed over the same domain and technology, or 
  in similar development environments. We recommend that you spend some time looking 
  at existing plug-ins before a plug-in project is started, to avoid &quot;reinventing 
  the wheel&quot;. The <a href="../../rescenter.htm##RUPPluginExchange">RUP Plug-in 
  Exchange on the Rational Developer Network</a> contains a complete list of available 
  plug-ins that you can download and include in your RUP configuration. </p>
<p>A single project usually does not take on the task of creating a structural 
  plug-in to the RUP, unless the project is large enough to justify the cost of 
  the plug-in development within the budget of the project. A structural plug-in 
  is similar to any reusable asset in the sense that you don't want to take the 
  cost of making it reusable unless you see a reuse potential for it beyond the 
  scope of the project. </p>
<h4><a name="ThinPlugins">Extending the RUP by creating thin plug-ins </a><a href="#Extend"><img src="../../../images/top.gif" alt="To Extending the RUP" border="0" width="26" height="20"></a></h4>
<p>Thin plug-ins differ from the above mentioned structural plug-ins in that they 
  don't require any modeling. This is a mechanism for organizations to package 
  their organizational assets, such as artifact templates, guidelines, examples 
  and other reusable assets for consumption in the individual project. </p>
<p>The creation of such plug-ins is done at very low cost and, as such, is highly 
  applicable to any sized organization and can usually be justified within the 
  budget of one single project. The RPW product enables the creation of such an 
  extension through the tool component RUP Organizer&#153;. The resulting artifact 
  is a plug-in that can be loaded into the RUP Builder product and included in 
  any process configuration.</p>
 
<p>See the <a href="../../../toolment/rpw/tm_packaging_assets.htm">Tool Mentor: 
  Packaging Project-specific Assets into Thin Plug-ins with RUP Organizer</a> 
  for further information. </p>
 
<h3><a name="Configure"></a>Create a RUP configuration <a href="#Top"><img src="../../../images/top.gif"alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Configuring the RUP is a matter of right-sizing the process to match the needs 
  of a specific organization or individual project. It involves selecting the 
  right set of process components and to provide appropriate views into this configuration 
  to hide parts of the process irrelevant for certain user-groups.</p>
<p>Creating a RUP configuration involves making a series of decisions :</p>
<ul>
  <li>Selecting relevant process components from the RUP framework.</li>
  <li>Eliminating unnecessary process elements.</li>
  <li>Adding company specific processes and relevant resources to help the production 
    of project artifacts.</li>
  <li>Defining views into the configuration to support different stakeholders' 
    perspectives on the process.</li>
</ul>
<p>The RUP product comes with a process configuration tool called RUP Builder&#153; 
  for supporting the nontrivial tasks listed above. It provides a set of predefined 
  RUP configurations for specific project contexts. Select the predefined configuration 
  closest to the characteristics of your project, and tailor it further by selecting 
  and deselecting process components as appropriate. Each process component presented 
  in RUP Builder has a description page where you can read about what process 
  elements it contains, as well as guidance on why you should include it in your 
  configuration. </p>
<p>If thin or structural RUP plug-ins have been created using the RPW product, 
  these are typically loaded into the RUP Builder repository and selected as part 
  of the configuration, and thus becoming an integral part of the resulting Website. 
</p>
<p>Further, projects will often require that views be defined on top of the configured 
  process, to suppress unwanted process elements for given teams within the project. 
  The developers, for example, don't necessarily want to see the same details 
  as the project manager. The RUP Builder allows for creation of such views, for 
  example based on roles. When the process components are selected and the views 
  created, RUP Builder allows for automatic generation of the RUP Website. The 
  resulting RUP Website contains only the selected components and will present 
  the views as separate instances (or tabs) of the treebrowser.</p>
<p>We recommend that all projects start by creating and publishing their RUP configuration 
  in RUP Builder.  
See <a href="../../../toolment/builder/tm_configure_process.htm">Tool Mentor: 
  Configure Process Using RUP Builder</a> for further information.</p>
<h3> <a name="Instantiate"></a>Instantiate the configured process on a project 
  <a href="#Top"><img src="../../../images/top.gif"alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Instantiating a RUP configuration on a project means turning the configuration 
  into a enactable process instance for the project. This process instance &#151; 
  also called the Project-Specific Process &#151; is fine-tuned to fit the exact 
  needs of the project.</p>
<p>If the produced configuration is accurate, the task of instantiating it on 
  the project will be fairly light. However, since a RUP configuration is produced 
  from a set of process components, and these components are comprised of process 
  elements, </p>
<p>The work of instantiating the process can include :</p>
<ul>
  <li>Defining which artifacts the project will produce, when in the lifecycle 
    they are produced, and how the quality of these artifacts will be verified. 
  </li>
  <li>Collecting and customize relevant guidelines, templates, and examples. Make 
    these available through the process Website.</li>
  <li>Customizing the lifecycle model to fit the characteristics of the project.</li>
  <li>Producing a project Website that serves as the project's artifact repository. 
    This project web will typically reference the underlying process Website tailored 
    for the project. </li>
</ul>

<p>The RUP has a notion of a development case for documenting decisions made when 
  fine-tuning the process. A process engineer often uses the development case 
  as a means of communicating process related issues with the project members. 
  Thus, it is important to make this artifact available to all project members. 
  The formatting options of a development case is discussed in <a href="../../modguide/md_dvcas.htm">Guideline: 
  Development Case</a>. One common approach is to develope it as a minimal set 
  of web pages, and provide details in the underlying RUP configuration. Below 
  is an illustration of how these artifacts can be positioned to achieve a high 
  degree of visibility.</p>
  
  

<p align="center"><img src="images/devc_online.gif" width="600" height="468"></p>
<p align="center">Example of positioning the Development Case artifact</p> 
<p>The instantiated process serves as a direct input to the planning of the project.</p>
<p>&nbsp;</p>
 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>