<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Test Automation and Tools</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Test Automation 
  and Tools</rpw><a name="Top"></a><a name="XE_test__stages_of"></a><a name="XE_stages_of_test__introduction_to"></a></h2>
<p>Test automation tools are increasingly being brought to the market to automate 
  Test activities. A number of automation tools exist, but it's unlikely that 
  a single tool is capable of automating all test activities. Most tools focus 
  on a specific activity or group of activities, whereas some only address one 
  aspect of an activity.</p>
<p>When evaluating different tools for test automation, it's important to be aware 
  of the type of tool you are evaluating, the limitations of the tool, and what 
  activities the tool addresses and automates. Test tools are often evaluated 
  and acquired based on these categories:</p>
<ul>
  <li><a href="#Function">Function</a></li>
  <li><a href="#White-boxBlack-box">White-box vs. Black-box</a></li>
  <li><a href="#Specialization">Specialization</a></li>
</ul>

<h3><b><a name="Function">Function</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Test tools may be categorized by the functions they perform. Typical function 
  designations for tools include: 
<ul>
  <li><b>Data acquisition tools </b>that acquire data to be used in 
    the test activities. The data may be acquired through conversion, extraction, 
    transformation, or capture of existing data, or through generating use cases 
    or supplemental specifications.</li>
  <li><b>Static measurement tools </b>that analyze information contained in the 
    design models, source code, or other fixed sources. The analysis yields information 
    on the logic flow, data flow, or quality metrics such as complexity, maintainability, 
    or lines of code.</li>
  <li><b>Dynamic measurement tools</b> that perform an analysis during the execution 
    of the code. The measurements include the run-time operation of the code such 
    as memory, error detection, and performance.</li>
  <li><b>Simulators</b> or <b>drivers </b>that perform activities, which for reasons 
    of timing, expense, or safety are not available for testing purposes.</li>
  <li><b>Test management tools</b> that assist in planning, designing, 
    implementing, executing, evaluating, and managing the test activities or artifacts.</li>
</ul>

<h3><b><a name="White-boxBlack-box">White-box vs. Black-box</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Test tools are often characterized as either white-box or black-box based upon 
  the manner in which tools are used, or the technology and knowledge needed to 
  use the tools. 
<ul>
  <li><b>White-box tools </b>rely upon knowledge of the code, design models, or 
    other source material to implement and execute the tests.</li>
  <li><b>Black-box tools</b> rely only upon the use cases or functional description 
    of the target-of-test. </li></ul>
<p>Whereas white-box tools have knowledge of how the target-of-test processes 
    the request, black-box tools rely upon the input and output conditions to 
    evaluate the test.</p>


<h3><b><a name="Specialization">Specialization</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>In addition to the broad classifications of tools previously presented, tools 
  may also be classified by specialization. 
<ul>
  <li><b>Record and Playback tools</b> combine data acquisition with dynamic measurement. 
    Test data is acquired during the recording of events (known as test implementation). 
    Later, during test execution, the data is used to playback the test script, 
    which is used to evaluate the execution of the target-of-test.</li>
  <li><b>Quality metrics tools</b> are static measurement tools that perform a 
    static analysis of the design models or source code to establish a set of 
    parameters that describe the target-of-test's quality. The parameters may 
    indicate reliability, complexity, maintainability, or other measures of quality.</li>
  <li><b>Coverage monitoring tools </b>indicate the completeness of testing by 
    identifying how much of the target-of-test was covered, in some dimension, 
    during testing. Typical classes of coverage include use cases (requirements-based), 
    logic branch or node (code-based), data state, and function points.</li>
  <li><b>Test case generators</b> automate the generation of test data. Test case 
    generators use either a formal specification of the target-of-test's data 
    inputs, or the design models and source code to produce test data that tests 
    the nominal inputs, error inputs, and limit and boundary cases.</li>
  <li><b>Comparator tools</b> compare test results with reference results 
    and identify differences. Comparators differ in their specificity to particular 
    data formats. For example, comparators may be pixel-based to compare bitmap 
    images or object-based to compare object properties or data.</li>
  <li><b>Data extractors </b>provide inputs for test cases from existing 
    sources, including databases, data streams in a communication system, reports, 
    or design models and source code.</li>
</ul>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>