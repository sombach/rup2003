<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Acceptance Testing</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Acceptance Testing</rpw><a name="XE_acceptance_test__introduction_to"></a><a name="Top"></a></h2>
<p>Acceptance testing is the final test action before deploying the software. 
  The goal of acceptance testing is to verify that the software is ready and can 
  be used by your end users to perform those functions and tasks for which the 
  software was built. There are three common strategies for implementing an acceptance 
  test. They are: 
<ul>
  <li><a href="#Formal Acceptance Testing">Formal acceptance</a></li>
  <li><a href="#Informal Acceptance Testing">Informal acceptance or alpha test</a></li>
  <li><a href="#Beta Testing">Beta test</a></li>
</ul>
<p>The strategy you select is often based on the contractual requirements, organizational 
  and corporate standards, and application domain.</p>
<h3><b><a name="Formal Acceptance Testing">Formal Acceptance Testing</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Formal acceptance testing is a highly managed process and is often an extension 
  of the system test. The tests are planned and designed as carefully as, and 
  in the same detail as, system testing. The test cases chosen should be a subset 
  of those performed in system test. It's important not to deviate in any way 
  from the chosen test cases. In many organizations, formal acceptance testing 
  is fully automated.</p>
<p>The activities and artifacts are the same as for system testing. In some organizations, 
  the development organization (or its independent test group), with the representatives 
  of the end-user organization, performs the acceptance test. In other organizations, 
  acceptance testing is performed completely by the end-user organization or an 
  objective group of people chosen by the end-user organization.</p>
<p>The benefits of this form of testing are:
<ul>
  <li>The functions and features to be tested are known.</li>
  <li>The details of the tests are known and can be measured.</li>
  <li>The tests can be automated, which permits regression testing.</li>
  <li>The progress of the tests can be measured and monitored.</li>
  <li>The acceptability criteria are known.</li>
</ul>
<p>The disadvantages include:
<ul>
  <li>Requires significant resources and planning.</li>
  <li>The tests may be a re-implementation of system tests.</li>
  <li>The testing may not uncover subjective defects in the software, since you're 
    only looking for defects you expect to find.</li>
</ul>
<h3><b><a name="Informal Acceptance Testing">Informal Acceptance Testing</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>In informal acceptance testing, the test procedures for performing the test
are not as rigorously defined as for formal acceptance testing. The functions
and business tasks to be explored are identified and documented, but there are
no particular test cases to follow. The individual tester determines what to do.
This approach to acceptance testing is not as controlled as formal testing and
is more subjective than the formal one.</p>
<p>Informal acceptance testing is most frequently performed by the end-user
organization.</p>
<p>The benefits of this form of testing are:
<ul>
  <li>The functions and features to be tested are known.</li>
  <li>The progress of the tests can be measured and monitored.</li>
  <li>The acceptability criteria are known.</li>
  <li>You will uncover more subjective defects than with formal acceptance
    testing.</li>
</ul>
<p>The disadvantages include:
<ul>
  <li>Resources, planning, and management resources are required.</li>
  <li>You have no control over what test cases are used.</li>
  <li>End users may conform to the way the system works and not see the defects.</li>
  <li>End users might focus on comparing the new system to a legacy system, rather 
    than looking for defects.</li>
  <li>Resources for acceptance testing are not under the control of the project 
    and could be constricted.</li>
</ul>
<h3><b><a name="Beta Testing">Beta Testing</a> </b><a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Beta testing is the least controlled of the three acceptance test strategies. 
  In beta testing, the amount of detail, the data, and the approach taken is entirely 
  up to the individual tester. Each tester is responsible for creating his or 
  her own environment, selecting his or her data, and determining what functions, 
  features, or tasks to explore. Each tester is responsible for identifying his 
  or her own criteria for whether to accept the system in its current state or 
  not.</p>
<p>Beta testing is implemented by end users, often with little or no management 
  from the development (or other non end-user) organization. Beta testing is the 
  most subjective of all acceptance test strategies.</p>
<p>The benefits of this form of testing are:
<ul>
  <li>Testing is implemented by end users.</li>
  <li>There are large volumes of potential test resources.</li>
  <li>There is increased customer satisfaction for those who participate.</li>
  <li>You uncover more subjective defects than with formal or informal acceptance 
    testing.</li>
</ul>
<p>The disadvantages include:
<ul>
  <li>You might not test all functions or features.</li>
  <li>Test progress is difficult to measure.</li>
  <li>End users might conform to the way the system works and not see or report 
    the defects.</li>
  <li>End users may focus on comparing the new system to a legacy system, rather
    than looking for defects.</li>
  <li>Resources for acceptance testing are not under the control of the project 
    and could be constricted.</li>
  <li>Acceptability criteria are not known.</li>
  <li>You need increased support resources to manage the beta testers.</li>
</ul>
<br>
<br>


 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

