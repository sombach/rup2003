<!-- RPW META DATA START --

 
 

-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../../rop.css" type="text/css">
<title>Concepts:&nbsp;Requirements Management</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 

<h2 class="banner">Concepts:&nbsp;<rpw name="PresentationName">Requirements Management</rpw><a name="XE_requirements_management__as_a_feature_of_the_Rational_Unified_Process"></a><a name="Top"></a></h2>

<h5>Topics</h5>

<ul>
  <li><a href="#What is Requirements Management">What is Requirements Management?</a></li>
  <li><a href="#Problem Analysis">Problem analysis</a></li>
  <li><a href="#Understanding Stakeholder Needs">Understanding stakeholder needs</a></li>
  <li><a href="#Defining the System">Defining the system</a></li>
  <li><a href="#Managing the Scope of the Project">Managing the scope of the project</a></li>
  <li><a href="#Refining the System Definition">Refining the system definition</a></li>
  <li><a href="#Managing Changing Requirements">Managing changing requirements</a></li>
  <li><a href="#MoreInfo">More Information</a></li>
</ul>

<h3><a name="What is Requirements Management">What is Requirements Management?</a>
<a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Requirements management is a systematic approach to finding, documenting,
organizing and tracking the changing requirements of a system.</p>
<p>We define a <a href="co_req.htm">requirement</a> as:</p>
<blockquote>
  <blockquote>
    <p>A condition or capability to which the system must conform.</p>
  </blockquote>
</blockquote>
<p>Our formal definition of requirements management is that it is a systematic
approach to
<ul>
  <li>eliciting, organizing, and documenting the <a href="co_reqty.htm">requirements
    of the system</a>, and</li>
  <li>establishing and maintaining agreement between the customer and the
    project team on the changing requirements of the system.</li>
</ul>
<p>Keys to effective requirements management include maintaining a clear
statement of the <a href="co_req.htm">requirements</a>, along with applicable <a href="../../artifact/ar_rattr.htm">attributes</a>
for each <a href="co_reqty.htm">requirement type</a> and <a href="co_trace.htm">traceability</a>
to other requirements and other project artifacts.</p>
<p>Collecting requirements may sound like a rather straightforward task. In real
projects, however, you will run into difficulties because:
<ul>
  <li>Requirements are not always obvious, and can come from many sources.</li>
  <li>Requirements are not always easy to express clearly in words.</li>
  <li>There are many different types of requirements at different levels of
    detail.</li>
  <li>The number of requirements can become unmanageable if not controlled.</li>
  <li>Requirements are related to one another and also to other deliverables of
    the software engineering process.</li>
  <li>Requirements have unique properties or property values. For example, they
    are neither equally important nor equally easy to meet.</li>
  <li>There are many interested parties, which means requirements need to be
    managed by cross-functional groups of people.</li>
  <li>Requirements change.</li>
</ul>
<p>So, what skills do you need to develop in your organization to help you
manage these difficulties? We have learned that the following skills are
important to master:
<ul>
  <li><a href="#Problem Analysis">Problem analysis</a></li>
  <li><a href="#Understanding Stakeholder Needs">Understanding stakeholder needs</a></li>
  <li><a href="#Defining the System">Defining the system</a></li>
  <li><a href="#Managing the Scope of the Project">Managing scope of the project</a></li>
  <li><a href="#Refining the System Definition">Refining the system definition</a></li>
  <li><a href="#Managing Changing Requirements">Managing changing requirements</a></li>
</ul>
<h3><a name="Problem Analysis">Problem Analysis</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Problem analysis is done to understand problems, initial stakeholder needs,
and propose high-level solutions. It is an act of reasoning and analysis to find
&quot;the problem behind the problem&quot;. During problem analysis, agreement
is gained on the real problem(s), and who the stakeholders are. Also, you define
what from a business perspective are the boundaries of the solution, as well as
business constraints on the solution. You should also have analyzed the business
case for the project so that there is a good understanding of what return is
expected on the investment made in the system being built.</p>
<p>See also <a href="wfs_anpr.htm">Workflow Detail: Analyze the Problem</a>.</p>
<h3><a name="Understanding Stakeholder Needs">Understanding Stakeholder Needs</a>
<a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Requirements come from many sources, examples would be customers, partners,
end users, and domain experts. You need to know how to best determine what the
sources should be, get access to those sources, and also how to best elicit
information from them. The individuals who provide the primary sources for this
information are referred to as stakeholders in the project. If you’re
developing an information system to be used internally within your company, you
may include people with end user experience and business domain expertise in
your development team. Very often you will start the discussions at a business
model level rather than a system level. If you’re developing a product to be
sold to a market place, you may make extensive use of your marketing people to
better understand the needs of customers in that market.</p>
<p>Elicitation activities may occur using techniques such as interviews,
brainstorming, conceptual prototyping, questionnaires, and competitive analysis.
The result of the elicitation would be a list of requests or needs that are
described textually and graphically, and that have been given priority relative
one another.</p>
<p>See also <a href="wfs_unsh.htm">Workflow Detail: Understand Stakeholder Needs</a>.</p>
<h3><a name="Defining the System">Defining the System</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To define the system means to translate and organize the understanding of
stakeholder needs into a meaningful description of the system to be built. Early
in system definition, decisions are made on what constitutes a requirement,
documentation format, language formality, degree of requirements specificity
(how many and in what detail), request priority and estimated effort (two very
different valuations usually assigned by different people in separate
exercises), technical and management risks, and initial scope. Part of this
activity may include early prototypes and design models directly related to the
most important stakeholder requests. The outcome of system definition is a
description of the system that is both natural language and graphical.</p>
<p>See also <a href="wfs_defs.htm">Workflow Detail: Define the System</a>.</p>
<h3><a name="Managing the Scope of the Project">Managing the Scope of the
Project</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To efficiently run a project, you need to carefully prioritize the
requirements, based on input from all stakeholders, and manage its scope. Too
many projects suffer from developers working on so called &quot;Easter
eggs&quot; (features the developer finds interesting and challenging), rather
than early focusing on tasks that mitigate a risk in the project or stabilize
the architecture of the application. To make sure that you resolve or mitigate
risks in a project as early as possible, you should develop your system
incrementally, carefully choosing requirements to for each increment that
mitigates known risks in the project. To do so, you need to negotiate the scope
(of each iteration) with the stakeholders of the project. This typically
requires good skills in managing expectations of the output from the project in
its different phases. You also need to have control of the sources of
requirements, of how the deliverables of the project look, as well as the
development process itself.</p>
<p>See also <a href="wfs_sco.htm">Workflow Detail: Manage the Scope of the
System</a>.</p>
<h3><a name="Refining the System Definition">Refining the System Definition</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The detailed definition of the system needs to be presented in such a way
that your stakeholders can understand, agree to, and sign off on them. It needs
to cover not only functionality, but also compliance with any legal or
regulatory requirements, usability, reliability, performance, supportability,
and maintainability. An error often committed is to believe that what you feel
is complex to build needs to have a complex definition. This leads to
difficulties in explaining the purpose of the project and the system. People may
be impressed, but they will not give good input since they don’t understand.
You should put lots effort in understanding the audience for the documents you
are producing to describe the system. You may often see a need to produce
different kinds of description for different audiences.</p>
<p>We have seen that the use-case methodology, often in combination with simple
visual prototypes, is a very efficient way of communicating the purpose of the
system and defining the details of the system. Use cases help put requirements
into a context, they tell a story of how the system will be used.</p>
<p>Another component of the detailed definition of the system is to state how
the system should be tested. Test plans and definitions of what tests to perform
tells us what system capabilities will be verified.</p>
<p>See also <a href="wfs_refs.htm">Workflow Detail: Refine the System Definition</a>.</p>
<h3><a name="Managing Changing Requirements">Managing Changing Requirements</a> <a href="#Top"><img src="../../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>No matter how careful you are about defining your requirements, there will
always be things that change. What makes changing requirements complex to manage
is not only that a changed requirement means that more or less time has to be
spent on implementing a particular new feature, but also that a change to one
requirement may have an impact on other requirements. You need to make sure that
you give your requirements a structure that is resilient to changes, and that
you use traceability links to represent dependencies between requirements and
other artifacts of the development lifecycle. Managing change include activities
like establishing a baseline, determining which dependencies are important to
trace, establishing traceability between related items, and change control.</p>
<p>See also <a href="wfs_mnch.htm">Workflow Detail: Manage Changing Requirements</a>.</p>

<h3><a name="MoreInfo">More Information</a></h3>
<p>More Information on this topic can be found at:</p>
<p><a href="co_req.htm">Concepts: Requirements</a><br>
<a href="co_reqty.htm">Concepts: Types of Requirements</a><br>
<a href="co_trace.htm">Concepts: Traceability</a><br>
<a href="../../../papers/apprmuc.htm">White Paper: Applying Requirements Management with Use Cases</a></p>
<br>
<br>


 

<p>
 <font face="Arial"><a href="../../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

