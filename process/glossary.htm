<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Glossary(Test) - Rational Unified Process</title>
</head>
<body text="#000000" bgcolor="#ffffff">
<font face="Arial, Helvetica, sans-serif">
<dl>
<dt>
<b><a name="A">							A					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="ABC">							ABC					</a><a name="XE_ABC__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#activity-based_costing">activity-based costing</a></i>			
</dd>
<dt>
<b><a name="ABM">							ABM					</a><a name="XE_ABM__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#activity-based_management">activity-based management</a></i>			
</dd>
<dt>
<b><a name="abstract">							abstract					</a><a name="XE_abstract__definition_in_glossary"></a></b>
</dt>
<dd>Of or relating to a subject in the abstract without practical 			purpose or intention. Not applied or practical; theoretical. Considered apart 			from concrete existence. Contrast: <i><a href="#concrete">concrete</a></i>. 			See: <i><a href="#abstract_class">abstract class</a>.</i>
</dd>
<dd>A concept or idea not associated with any specific instance. 			Synonym: <i><a href="#abstraction">abstraction</a></i>.</dd>
<dd>A summary of the main points of an argument or theory. 			Synonyms: <i>outline, synopsis</i>.</dd>
<dt>
<b><a name="abstract_class">							abstract class					</a><a name="XE_abstract_class__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A <i><a href="#class">class</a></i> that provides common behavior across 				a set of subclasses but is not itself designed to have instances. An abstract 				class represents a concept; classes derived from it represent implementations 				of the concept. See also: <i><a href="#base_class">base class</a></i>. 				Contrast: <i><a href="#concrete_class">concrete class</a></i>.</dd>
<dt>
<b><a name="abstraction">							abstraction					</a><a name="XE_abstraction__definition_in_glossary"></a></b>
</dt>
<dd>The creation of a <i><a href="#view">view</a></i> or 			<i><a href="#model">model</a></i> that suppresses unnecessary details 			to focus on a specific set of details of interest</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The essential characteristics of an entity that distinguish it from all 				other kinds of entities. An abstraction defines a boundary relative to 				the perspective of the viewer.</dd>
<dt>
<b><a name="acceptance">							acceptance					</a><a name="XE_acceptance__definition_in_glossary"></a></b>
</dt>
<dd>An action by which the customer accepts ownership of software 			products as a partial or complete performance of a contract.</dd>
<dt>
<b><a name="access_modifier">							access modifier					</a><a name="XE_access_modifier__definition_in_glossary"></a></b>
</dt>
<dd>A keyword that controls access to a class, method, or attribute. 			The access modifiers in Java are public, private, protected, and package, 			which is the default.</dd>
<dt>
<b><a name="accessor_methods">							accessor methods					</a><a name="XE_accessor_methods__definition_in_glossary"></a></b>
</dt>
<dd>Methods that an object provides to define the interface to its 			instance variables. The accessor method to return the value of an instance 			variable is called a get method or getter method, and the mutator method to 			assign a value to an instance variable is called a set method or setter method.</dd>
<dt>
<b><a name="ACL">							ACL					</a><a name="XE_ACL__definition_in_glossary"></a></b>
</dt>
<dd>Access control list.</dd>
<dt>
<b><a name="action">							action					</a><a name="XE_action__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The specification of an executable statement that forms an abstraction 				of a computational procedure. An action typically results in a change 				in the state of the system, and can be realized by sending a message 				to an object or modifying a link or a value of an attribute.</dd>
<dt>
<b><a name="action_sequence">							action sequence					</a><a name="XE_action_sequence__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				An expression that resolves to a sequence of actions.</dd>
<dt>
<b><a name="action_state">							action state					</a><a name="XE_action_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A state that represents the execution of an atomic action, typically 				the invocation of an <i><a href="#operation">operation</a></i>.</dd>
<dt>
<b><a name="activation">							activation					</a><a name="XE_activation__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The execution of an <i><a href="#action">action</a></i>.</dd>
<dt>
<b><a name="active_class">							active class					</a><a name="XE_active_class__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#class">class</a></i> 				representing a thread of control in the system.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A class whose instances are active objects. See: 				<i><a href="#active_object">active object</a></i>.</dd>
<dt>
<b><a name="active_object">							active object					</a><a name="XE_active_object__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				An <i><a href="#object">object</a></i> 				that owns a <i><a href="#thread">thread</a></i> 				and can initiate control activity. An instance of 				<i><a href="#active_class">active class</a></i>.</dd>
<dt>
<b><a name="active_server_page">							Active Server Page (ASP)					</a><a name="XE_Active_Server_Page__definition_in_glossary"></a></b>
</dt>
<dd>Active Server Page (Microsoft&reg;), a technology mechanism 			for providing dynamic behavior to web applications.</dd>
<dt>
<b><a name="activity">							activity					</a><a name="XE_activity__definition_in_glossary"></a></b>
</dt>
<dd>A unit of work a <i><a href="#role">role</a></i> 			may be asked to perform.</dd>
<dt>
<b><a name="activity-based_costing">							Activity-Based Costing (ABC)					</a><a name="XE_Activity-Based_Costing_(ABC)__definition_in_glossary"></a></b>
</dt>
<dd>A methodology that measures the cost and performance 			of activities, resources, and cost objects. Resources are assigned to activities, 			then activities are assigned to cost objects based on their use. Activity based 			costing recognizes the causal relationships of cost drivers to activities.</dd>
<dt>
<b><a name="activity-based_management">							Activity-Based Management (ABM)					</a><a name="XE_activity-based_management_(ABM)__definition_in_glossary"></a></b>
</dt>
<dd>The broad discipline that focuses on achieving customer value 				and company profit by way of the management of activities. It draws on 				<i><a href="#activity-based_costing">activity-based costing</a></i> 				as a major source of information.</dd>
<dt>
<b><a name="activity_graph">							activity graph					</a><a name="XE_activity_graph__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A special case of a <i><a href="#state_machine">state machine</a></i> 				that is used to model processes involving one or more 				<i><a href="#classifier">classifiers</a></i>. 				Contrast: <i><a href="#statechart_diagram">statechart diagram</a>				</i>. Synonym: <i>activity diagram</i>.</dd>
<dt>
<b><a name="actor_class">							actor (class)					</a><a name="XE_actor__class__definition_in_glossary"></a></b>
</dt>
<dd>Defines a set of actor instances, in which each actor instance 			plays the same role in relation to the system.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A coherent set of roles that users of use cases play when interacting 				with these use cases. An actor has one role for each 				<i><a href="#use-case_(class)">use case</a></i> with which it communicates.</dd>
<dt>
<b><a name="actor_instance">							actor (instance)					</a><a name="XE_actor__instance__definition_in_glossary"></a></b>
</dt>
<dd>Someone or something, outside the system that interacts with the system.</dd>
<dt>
<b><a name="actor-generalization">							actor generalization					</a><a name="XE_actor__generalization__definition_in_glossary"></a></b>
</dt>
<dd>An actor generalization from an actor class (descendant) 			to another actor class (ancestor) indicates that the descendant inherits 			the role the ancestor can play in a use case.</dd>
<dt>
<b><a name="actual_parameter">							actual parameter					</a><a name="XE_actual_parameter__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				Synonym: <i><a href="#argument">argument</a></i>.</dd>
<dt>
<b><a name="advanced_program-to-program_communication">							Advanced Program-to-Program Communication (APPC)					</a><a name="XE_Advanced_Program-to-Program_Communication_(APPC)__definition_in_glossary"></a></b>
</dt>
<dd>A communication protocol used primarily in IBM environments.</dd>
<dt>
<b><a name="aggregate_(class)">							aggregate (class)					</a><a name="XE_aggregate__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A class that represents the "whole" in an aggregation (whole-part) relationship.				See: <i><a href="#aggregation">aggregation</a>.</i>			
</dd>
<dt>
<b><a name="aggregation">							aggregation					</a><a name="XE_aggregation__definition_in_glossary"></a></b>
</dt>
<dd>An association that models a whole-part relationship 			between an aggregate (the whole) and its parts.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A special form of association that specifies a whole-part 				relationship between the aggregate (whole) and a component part. 				See: <i><a href="#composition">composition</a></i>.</dd>
<dt>
<b><a name="american_standard_code_for_information_interchange">							American Standard Code for Information Interchange (ASCII)					</a><a name="XE_American_Standard_Code_for_Information_Interchange_(ASCII)__definition_in_glossary"></a></b>
</dt>
<dd>American standard code for information interchange. 			The 8-bit character encoding scheme used by most PCs and UNIX systems. 			It supersedes an earlier 7-bit ASCII standard.</dd>
<dt>
<b><a name="analysis">							analysis					</a><a name="XE_analysis__definition_in_glossary"></a></b>
</dt>
<dd>The part of the software development process whose 			primary purpose is to formulate a model of the problem 			<i><a href="#domain">domain</a></i>. Analysis focuses on what to do; 			design focuses on how to do it. See: <i><a href="#design">design</a></i>.</dd>
<dt>
<b><a name="analysis_&_design">							analysis &amp; design					</a><a name="XE_analysis_&_design_discipline__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#discipline">discipline</a></i> in 			the Unified Process, whose purpose is to show how the system's 			<i><a href="#use-case_(class)">use case</a></i>s will be realized 			in implementation; (general) activities during which strategic and 			tactical decisions are made to meet the required functional and quality 			<i><a href="#requirements">requirements</a></i> of a system. 			See also: <i><a href="#design_model">Design Model</a></i>.</dd>
<dt>
<b><a name="analysis_class">							analysis class					</a><a name="XE_analysis_class__definition_in_glossary"></a></b>
</dt>
<dd>An abstraction of a <i><a href="#role">role</a></i> 			played by a design element in the system, typically within the 			context of a <i><a href="#use-case_realization">use-case realization</a></i>. 			Analysis classes may provide an abstraction for several roles, 			representing the common behavior of those roles. Analysis classes 			typically evolve into one or more design elements; for example, 			design <i><a href="#class">class</a></i>es and/or 			<i><a href="#capsule">capsule</a></i>s, or 			design <i><a href="#subsystem">subsystem</a></i>s.</dd>
<dt>
<b><a name="analysis_mechanism">							analysis mechanism					</a><a name="XE_analysis_mechanisms__definition_in_glossary"></a></b>
</dt>
<dd>An architectural mechanism used early in the 			<i><a href="#design">design</a></i> process, during the period of 			discovery when key <i><a href="#class">classes</a></i> and 			<i><a href="#subsystem">subsystems</a></i> are being identified. 			Typically analysis mechanisms capture the key aspects of a solution 			in a way that is implementation independent. Analysis mechanisms are 			usually unrelated to the problem domain, but instead are "computer science" 			concepts. They provide specific behaviors to a domain-related 			<i><a href="#class">class</a></i> or <i><a href="#component">component</a></i>, 			or correspond to the implementation of cooperation between classes 			and/or components. They may be implemented as a <i><a href="#framework">framework</a></i>. 			Examples include mechanisms to handle persistence, inter-process 			communication, error or fault handling, notification, and messaging, 			to name a few.</dd>
<dt>
<b><a name="analysis_model">							analysis model					</a><a name="XE_analysis_model__definition_in_glossary"></a></b>
</dt>
<dd>An <i><a href="#object_model">object model</a></i> describing the realization of <i>			<a href="#use-case_(class)">use cases</a></i>; serves as an abstraction of the <i>			<a href="#design_model">design model</a></i>.</dd>
<dt>
<b><a name="analysis_pattern">							analysis pattern					</a><a name="XE_analysis_pattern__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#FOW97a"><i>FOW97a</i></a>] 			speaks of analysis patterns as, 			<blockquote>"[...] groups of concepts that represent a common construction 			in business modeling. It may be relevant to only one domain, or it may 			span many domains."</blockquote>			Therefore, in this reference, the vocabulary of the domain does intrude 			into the description of the pattern. There is no reason why the definition 			in [<a href="referenc.htm#FOW97a"><i>FOW97a</i></a>] should not be 			extended to domains other than business modeling. Another aspect of an 			analysis pattern is that it is an abstract, conceptual template, intended 			(through binding as with any pattern) for instantiation in an analysis model, 			which will then need further refinement through design. The scale of an 			analysis pattern can vary widely, though those presented in 			[<a href="referenc.htm#FOW97a"><i>FOW97a</i></a>] are medium in scale, 			and would compose to form analysis models for entire applications.</dd>
<dt>
<b><a name="analysis_time">							analysis time					</a><a name="XE_analysis_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML"><img height="16" width="13" src="images/uml.gif" border="0"></a>				Refers to something that occurs during an analysis phase of the 				software development process. See: <i><a href="#design_time">design time</a>, 				<a href="#modeling_time">modeling time</a>.</i>			
</dd>
<dt>
<b><a name="analyst">							analyst					</a><a name="XE_analyst__definition_in_glossary"></a></b>
</dt>
<dd>Member of the project team who is responsible for 			eliciting and interpreting the stakeholder needs, and communicating 			those needs to the entire team.</dd>
<dt>
<b><a name="API">							API					</a><a name="XE_API__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#application_programming_interface">			application programming interface</a></i>
</dd>
<dt>
<b><a name="APPC">							APPC					</a><a name="XE_APPC__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#advanced_program-to-program_communication">			advanced program-to-program communication</a></i>
</dd>
<dt>
<b><a name="applet">							applet					</a><a name="XE_applet__definition_in_glossary"></a></b>
</dt>
<dd>A Java program designed to run within a Web browser. 			Contrast: <i><a href="#application">application</a></i>.</dd>
<dt>
<b><a name="application">							application					</a><a name="XE_application__definition_in_glossary"></a></b>
</dt>
<dd>An act of putting to use (new techniques): an act of applying techniques.</dd>
<dd>Function and industry-relevant software that is determined 			by a particular business (for example, banking, aerospace, stock brokerage, 			insurance, accounting, inventory).</dd>
<dd>In Java programming, a self-contained, stand-alone Java program 			that includes main() method. Contrast: <i><a href="#applet">applet</a></i>.</dd>
<dt>
<b><a name="application_programming_interface">							Application Programming Interface (API)					</a><a name="XE_Application_Programming_Interface_(API)__definition_in_glossary"></a></b>
</dt>
<dd>A software interface that enables applications to 			communicate with each other. An API is the set of programming language 			constructs or statements that can be coded in an application program to 			obtain the specific functions and services provided by an underlying 			operating system or service program.</dd>
<dt>
<b><a name="architectural_baseline">							architectural baseline					</a><a name="XE_architectural_baseline__definition_in_glossary"></a></b>
</dt>
<dd>The <i><a href="#baseline">baseline</a></i> at the end of the 				<i><a href="#elaboration">Elaboration</a></i> phase, at which time 				the foundation structure and behavior of the system is stabilized.</dd>
<dt>
<b><a name="architectural_mechanism">							architectural mechanism					</a><a name="XE_architectural_mechanism__definition_in_glossary"></a></b>
</dt>
<dd>Architectural mechanisms represent common concrete 			solutions to frequently encountered problems. They may be patterns of 			structure, patterns of behavior, or both. In the Rational Unified Process 			(RUP), architectural mechanism is used as an umbrella term for analysis 			mechanism, design mechanism, and implementation mechanism.</dd>
<dt>
<b><a name="architectural_pattern">							architectural pattern					</a><a name="XE_architectural_pattern__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#BUS96"><i>BUS96</i></a>] 			defines an architectural pattern as: 			<blockquote>"An architectural pattern expresses a fundamental 			structural organization schema for software systems. It provides a set 			of predefined subsystems, specifies their responsibilities, and includes 			rules and guidelines for organizing the relationships between them."</blockquote>			This is the interpretation we use in the RUP. To elaborate a little: 			an architectural pattern is a pattern (that is, a solution template) at a 			particular scale, and is a template for concrete software architectures. 			It deals in system-wide properties and, typically, subsystem-scale 			(not class level) relationships. Architectural patterns seem, by their nature, 			not to be application domain dependent?the vocabulary of a particular 			domain seems not to intrude into the description of the pattern?although 			there is no reason in principle why architectural patterns cannot become 			specialized in this way. Compare with analysis pattern. The Software 			Architecture Document will present the architectural patterns used in the system.</dd>
<dt>
<b><a name="architectural_view">							architectural view					</a><a name="XE_architectural_view__definition_in_glossary"></a></b>
</dt>
<dd>A view of the system <i><a href="#architecture">architecture</a></i> 				from a given perspective; focuses primarily on structure, modularity, 				essential components, and the main control flows.</dd>
<dt>
<b><a name="architecture">							architecture					</a><a name="XE_architecture__definition_in_glossary"></a></b>
</dt>
<dd>The highest level concept of a system in its environment, 			according to <i><a href="#IEEE">IEEE</a></i>. The architecture of a 			software system (at a given point in time) is its organization or structure 			of significant <i><a href="#component">components</a></i> interacting through 			<i><a href="#interface">interface</a></i>s, those components being composed 			of successively smaller components and interfaces.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The organizational structure of a system. An architecture can be 				recursively decomposed into parts that interact through interfaces, 				relationships that connect parts, and constraints for assembling parts. 				Parts that interact through interfaces include <i><a href="#class">classes</a></i>, 				<i><a href="#component">components</a></i>				and <i><a href="#subsystem">subsystems</a></i>.</dd>
<dt>
<b><a name="architecture_executable">							architecture, executable					</a><a name="XE_architecture__executable__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#executable_architecture">executable architecture</a></i>.</dd>
<dt>
<b><a name="argument">							argument					</a><a name="XE_argument__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A binding for a parameter that resolves to a run-time instance. Synonym: 				<i><a href="#actual_parameter">actual parameter</a></i>. Contrast: 				<i><a href="#parameter">parameter</a></i>.</dd>
<dd>A data element, or value, included as a parameter 			in a method call. Arguments provide additional information that 			the called method can use to perform the requested operation.</dd>
<dt>
<b><a name="artifact">							artifact					</a><a name="XE_artifact__definition_in_glossary"></a></b>
</dt>
<dd>(1) A piece of information that: 			1) is produced, modified, or used by a process,			  2) defines an area of responsibility, and			  3) is subject to version control. An artifact can be a 			  <i><a href="#model">model</a></i>, a <i><a href="#model_element">model element</a></i>, or a 			  <i><a href="#document">document</a></i>. A document can enclose other documents.			</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A physical piece of information that is used or produced by a 				software development process. Examples of Artifacts include models, 				source files, scripts, and binary executable files. An artifact may 				constitute the implementation of a deployable component. Synonym: 				<i><a href="#product">product</a></i>. Contrast: 				<i><a href="#component">component</a></i>.</dd>
<dt>
<b><a name="artifact_guidelines">							artifact guidelines					</a><a name="XE_artifact_guidelines__definition_in_glossary"></a></b>
</dt>
<dd>A description of how to work with a particular 			<i><a href="#artifact">artifact</a></i>, including how to create and 			revise the artifact.</dd>
<dt>
<b><a name="artifact_set">							artifact set					</a><a name="XE_artifact_set__definition_in_glossary"></a></b>
</dt>
<dd>A set of related artifacts which help to present 			one aspect of the system. Artifact sets cut across 			<i><a href="#discipline">disciplines</a></i>, as several artifacts 			are used in a number of disciplines; for example, the <i>Risk List</i>, 			the <i>Software Architecture Document</i>, and the <i>Iteration Plan</i>.</dd>
<dt>
<b><a name="ASCII">							ASCII					</a><a name="XE_ASCII__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#american_standard_code_for_information_interchange">					american standard code for information interchange</a></i>			
</dd>
<dt>
<b><a name="ASP">							ASP					</a><a name="XE_ASP__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#active_server_page">active server page</a></i>
</dd>
<dt>
<b><a name="assertion">							assertion					</a><a name="XE_assertion__definition_in_glossary"></a></b>
</dt>
<dd>A logical expression specifying a program state that 			must exist or a set of conditions that program variables must satisfy 			at a particular point during program execution.</dd>
<dt>
<b><a name="association">							association					</a><a name="XE_association__definition_in_glossary"></a></b>
</dt>
<dd>A relationship that models a bi-directional semantic connection 			among instances.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The semantic relationship between two or more classifiers that 				specifies connections among their instances.</dd>
<dt>
<b><a name="association_class">							association class					</a><a name="XE_association_class__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A model element that has both <i><a href="#association">association</a></i> 				and <i><a href="#class">class</a></i> properties. An association class can 				be seen as an association that also has class properties, or as a class 				that also has association properties.</dd>
<dt>
<b><a name="association_end">							association end					</a><a name="XE_association_end__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The endpoint of an association, which connects the association 				to a <i><a href="#classifier">classifier</a></i>.</dd>
<dt>
<b><a name="asynchronous_action">							asynchronous action					</a><a name="XE_asynchronous_action__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A request where the sending object does not pause to wait for results. 				Contrast: <i><a href="#synchronous_action">synchronous action</a></i>.</dd>
<dt>
<b><a name="attack">							attack					</a><a name="XE_attack__definition_in_glossary"></a></b>
</dt>
<dd>A planned and methodical attempt to break or otherwise 			circumvent the normal operation of a running computer software program. 			Often malicious in nature, the concept of attacking computer software 			originated in the software hacker (A.K.A cracker) community whose members 			use various techniques to attack software systems, typically to circumvent 			security software and gain illegal entry to a host system. Examples of 			recognized attack techniques include buffer overflow, denial of service, 			resource constraint and Trojan horse. This term has subsequently been adopted 			by computer software testing professionals in discussing the methods by 			which they might expose potential bugs in a software system.</dd>
<dt>
<b><a name="attribute">							attribute					</a><a name="XE_attribute__definition_in_glossary"></a></b>
</dt>
<dd>An attribute defined by a <i><a href="#class">class</a></i> 			represents a named property of the class or its objects. An attribute has a 			<i><a href="#type">type</a></i> that defines the type of its instances.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A feature within a classifier that describes a range of values that 				instances of the classifier may hold.</dd>
<dt>
<b><a name="B">							B					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="base_class">							base class					</a><a name="XE_base_class__definition_in_glossary"></a></b>
</dt>
<dd>A class from which other classes or beans are derived. 			A base class may itself be derived from another base class. 			See: <a href="#abstract_class">abstract class</a>.</dd>
<dt>
<b><a name="baseline">							baseline					</a><a name="XE_baseline__definition_in_glossary"></a></b>
</dt>
<dd>A reviewed and approved release of <i>					<a href="#artifact">artifacts</a>				</i> that constitutes an agreed basis for further evolution or development and that can be changed only through a formal procedure, such as <i>					<a href="#change_management">change management</a>				</i> and <i>					<a href="#configuration_management">configuration control</a>				</i>.</dd>
<dt>
<b><a name="basic">							BASIC					</a><a name="XE_BASIC__definition_in_glossary"></a></b>
</dt>
<dd>Beginner's all-purpose symbolic instruction code<i>,</i> a programming language. See: <a href="#VB">					<i>VB</i>				</a>.</dd>
<dt>
<b><a name="bean">							bean					</a><a name="XE_Bean__definition_in_glossary"></a></b>
</dt>
<dd>A small component that can be used to build applications. See: <a href="#JavaBean">					<i>JavaBean</i>				</a>.</dd>
<dt>
<b><a name="beaninfo">							beaninfo					</a><a name="XE_BeanInfo__definition_in_glossary"></a></b>
</dt>
<dd>A companion class for a bean that defines a set of methods that can be accessed to retrieve information on the bean's properties, events, and methods.</dd>
<dt>
<b><a name="behavior">							behavior					</a><a name="XE_behavior__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The observable effects of an operation or event, including its results.</dd>
<dt>
<b><a name="behavioral_feature">							behavioral feature					</a><a name="XE_behavioral_feature__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A dynamic feature of a <i>					<a href="#model_element">model element</a>				</i>, such as an <i>					<a href="#operation">operation</a>				</i> or <i>					<a href="#method">method</a>				</i>.</dd>
<dt>
<b><a name="behavioral_model_aspect">							behavioral model aspect					</a><a name="XE_behavioral_model_aspect__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#model_aspect">model aspect</a>				</i> that emphasizes the behavior of the <i>					<a href="#instance">instances</a>				</i> in a system, including their <i>					<a href="#method">methods</a>				</i>, <i>					<a href="#collaboration">collaborations</a>				</i>, and <i>					<a href="#state">state</a>				</i> histories.</dd>
<dt>
<b><a name="beta_testing">							beta testing					</a><a name="XE_beta_testing__definition_in_glossary"></a></b>
</dt>
<dd>Pre-release testing in which a sampling of the intended customer base tries out the product.</dd>
<dt>
<b><a name="binary_association">							binary association					</a><a name="XE_binary_association__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An association between two <i>					<a href="#class">classes</a>				</i>. A special case of an <i>					<a href="#n-ary_association">n-ary association</a>				</i>.</dd>
<dt>
<b><a name="binding">							binding					</a><a name="XE_binding__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The creation of a <i>					<a href="#model_element">model element</a>				</i> from a <i>					<a href="#template">template</a>				</i> by supplying arguments for the parameters of the template.</dd>
<dt>
<b><a name="boolean">							boolean					</a><a name="XE_boolean__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An enumeration whose values are true and false.</dd>
<dt>
<b><a name="boolean_expression">							boolean expression					</a><a name="XE_boolean_expression__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An expression that evaluates to a <i>					<a href="#boolean">boolean</a>				</i> value.</dd>
<dt>
<b><a name="boundary_class">							boundary class					</a><a name="XE_boundary_class__definition_in_glossary"></a></b>
</dt>
<dd>A class used to model communication between the system's environments and its inner workings.</dd>
<dt>
<b><a name="break_point">							break point					</a><a name="XE_break_point__definition_in_glossary"></a></b>
</dt>
<dd>A point in a computer program where the execution will be halted.</dd>
<dt>
<b><a name="build">							build					</a><a name="XE_build__definition_in_glossary"></a></b>
</dt>
<dd>An operational version of a system or part of a system that demonstrates a subset of the capabilities to be provided in the final product.</dd>
<dt>
<b><a name="business_actor_class">							business actor (class)					</a><a name="XE_business_actor_class__definition_in_glossary"></a></b>
</dt>
<dd>Defines a set of business-actor instances, in which each business-actor 			instance plays the same role in relation to the business.</dd>
<dt>
<b><a name="business_actor_(instance)">							business actor (instance)					</a><a name="XE_business_actor__instance__definition_in_glossary"></a></b>
</dt>
<dd>Someone or something, outside the business that interacts with the business.</dd>
<dt>
<b><a name="business_analysis_model">							business analysis model					</a><a name="XE_business_analysis_model__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#object_model">object model</a>				</i> describing the realization of <i>					<a href="#business_use-case_(class)">business use cases</a>				</i>. Synonym: <i>business object model</i>.</dd>
<dt>
<b><a name="business_architecture">							business architecture					</a><a name="XE_business_architecture__definition_in_glossary"></a></b>
</dt>
<dd>Business architecture is an organized set of elements with clear relationships to one another, which together form a whole defined by its functionality. The elements represent the organizational and behavioral structure of a business, and show abstractions of the key processes and structures of the business.</dd>
<dt>
<b><a name="business_creation">							business creation					</a><a name="XE_business_creation__definition_in_glossary"></a></b>
</dt>
<dd>To perform <a href="#business_engineering">					<i>business engineering</i>				</a> where the goal is to create a new <a href="#business_process">					<i>business process</i>				</a>, a new line of business or a new organization.</dd>
<dt>
<b><a name="business_engineering">							business engineering					</a><a name="XE_business_engineering__definition_in_glossary"></a></b>
</dt>
<dd>A set of techniques a company uses to design its business according to specific goals. Business engineering techniques can be used for both <i>					<a href="#business_reengineering">business reengineering</a>				</i>, <a href="#business_improvement">					<i>business improvement</i>				</a>, and <a href="#business_creation">					<i>business creation</i>				</a>. ;</dd>
<dt>
<b><a name="business_entity">							business entity					</a><a name="XE_business_entity__definition_in_glossary"></a></b>
</dt>
<dd>A business entity represents a significant and persistent piece of information that is manipulated by <a href="#business_actor_class">					<i>business actors</i>				</a> and <a href="#business_worker">					<i>business workers</i>				</a>.</dd>
<dt>
<b><a name="business_event">							business event					</a><a name="XE_business_event__definition_in_glossary"></a></b>
</dt>
<dd>A business event describes a significant occurrence in space and time, of importance to the business. Business events are used to signal between business processes and are usually associated with <a href="#business_entity">					<i>business entities</i>				</a>.</dd>
<dt>
<b><a name="business_goal">							business goal					</a><a name="XE_business_goal__definition_in_glossary"></a></b>
</dt>
<dd>A business goal is a requirement that must be satisfied by the business. ; Business goals describe the desired value of a particular measure at some future point in time and can therefore be used to plan and manage the activities of the business. Also see <i>					<a href="#business_objective">business objective</a>				</i>.</dd>
<dt>
<b><a name="business_improvement">							business improvement					</a><a name="XE_business_improvement__definition_in_glossary"></a></b>
</dt>
<dd>To perform <i>					<a href="#business_engineering">business engineering</a>				</i> where the work of change is local and does not span the entire business. It involves trimming costs and lead times and monitoring service and quality.</dd>
<dt>
<b><a name="business_modeling">							business modeling					</a><a name="XE_business_modeling__definition_in_glossary"></a></b>
</dt>
<dd>Encompasses all modeling techniques you can use to visually model a business. These are a subset of the techniques you may use to perform <i>					<a href="#business_engineering">business engineering</a>				</i>.</dd>
<dt>
<b><a name="business_objective">							business objective					</a><a name="XE_business_objective__definition_in_glossary"></a></b>
</dt>
<dd>The commonly-used term for high-level <a href="#business_goal">					<i>business goals</i>				</a>. Because business objectives are usually abstract, they are difficult to measure and are therefore translated into more measurable lower-level business goals.</dd>
<dt>
<b><a name="business_process">							business process					</a><a name="XE_business_process__definition_in_glossary"></a></b>
</dt>
<dd>A group of logically related activities that use the resources of the organization to provide defined results in support of the organization's objectives. In the RUP, we define business processes using <i>					<a href="#business_use-case_(class)">business use cases</a>				</i>, which show the expected behavior of the business, and <i>					<a href="#business_use-case_realization">business use-case realizations</a>				</i>, which show how that behavior is realized by <i>					<a href="#business_worker">business workers</a>				</i> and <a href="#business_entity">					<i>business entities</i>				</a>. See also: <i>					<a href="#process">process</a>				</i>.</dd>
<dt>
<b><a name="business_process_engineering">							business process engineering					</a><a name="XE_business_process_engineering__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#business_reengineering">					<i>business engineering</i>				</a>.</dd>
<dt>
<b><a name="business_reengineering">							business reengineering					</a><a name="XE_business_reengineering__definition_in_glossary"></a></b>
</dt>
<dd>To perform <i>					<a href="#business_engineering">business engineering</a>				</i> where the work of change includes taking a comprehensive view of the entire existing business and think through why you do what you do. You question all existing business processes and try to find completely new ways of reconstructing them to achieve radical improvements. Other names for this are business process reengineering (BPR) and process innovation.</dd>
<dt>
<b><a name="business_rule">							business rule					</a><a name="XE_business_rule__definition_in_glossary"></a></b>
</dt>
<dd>A declaration of policy or condition that must be satisfied within the business. Business rules can be captured in models, in documents or in both.</dd>
<dt>
<b><a name="business_strategy">							business strategy					</a><a name="XE_business_strategy__definition_in_glossary"></a></b>
</dt>
<dd>The business strategy defines the principles and goals for realizing the business idea. It consists of a collection of long-term <a href="#business_objective">					<i>business objectives</i>				</a> that will ultimately result in the achievement of the business vision.</dd>
<dt>
<b><a name="business_system">							business system					</a><a name="XE_business_system__definition_in_glossary"></a></b>
</dt>
<dd>A business system encapsulates a set of roles and resources that together fulfill a specific purpose, and defines a set of responsibilities with which that purpose can be achieved.</dd>
<dt>
<b><a name="business_use-case_(class)">							business use-case (class)					</a><a name="XE_business_use-case__class__definition_in_glossary"></a></b>
</dt>
<dd>A business use case defines a set of 			<i><a href="#business_use-case_instance">business use-case instances</a></i>, 			where each instance is a sequence of actions a business performs that yields 			an observable result of value to a particular business actor. A business use-case 			class contains all main, alternate workflows related to producing the 			"observable result of value".</dd>
<dt>
<b><a name="business_use-case_instance">							business use-case (instance)					</a><a name="XE_business_use-case__instance__definition_in_glossary"></a></b>
</dt>
<dd>A sequence of actions performed by a business that 			yields an observable result of value to a particular business actor.</dd>
<dt>
<b><a name="business_use-case_model">							business use-case model					</a><a name="XE_business_use-case__model__definition_in_glossary"></a></b>
</dt>
<dd>A model of the business intended functions. The business 			use-case model is used as an essential input to identify roles and 			deliverables in the organization.</dd>
<dt>
<b><a name="business_use-case_package">							business use-case package					</a><a name="XE_business_use-case__package__definition_in_glossary"></a></b>
</dt>
<dd>A business use-case package is a collection of business use cases, 			business actors, relationships, diagrams, and other packages; it is used to 			structure the business use-case model by dividing it into smaller parts.</dd>
<dt>
<b><a name="business_use-case_realization">							business use-case realization					</a><a name="XE_business_use-case__realization__definition_in_glossary"></a></b>
</dt>
<dd>A business use-case realization describes how the workflow of a 			particular business use case is realized within the 			<i><a href="#business_analysis_model">business analysis model</a></i>, 			in terms of collaborating business objects.</dd>
<dt>
<b><a name="business_worker">							business worker					</a><a name="XE_business_worker__definition_in_glossary"></a></b>
</dt>
<dd>A business worker represents a role or set of roles in the business. A business worker interacts with other business workers and manipulates <a href="#business_entity">					<i>business entities</i>				</a> while participating in <a href="#business_use-case_realization">					<i>business use-case realizations</i>				</a>.</dd>
<dt>
<b><a name="C">							C					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="call">							call					</a><a name="XE_call__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An <i>					<a href="#action_state">action state</a>				</i> that invokes an <i>					<a href="#operation">operation</a>				</i> on a <i>					<a href="#classifier">classifier</a>				</i>.</dd>
<dt>
<b><a name="call_level_interface_(CLI)">							call-level interface (CLI)					</a><a name="XE_call_level_interface_(CLI)__definition_in_glossary"></a></b>
</dt>
<dd>A callable API for database access, which is an alternative to an 			embedded SQL application program interface. In contrast to embedded SQL, CLI 			does not require precompiling or binding by the user, but instead provides 			a standard set of functions to process SQL statements and related services at 			run time.</dd>
<dt>
<b><a name="capsule">							capsule					</a><a name="XE_capsule__definition_in_glossary"></a></b>
</dt>
<dd>A specific <i>					<a href="#design_pattern">design pattern</a>				</i> which represents an encapsulated <i>					<a href="#thread">thread</a>				</i> of control in the system. A capsule is a <i>					<a href="#stereotype">stereotyped</a>				</i>				<i>					<a href="#class">class</a>				</i> with a specific set of required and restricted <i>					<a href="#association">associations</a>				</i> and <i>					<a href="#property">properties</a>				</i>.</dd>
<dt>
<b><a name="capsule_role">							capsule role					</a><a name="XE_capsule_role__definition_in_glossary"></a></b>
</dt>
<dd>Capsule roles represent a specification of the type of <i>					<a href="#capsule">capsule</a>				</i> that can occupy a particular position in a capsule's collaboration or structure. Capsule roles are strongly owned by the container capsule and cannot exist independently of it. A capsule's structural decomposition usually includes a network of collaborating capsule roles joined by connectors.</dd>
<dt>
<b><a name="cardinality">							cardinality					</a><a name="XE_cardinality__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The number of elements in a set. Contrast: <i>					<a href="#multiplicity">multiplicity</a>				</i>.</dd>
<dt>
<b><a name="CBD">							CBD					</a><a name="XE_CBD__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#component-based_development_(CBD)">					<i>component-based development</i>				</a>			
</dd>
<dt>
<b><a name="CCB">							CCB					</a><a name="XE_CCB__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#change_control_board_(CCB)">					<i>change control board</i>				</a>			
</dd>
<dt>
<b><a name="CDR">							CDR					</a><a name="XE_CDR__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#critical_design_review_(CDR)">					<i>critical design review</i>				</a>			
</dd>
<dt>
<b><a name="CGI">							CGI					</a><a name="XE_CGI__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Common_Gateway_Interface_(CGI)">					<i>common gateway interface</i>				</a>			
</dd>
<dt>
<b><a name="change_control_board_(CCB)">							change control board (CCB)					</a><a name="XE_change_control_board_(CCB)__definition_in_glossary"></a></b>
</dt>
<dd>The role of the CCB is to provide a central control mechanism to ensure that every <i>					<a href="#change_request_(CR)">change request</a>				</i> is properly considered, authorized and coordinated.</dd>
<dt>
<b><a name="change_management">							change management					</a><a name="XE_change_management__definition_in_glossary"></a></b>
</dt>
<dd>The activity of controlling and tracking changes to <i>					<a href="#artifact">artifacts</a>				</i>. See also: <a href="#scope_management">					<i>scope management</i>				</a>.</dd>
<dt>
<b><a name="change_request_(CR)">							Change Request (CR)					</a><a name="XE_Change_Request_(CR)__definition_in_glossary"></a></b>
</dt>
<dd>A general term for any request from a <i>					<a href="#stakeholder">stakeholder</a>				</i> to change an <i>					<a href="#artifact">artifact</a>				</i> or <i>					<a href="#process">process</a>				</i>. Documented in the Change Request is information on the origin and 				impact of the current problem, the proposed solution, and its cost. 				See also: <i><a href="#enhancement_request">enhancement request</a>, 				<a href="#defect">defect</a>.</i>			
</dd>
<dt>
<b><a name="checkpoints">							checkpoints					</a><a name="XE_checkpoints__definition_in_glossary"></a></b>
</dt>
<dd>A set of conditions that well-formed <i>					<a href="#artifact">artifacts</a>				</i> of a particular type should exhibit. May also be stated in the form of questions which should be answered in the affirmative.</dd>
<dt>
<b><a name="child">							child					</a><a name="XE_child__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> In a <i>					<a href="#generalization">generalization</a>				</i> relationship, the specialization of another element, the parent. See: <i>					<a href="#subclass">subclass</a>				</i>, <i>					<a href="#subtype">subtype</a>				</i>. Contrast: <i>					<a href="#parent">parent</a>				</i>.</dd>
<dt>
<b><a name="class">							class					</a><a name="XE_class__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A description of a set of objects that share the same <i>					<a href="#attribute">attributes</a>				</i>, <i>					<a href="#operation">operations</a>				</i>, <i>					<a href="#method">methods</a>				</i>, <i>					<a href="#relationship">relationships</a>				</i>, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. See: <i>					<a href="#interface">interface</a>				</i>.</dd>
<dt>
<b><a name="class_diagram">							class diagram					</a><a name="XE_class_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows a collection of declarative (static) <i>					<a href="#model_element">model elements</a>				</i>, such as <i>					<a href="#class">classes</a>				</i>, <i>					<a href="#type">types</a>				</i>, and their contents and <i>					<a href="#relationship">relationships</a>				</i>.</dd>
<dt>
<b><a name="class_hierarchy">							class hierarchy					</a><a name="XE_class_hierarchy__definition_in_glossary"></a></b>
</dt>
<dd>The relationships among classes that share a single inheritance. All Java classes inherit from the Object class.</dd>
<dt>
<b><a name="classifier">							classifier					</a><a name="XE_classifier__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A mechanism that describes behavioral and structural features. Classifiers include <i>					<a href="#interface">interfaces</a>				</i>, <i>					<a href="#class">classes</a>				</i>, <i>					<a href="#datatype">datatypes</a>				</i>, and <i>					<a href="#component">components</a>				</i>.</dd>
<dt>
<b><a name="class_library">							class library					</a><a name="XE_class_library__definition_in_glossary"></a></b>
</dt>
<dd>A collection of classes.</dd>
<dt>
<b><a name="class_method">							class method					</a><a name="XE_class_method__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#method">					<i>method</i>				</a>.</dd>
<dt>
<b><a name="CLI">							CLI					</a><a name="XE_CLI__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#call_level_interface_(CLI)">					<i>call-level interface</i>				</a>			
</dd>
<dt>
<b><a name="client">							client					</a><a name="XE_client__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A <i><a href="#classifier">classifier</a>				</i> that requests a service from another classifier. Contrast: 				<i><a href="#supplier">supplier</a>.</i>			
</dd>
<dt>
<b><a name="client_server">							client/server					</a><a name="XE_client/server__definition_in_glossary"></a></b>
</dt>
<dd>The model of interaction in distributed data processing where a 			program at one location sends a request to a program at another location and 			awaits a response. The requesting program is called a client, and the answering 			program is called a server.</dd>
<dt>
<b><a name="CM">							CM					</a><a name="XE_CM__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#configuration_management">					<i>configuration management</i>				</a>.</dd>
<dt>
<b><a name="COBOL">							COBOL					</a><a name="XE_COBOL__definition_in_glossary"></a></b>
</dt>
<dd>Common Business Oriented Language</dd>
<dt>
<b><a name="cohesion">							cohesion					</a><a name="XE_cohesion__definition_in_glossary"></a></b>
</dt>
<dd>The congenital union of <i>					<a href="#component">components</a>				</i> of the same kind that depend on one another. The act or state of sticking together; close union. Contrast: <i>					<a href="#coupling">coupling</a>				</i>			
</dd>
<dt>
<b><a name="collaboration">							collaboration					</a><a name="XE_collaboration__definition_in_glossary"></a></b>
</dt>
<dd>(1) Is a description of a collection of objects that interact to implement some behavior within a context. It describes a society of cooperating objects assembled to carry out some purpose.</dd>
<dd>(2) It captures a more holistic view of behavior in the exchange of messages within a network of objects.</dd>
<dd>(3) Collaborations show the unity of the three major structures underlying computation: data structure, control flow, and data flow.</dd>
<dd>(4) A collaboration has a static and a dynamic part. The static part describes the roles that objects and links play in an instantiation of the collaboration. The dynamic part consists of one or more dynamic interactions that show message flow over time in the collaboration to perform computations. A collaboration may have a set of <i>					<a href="#message">messages</a>				</i> to describe its dynamic behavior.</dd>
<dd>(5) A collaboration with messages is an interaction.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The specification of how an <i>					<a href="#operation">operation</a>				</i> or <i>					<a href="#classifier">classifier</a>				</i>, such as a <i>					<a href="#use-case_(class)">use case</a>				</i>, is realized by a set of classifiers and <i>					<a href="#association">associations</a>				</i> playing specific roles used in a specific way. The collaboration defines an interaction. See: <i>					<a href="#interaction">interaction</a>				</i>.</dd>
<dt>
<b><a name="collaboration_diagram">							collaboration diagram					</a><a name="XE_collaboration_diagram__definition_in_glossary"></a></b>
</dt>
<dd>(1) A collaboration diagram describes a pattern of interaction among objects; it shows the objects participating in the interaction by their links to each other and the <i>					<a href="#message">messages</a>				</i> they send to each other.</dd>
<dd>(2) It is a <i>					<a href="#class_diagram">class diagram</a>				</i> that contains <i>					<a href="#classifier">classifier</a>				</i> roles and <i>					<a href="#association">association</a>				</i> roles rather than just classifiers and associations.</dd>
<dd>(3) Collaboration diagrams and sequence diagrams both show interactions, but they emphasize different aspects. Sequence diagrams show time sequences clearly but do not show object relationships explicitly. Collaboration diagrams show object relationships clearly, but time sequences must be obtained from sequence numbers.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows interactions organized around the structure of a <i>					<a href="#model">model</a>				</i>, using either classifiers and associations or instances and links. Unlike a sequence diagram, a collaboration diagram shows the relationships among the instances. Sequence diagrams and collaboration diagrams express similar information, but show it in different ways. See: <i>					<a href="#sequence_diagram">sequence diagram</a>				</i>.</dd>
<dt>
<b><a name="column">							column					</a><a name="XE_column__definition_in_glossary"></a></b>
</dt>
<dd>An attribute of a table in a database.</dd>
<dt>
<b><a name="COM">							COM					</a><a name="XE_COM__definition_in_glossary"></a></b>
</dt>
<dd>Component object model (Microsoft). A software architecture from DEC and Microsoft, allowing interoperation between ObjectBroker and OLE (Object linking and embedding). Microsoft later evolved COM into <i>					<a href="#DCOM">DCOM</a>				</i>.</dd>
<dt>
<b><a name="comment">							comment					</a><a name="XE_comment__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An annotation attached to an element or a collection of elements. A note has no semantics. Contrast: <i>					<a href="#constraint">constraint</a>.</i>			
</dd>
<dt>
<b><a name="commit">							commit					</a><a name="XE_commit__definition_in_glossary"></a></b>
</dt>
<dd>The operation that ends a unit of work to make permanent the changes it has made to resources (transaction or data).</dd>
<dt>
<b><a name="Common_Gateway_Interface_(CGI)">							commongateway interface (CGI)					</a><a name="XE_Common_Gateway_Interface_(CGI)__definition_in_glossary"></a></b>
</dt>
<dd>A standard protocol through which a Web server can execute programs running on the server machine. CGI programs are executed in response to requests from Web client browsers.</dd>
<dt>
<b><a name="Common_Object_Request_Broker_Architecture_(CORBA)">							common object request broker architecture (CORBA)					</a><a name="XE_Common_Object_Request_Broker_Architecture_(CORBA)__definition_in_glossary"></a></b>
</dt>
<dd>A middleware specification which defines a software bus?the Object Request Broker (ORB)?that provides the infrastructure.</dd>
<dt>
<b><a name="communicates-association">							communicates-association					</a><a name="XE_communicates-association__definition_in_glossary"></a></b>
</dt>
<dd>An association between an <i><a href="#actor_class">actor class</a></i> 			and a <i><a href="#use-case_(class)">use case class</a></i>, indicating that their 			instances interact. The direction of the association indicates the initiator of the 			communication (Unified Process convention).</dd>
<dt>
<b><a name="communication_association">							communication association					</a><a name="XE_communication_association__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> In a deployment diagram an association between nodes that implies a communication. See: <i>					<a href="#deployment_diagram">deployment diagram</a>.</i>			
</dd>
<dt>
<b><a name="compile_time">							compile time					</a><a name="XE_compile_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Refers to something that occurs during the compilation of a software module. See: <i>					<a href="#modeling_time">modeling time</a>, <a href="#run_time">run time</a>				</i>.</dd>
<dt>
<b><a name="component">							component					</a><a name="XE_component__definition_in_glossary"></a></b>
</dt>
<dd>A non-trivial, nearly independent, and replaceable part of a system that fulfills a clear function in the context of a well-defined <i>					<a href="#architecture">architecture</a>				</i>. A component conforms to and provides the realization of a set of <i>					<a href="#interface">interfaces</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A modular, deployable, and replaceable part of a system that encapsulates implementation and exposes a set of interfaces. A component is typically specified by one or more classifiers (e.g., implementation classes) that reside on it, and may be implemented by one or more artifacts (e.g., binary, executable, or script files). Contrast: <i>					<a href="#artifact">artifact</a>				</i>.</dd>
<dt>
<b><a name="component-based_development_(CBD)">							component-based development (CBD)					</a><a name="XE_component-based_development_(CBD)__definition_in_glossary"></a></b>
</dt>
<dd>The creation and deployment of software-intensive systems assembled 			from <i><a href="#component">components</a></i> as well as the development and 			harvesting of such components.</dd>
<dt>
<b><a name="component_diagram">							component diagram					</a><a name="XE_component_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows the organizations and dependencies among <i>					<a href="#component">components</a>				</i>.</dd>
<dt>
<b><a name="component_model">							component model					</a><a name="XE_component_model__definition_in_glossary"></a></b>
</dt>
<dd>An architecture and an API that allows developers to define reusable segments of code that can be combined to create a program. VisualAge for Java uses the JavaBeans component model.</dd>
<dt>
<b><a name="composite_[class]">							composite [class]					</a><a name="XE_composite__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A <i><a href="#class">class</a></i> that is related to one or more classes by 				a composition relationship. See: <i><a href="#composition">composition</a></i>.</dd>
<dt>
<b><a name="composite_aggregation">							composite aggregation					</a><a name="XE_composite_aggregation__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Synonym: <i>					<a href="#composition">composition</a>				</i>.</dd>
<dt>
<b><a name="composite_bean">							composite bean					</a><a name="XE_composite_bean__definition_in_glossary"></a></b>
</dt>
<dd>A bean that is composed of other beans. A composite bean can contain visual beans, nonvisual beans, or both. See also: bean, nonvisual bean, and visual bean.</dd>
<dt>
<b><a name="composite_state">							composite state					</a><a name="XE_composite_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A state that consists of either concurrent (orthogonal) substates or sequential (disjoint) substates. See: <i>					<a href="#substate">substate</a>				</i>.</dd>
<dt>
<b><a name="composite_substate">							composite substate					</a><a name="XE_composite_substate__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#substate">substate</a>				</i> that can be held simultaneously with other substates contained in the same composite state. See: <i>					<a href="#composite_state">composite state</a>				</i>. Synonym: <i>region</i>.</dd>
<dt>
<b><a name="composition">							composition					</a><a name="XE_composition__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A form of <i>					<a href="#aggregation">aggregation</a>				</i> association with strong ownership and coincident lifetime as part of the whole. Parts with non-fixed <i>					<a href="#multiplicity">multiplicity</a>				</i> may be created after the <i>					<a href="#composite_[class]">composite</a>				</i> itself, but once created they live and die with it; that is, they share lifetimes. Such parts can also be explicitly removed before the death of the composite. Composition may be recursive. See also: <i>					<a href="#composite_aggregation">composite aggregation</a>				</i>.</dd>
<dt>
<b><a name="concrete">							concrete					</a><a name="XE_concrete__definition_in_glossary"></a></b>
</dt>
<dd>adj.Of or relating to an actual, specific thing or instance. Capable of being perceived by the senses; not abstract or imaginary. Contrast: <i>					<a href="#abstract">abstract</a>				</i>. See: <i>					<a href="#concrete_class">concrete class</a>.</i>			
</dd>
<dt>
<b><a name="concrete_class">							concrete class					</a><a name="XE_concrete_class__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#class">class</a>				</i> that can be directly instantiated. Contrast: <i>					<a href="#abstract_class">abstract class</a>.</i>			
</dd>
<dt>
<b><a name="concurrency">							concurrency					</a><a name="XE_concurrency__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The occurrence of two or more activities during the same time interval. Concurrency can be achieved by interleaving or simultaneously executing two or more threads. See: <i>					<a href="#thread">thread</a>.</i>			
</dd>
<dt>
<b><a name="concurrent_substate">							concurrent substate					</a><a name="XE_concurrent_substate__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#substate">substate</a>				</i> that can be held simultaneously with other substates contained in the same composite state. See: <i>					<a href="#composite_substate">composite substate</a>.</i> Contrast: <i>					<a href="#disjoint_substate">disjoint substate</a>.</i>			
</dd>
<dt>
<b><a name="configuration">							configuration					</a><a name="XE_configuration__definition_in_glossary"></a></b>
</dt>
<dd>1) general: The arrangement of a system or network as defined by the nature, number, and chief characteristics of its functional units; applies to both hardware or software configuration.</dd>
<dd>(2) The requirements, design, and implementation that define a particular version of a system or system component. See: <a href="#configuration_management">					<i>configuration management</i>				</a>.</dd>
<dt>
<b><a name="configuration_item">							configuration item					</a><a name="XE_configuration_item__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#ISO95"><i>ISO95</i></a>] An entity in a configuration that satisfies an end-use function and can be uniquely identified at a given reference point.</dd>
<dt>
<b><a name="configuration_management">							configuration management					</a><a name="XE_configuration_management__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#ISO95"><i>ISO95</i></a>] A supporting process whose purpose is to identify, define, and baseline items; control modifications and releases of these items; report and record status of the items and modification requests; ensure completeness, consistency and correctness of the items; and control storage, handling and delivery of the items.</dd>
<dt>
<b><a name="constraint">							constraint					</a><a name="XE_constraint__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic condition or restriction. Certain constraints are predefined in the UML, others may be user defined. Constraints are one of three extensibility mechanisms in UML. See: <i>					<a href="#tagged_value">tagged value</a>, <a href="#stereotype">stereotype</a>.</i>			
</dd>
<dt>
<b><a name="construction">							construction					</a><a name="XE_construction_phase__definition_in_glossary"></a></b>
</dt>
<dd>The third phase of the Unified Process, in which the software is brought from an executable architectural baseline to the point at which it is ready to be transitioned to the user community.</dd>
<dt>
<b><a name="constructor">							constructor					</a><a name="XE_constructor__definition_in_glossary"></a></b>
</dt>
<dd>A special class method that has the same name as the class and is used to construct and possibly initialize objects of its class type.</dd>
<dt>
<b><a name="container">							container					</a><a name="XE_container__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> (1) An <i>					<a href="#instance">instance</a>				</i> that exists to contain other instances, and that provides operations to access or iterate over its contents; for example, arrays, lists, sets.</dd>
<dd>(2) A <i>					<a href="#component">component</a>				</i> that exists to contain other components.</dd>
<dt>
<b><a name="containment_hierarchy">							containment hierarchy					</a><a name="XE_containment_hierarchy__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A namespace hierarchy consisting of <i>					<a href="#model_element">model elements</a>				</i>, and the containment relationships that exist between them. A containment hierarchy forms an acyclic graph.</dd>
<dt>
<b><a name="context">							context					</a><a name="XE_context__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A view of a set of related <i>					<a href="#model_element">modeling elements</a>				</i> for a particular purpose, such as specifying an <i>					<a href="#operation">operation</a>				</i>.</dd>
<dt>
<b><a name="control_class">							control class					</a><a name="XE_control_class__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#class">class</a>				</i> used to model behavior specific to one, or to several <i>					<a href="#use-case_(class)">use cases</a>				</i>.</dd>
<dt>
<b><a name="conversational">							conversational					</a><a name="XE_conversational__definition_in_glossary"></a></b>
</dt>
<dd>A communication model where two distributed applications exchange information by way of a conversation; typically one application starts (or allocates) the conversation, sends some data, and allows the other application to send some data. Both applications continue in turn until one decides to finish (or de-allocate). The conversational model is a synchronous form of communication.</dd>
<dt>
<b><a name="Cookies">							cookies					</a><a name="XE_Cookies__definition_in_glossary"></a></b>
</dt>
<dd>Small files that your Web browser creates at the request of Web sites you visit; the browser sends the contents of the file to the site upon subsequent visits.</dd>
<dt>
<b><a name="CORBA">							CORBA					</a><a name="XE_CORBA__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Common_Object_Request_Broker_Architecture_(CORBA)">					<i>common object request broker architecture</i>				</a>			
</dd>
<dt>
<b><a name="coupling">							coupling					</a><a name="XE_coupling__definition_in_glossary"></a></b>
</dt>
<dd>The degree to which <i>					<a href="#component">components</a>				</i> depend on one another. There are two types of coupling, "tight" and "loose". Loose coupling is desirable to support an extensible software architecture but tight coupling may be necessary for maximum performance. Coupling is increased when the data exchanged between components becomes larger or more complex. Contrast: <i>					<a href="#cohesion">cohesion</a>.</i>			
</dd>
<dt>
<b><a name="CR">							CR					</a><a name="XE_CR__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#change_request_(CR)">					<i>change request</i>				</a>			
</dd>
<dt>
<b><a name="CRC">							CRC					</a><a name="XE_CRC__definition_in_glossary"></a></b>
</dt>
<dd>Class-responsibility collaborators. This is a technique in object-oriented development, originally proposed by Ward Cunningham and Kent Beck, to help define what objects should do in the system (their responsibilities), and identify other objects (the collaborators) that are involved in fulfilling these responsibilities. The technique is described in [<a href="referenc.htm#WIR90"><i>WIR90</i></a>]. CRC cards are a way of capturing these results using ordinary index cards.</dd>
<dt>
<b><a name="critical_design_review_(CDR)">							critical design review (CDR)					</a><a name="XE_critical_design_review_(CDR)__definition_in_glossary,%20XE_software_development_plan__traditional_reviews__critical_design_review_(CDR)__definition_in_glossary"></a></b>
</dt>
<dd>In the waterfall life cycle, the major review held when the detailed design is completed.</dd>
<dt>
<b><a name="CRUPIC_STMPL">							CRUPIC STMPL					</a><a name="XE_CRUPIC_STMPL__definition_in_glossary"></a></b>
</dt>
<dd>This acronym represents categories that can be used both in the definition of product requirements and in the assessment of product quality. Broken into two parts, the first part represents operational categories ? capability, reliability, usability, performance, installability, compatibility ? and the second part represents developmental categories ? supportability, testability, maintainability, portability, localizability. See also: <i>					<a href="#FURPS">FURPS</a>+.</i>			
</dd>
<dt>
<b><a name="customer">							customer					</a><a name="XE_customer__definition_in_glossary"></a></b>
</dt>
<dd>A person or organization, internal or external to the producing organization, who takes financial responsibility for the system. In a large system this may not be the end user. The customer is the ultimate recipient of the developed product and its artifacts. See also: <i>					<a href="#stakeholder">stakeholder</a>.</i>			
</dd>
<dt>
<b><a name="cycle">							cycle					</a><a name="XE_cycle__definition_in_glossary"></a></b>
</dt>
<dd>Synonyms: <i>					<a href="#lifecycle">lifecycle</a>, <a href="#development_cycle">development cycle</a>				</i>. See also: <i>					<a href="#test_cycle">test cycle</a>				</i>.</dd>
<dt>
<b><a name="D">							D					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="DASD">							DASD					</a><a name="XE_DASD__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#direct_access_storage_device_(DASD)">					<i>direct access storage device</i>				</a>			
</dd>
<dt>
<b><a name="database">							database					</a><a name="XE_database__definition_in_glossary"></a></b>
</dt>
<dd>(1) A collection of related data stored together with controlled redundancy according to a scheme to serve one or more applications.</dd>
<dd>(2) All data files stored in the system.</dd>
<dd>(3) A set of data stored together and managed by a database management system.</dd>
<dt>
<b><a name="database_management_system_(DBMS)">							database management system (DBMS)					</a><a name="XE_database_management_system__definition_in_glossary"></a></b>
</dt>
<dd>A computer program that manages data by providing the services of centralized control, data independence, and complex physical structures for efficient access, integrity, recovery, concurrency control, privacy, and security.</dd>
<dt>
<b><a name="datatype">							datatype					</a><a name="XE_datatype__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A descriptor of a set of values that lack identity and whose operations do not have side effects. Datatypes include primitive predefined types and user-definable types. Predefined types include numbers, string and time. User-definable types include enumerations.</dd>
<dt>
<b><a name="DBA">							DBA					</a><a name="XE_DBA__definition_in_glossary"></a></b>
</dt>
<dd>Database administrator</dd>
<dt>
<b><a name="DBCS">							DBCS					</a><a name="XE_DBCS__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#double-byte_character_set_(DBCS)">					<i>double-byte character set</i>				</a>			
</dd>
<dt>
<b><a name="DBMS">							DBMS					</a><a name="XE_DBMS__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#database_management_system_(DBMS)">					<i>database management system</i>				</a>			
</dd>
<dt>
<b><a name="DCE">							DCE					</a><a name="XE_DCE__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Distributed_Computing_Environment_(DCE)">					<i>distributed computing environment</i>				</a>			
</dd>
<dt>
<b><a name="DCOM">							DCOM					</a><a name="XE_DCOM__definition_in_glossary"></a></b>
</dt>
<dd>Distributed component object model (Microsoft). Microsoft's extension of their Component Object Model (COM) to support objects distributed across a network.</dd>
<dt>
<b><a name="deadlock">							deadlock					</a><a name="XE_defect__definition_in_glossary"></a></b>
</dt>
<dd>A condition in which two independent threads of control are blocked, each waiting for the other to take some action. Deadlock often arises from adding synchronization mechanisms to avoid <a href="#race_condition">					<i>race conditions</i>				</a>.</dd>
<dt>
<b><a name="defect">							defect					</a><a name="XE_defect__definition_in_glossary"></a></b>
</dt>
<dd>An anomaly, or flaw, in a delivered work product. Examples include such things as omissions and imperfections found during early lifecycle phases and symptoms of faults contained in software sufficiently mature for test or operation. A defect can be any kind of issue you want tracked and resolved. See also: <i>					<a href="#change_request_(CR)">change request</a>				</i>.</dd>
<dt>
<b><a name="defining_model">							defining model					</a><a name="XE_defining_model__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The model on which a repository is based. Any number of repositories can have the same defining model.</dd>
<dt>
<b><a name="delegation">							delegation					</a><a name="XE_delegation__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The ability of an object to issue a <i>					<a href="#message">message</a>				</i> to another object in response to a message. Delegation can be used as an alternative to inheritance. Contrast: <i>					<a href="#inheritance">inheritance</a>				</i>.</dd>
<dt>
<b><a name="deliverable">							deliverable					</a><a name="XE_deliverable__definition_in_glossary"></a></b>
</dt>
<dd>An output from a process that has a value, material or otherwise, to a <i>					<a href="#customer">customer</a>				</i> or other <i>					<a href="#stakeholder">stakeholder</a>				</i>.</dd>
<dt>
<b><a name="de-marshal">							de-marshal					</a><a name="XE_de-marshal__definition_in_glossary"></a></b>
</dt>
<dd>To deconstruct an object so that it can be written 			as a stream of bytes. See also: <i><a href="#flatten">flatten</a>, 			<a href="#serialize">serialize</a></i>.</dd>
<dt>
<b><a name="demilitarized_zone_(DMZ)">							demilitarized zone (DMZ)					</a><a name="XE_DeMilitarized_Zone__definition_in_glossary"></a></b>
</dt>
<dd>This term is now commonly used in the industry to describe 			a sub-network, typically used for web servers that are protected by firewalls 			from both the external Internet and a company's internal network.</dd>
<dt>
<b><a name="dependency">							dependency					</a><a name="XE_dependency__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A relationship between two <i>					<a href="#model_element">modeling elements</a>				</i>, in which a change to one modeling element (the independent element) will affect the other modeling element (the dependent element).</dd>
<dt>
<b><a name="deployment">							deployment					</a><a name="XE_deployment__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#discipline">discipline</a>				</i> in the software-engineering process, whose purpose is to ensure a successful transition of the developed system to its users. Included are <i>					<a href="#artifact">artifacts</a>				</i> such as training materials and installation procedures.</dd>
<dt>
<b><a name="deployment_diagram">							deployment diagram					</a><a name="XE_deployment_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows the configuration of run-time processing nodes and the <i>					<a href="#component">components</a>				</i>, <i>					<a href="#process">processes</a>				</i>, and <i>					<a href="#object">objects</a>				</i> that live on them. Components represent run-time manifestations of code units. See also: <i>					<a href="#component_diagram">component diagram</a>				</i>.</dd>
<dt>
<b><a name="deployment_environment">							deployment environment					</a><a name="XE_deployment_environment__definition_in_glossary"></a></b>
</dt>
<dd>A specific instance of a configuration of hardware and software established for the purpose of installing and running the developed software for it's intended use. See also: <i>					<a href="#test_environment">test environment</a>				</i>, <a href="#environment">					<i>environment</i>				</a>.</dd>
<dt>
<b><a name="deployment_unit">							deployment unit					</a><a name="XE_deployment_unit__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A set of <i>					<a href="#object">objects</a>				</i> or <i>					<a href="#component">components</a>				</i> that are allocated to a process or a processor as a group. A distribution unit can be represented by a run-time <i>					<a href="#composite_[class]">composite</a>				</i> or an <i>					<a href="#aggregate_(class)">aggregate</a>				</i>.</dd>
<dt>
<b><a name="deployment_view">							deployment view					</a><a name="XE_deployment_view__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_view">architectural view</a>				</i> that describes one or several system configurations; the mapping of software <i>					<a href="#component">components</a>				</i> (tasks, modules) to the computing nodes in these configurations.</dd>
<dt>
<b><a name="derived_element">							derived element					</a><a name="XE_derived_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model element that can be computed from another element, but that is shown for clarity or that is included for design purposes even though it adds no semantic information.</dd>
<dt>
<b><a name="deserialize">							deserialize					</a><a name="XE_deserialize__definition_in_glossary"></a></b>
</dt>
<dd>To construct an object from a de-marshaled state. See also: <a href="#marshal">					<i>marshal</i>				</a>, <a href="#resurrect">					<i>resurrect</i>				</a>.</dd>
<dt>
<b><a name="design">							design					</a><a name="XE_design__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The part of the software development process whose primary purpose is to decide how the system will be implemented. During design, strategic and tactical decisions are made to meet the required functional and quality <i>					<a href="#requirements">requirements</a>				</i> of a system. See: <a href="#analysis">					<i>analysis</i>				</a>.</dd>
<dt>
<b><a name="design_mechanism">							design mechanism					</a><a name="XE_design_mechanism__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_mechanism">architectural mechanism</a>				</i> used during the design process, during the period in which the details of the design are being worked-out. They are related to associated <i>					<a href="#analysis_mechanism">analysis mechanisms</a>				</i>, of which they are additional refinements, and they may bind one or more architectural and design patterns. There is not necessarily any difference in scale between the analysis mechanism and the design mechanism?it is thus possible to speak of a persistence mechanism at the analysis level and the design level and mean the same thing, but at a different level of refinement. ; A design mechanism assumes some details of the implementation environment, but it is not tied to a specific implementation (as is an <i>					<a href="#implementation_mechanism">implementation mechanism</a>				</i>). For example, the analysis mechanism for inter-process communication may be refined by several design mechanisms for interprocess communication (IPC): shared memory, function-call-like IPC, semaphore-based IPC, and so on. Each design mechanism has certain strengths and weaknesses; the choice of a particular design mechanism is determined by the characteristics of the objects using the mechanism.</dd>
<dt>
<b><a name="design_model">							design model					</a><a name="XE_design_model__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#object_model">object model</a>				</i> describing the realization of <i>					<a href="#use-case_(class)">use cases</a>				</i>; serves as an abstraction of the <i>					<a href="#implementation_model">implementation model</a>				</i> and its source code.</dd>
<dt>
<b><a name="design_package">							design package					</a><a name="XE_design_package__definition_in_glossary"></a></b>
</dt>
<dd>A collection of <a href="#class">					<i>classes</i>				</a>, <a href="#relationship">					<i>relationships</i>				</a>, <a href="#use-case_realization">					<i>use-case realizations</i>				</a>, <a href="#diagram">					<i>diagrams</i>				</a>, and other <a href="#package">					<i>packages</i>				</a>, it is used to structure the <a href="#design_model">					<i>design model</i>				</a> by dividing it into smaller parts. It's the logical analogue of the <a href="#implementation_subsystem">					<i>implementation subsystem</i>				</a>.</dd>
<dt>
<b><a name="design_pattern">							design pattern					</a><a name="XE_design_pattern__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#GAM94"><i>GAM94</i></a>] defines a design pattern as: <blockquote>"A design pattern provides a scheme for refining the subsystems or   components of a software system, or the relationships between them. It describes   a commonly-recurring structure of communicating components that solves a general   design problem within a particular context."</blockquote>Design patterns are medium to small-scale patterns, smaller in scale than architectural patterns but typically independent of programming language. When a design pattern is bound, it will form a portion of a concrete design model (perhaps a portion of a <i>					<a href="#design_mechanism">design mechanism</a>				</i>). Design patterns tend, because of their level, to be applicable across domains.</dd>
<dt>
<b><a name="design_subsystem">							design subsystem					</a><a name="XE_design_subsystem__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#model_element">model element</a>				</i> which has the semantics of a <a href="#package">					<i>package</i>				</a> (it can contain other model elements) and a <a href="#class">					<i>class</i>				</a> (it has behavior). The <a href="#behavior">					<i>behavior</i>				</a> of the subsystem is provided by classes or other subsystems it contains. A subsystem realizes one or more <a href="#interface">					<i>interfaces</i>				</a>, which define the behavior it can perform. Contrast: <i>					<a href="#design_package">design package</a>				</i>.</dd>
<dt>
<b><a name="design_time">							design time					</a><a name="XE_design_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Refers to something that occurs during a design phase of the software development process. See: <i>					<a href="#modeling_time">modeling time</a>				</i>. Contrast: <i>					<a href="#analysis_time">analysis time</a>				</i>.</dd>
<dt>
<b><a name="developer">							developer					</a><a name="XE_developer__definition_in_glossary"></a></b>
</dt>
<dd>A person responsible for developing the required functionality in accordance with project-adopted standards and procedures. This can include performing activities in any of the <i>requirements, analysis &amp; design, implementation,</i> and <i>test</i> disciplines.</dd>
<dt>
<b><a name="development_case">							development case					</a><a name="XE_development_case__definition_in_glossary"></a></b>
</dt>
<dd>The software-engineering process used by the performing organization. It is developed as a configuration, or customization, of the Unified Process product, and adapted to the project's needs.</dd>
<dt>
<b><a name="development_cycle">							development cycle					</a><a name="XE_development_cycle__definition_in_glossary"></a></b>
</dt>
<dd>Synonyms: <i>					<a href="#lifecycle">lifecycle</a>, <a href="#cycle">cycle</a>				</i>. See also: <i>					<a href="#test_cycle">test cycle</a>				</i>.</dd>
<dt>
<b><a name="development_process">							development process					</a><a name="XE_development_process__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A set of partially ordered steps performed for a given purpose during software development, such as constructing models or implementing models.</dd>
<dt>
<b><a name="device">							device					</a><a name="XE_device__definition_in_glossary"></a></b>
</dt>
<dd>A type of <a href="#node">					<i>node</i>				</a> which provides supporting capabilities to a <a href="#processor">					<i>processor</i>				</a>. Although it may be capable of running embedded programs (device drivers), it cannot execute general-purpose applications, but instead exists only to serve a processor running general-purpose applications.</dd>
<dt>
<b><a name="diagram">							diagram					</a><a name="XE_diagram__definition_in_glossary"></a></b>
</dt>
<dd>A graphical depiction of all or part of a <i>					<a href="#model">model</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A graphical presentation of a collection of <i>					<a href="#model_element">model elements</a>				</i>, most often rendered as a connected graph of arcs (relationships) and 				vertices (other model elements). UML supports the following diagrams: <i>					<a href="#class_diagram">class diagram</a>				</i>, <i>					<a href="#object_diagram">object diagram</a>				</i>, <i>					<a href="#use-case_diagram">use-case diagram</a>				</i>, <i>					<a href="#sequence_diagram">sequence diagram</a>				</i>, <i>					<a href="#collaboration_diagram">collaboration diagram</a>				</i>, <i>					<a href="#statechart_diagram">statechart diagram</a>				</i>, <i>					<a href="#activity_graph">activity diagram</a>				</i>, <i>					<a href="#component_diagram">component diagram</a>				</i>, and <i>					<a href="#deployment_diagram">deployment diagram</a>				</i>.</dd>
<dt>
<b><a name="direct_access_storage_device_(DASD)">							direct access storage device (DASD)					</a><a name="XE_DASD__definition_in_glossary"></a></b>
</dt>
<dd>A device that allows storage to be directly accessed, such as a disk drive (as opposed to a tape drive, which is accessed sequentially).</dd>
<dt>
<b><a name="discipline">							discipline					</a><a name="XE_discipline__definition_in_glossary"></a></b>
</dt>
<dd>A discipline is a collection of related activities that are 			related to a major 'area of concern'. The<i>disciplines</i> in RUP include: 			<i>Business Modeling, Requirements, Analysis &amp; Design, Implementation, Test, 			Deployment, Configuration &amp; Change Management, Project Management, Environment</i>.</dd>
<dt>
<b><a name="disjoint_substate">							disjoint substate					</a><a name="XE_disjoint_substate__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#substate">substate</a>				</i> that cannot be held simultaneously with other substates contained in the same composite state. See: <i>					<a href="#composite_state">composite state</a>				</i>. Contrast: <i>					<a href="#concurrent_substate">concurrent substate</a>				</i>. ;</dd>
<dt>
<b><a name="Distributed_Computing_Environment_(DCE)">							distributed computing environment (DCE)					</a><a name="XE_DCE__definition_in_glossary"></a></b>
</dt>
<dd>Distributed Computing Environment. Adopted by the computer industry as a de facto standard for distributed computing. DCE allows computers from a variety of vendors to communicate transparently and share resources such as computing power, files, printers, and other objects in the network.</dd>
<dt>
<b><a name="distributed_processing">							distributed processing					</a><a name="XE_distributed_processing__definition_in_glossary"></a></b>
</dt>
<dd>Distributed processing is an application or systems model in which function and data can be distributed across multiple computing resources connected on a LAN or WAN. See: client/server computing.</dd>
<dt>
<b><a name="DLL">							DLL					</a><a name="XE_DLL__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#dynamically_linked_library_(DLL)">					<i>dynamically linked library</i>				</a>			
</dd>
<dt>
<b><a name="DMZ">							DMZ					</a><a name="XE_DMZ__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#demilitarized_zone_(DMZ)">					<i>de-militarized zone</i>				</a>			
</dd>
<dt>
<b><a name="DNS">							DNS					</a><a name="XE_DNS__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#domain_name_server">					<i>domain name server</i>				</a>			
</dd>
<dt>
<b><a name="document">							document					</a><a name="XE_document__definition_in_glossary"></a></b>
</dt>
<dd>A document is a collection of information that is intended to be represented on paper, or in a medium using a paper metaphor. The paper metaphor includes the concept of pages, and it has either an implicit or explicit sequence of contents. The information is in text or two-dimensional pictures. Examples of paper metaphors are word processor documents, spreadsheets, schedules, Gantt charts, web-pages, or overhead slide presentations.</dd>
<dt>
<b><a name="document_description">							document description					</a><a name="XE_document_description__definition_in_glossary"></a></b>
</dt>
<dd>Describes the intended content of a particular document.</dd>
<dt>
<b><a name="document_template">							document template					</a><a name="XE_document_template__definition_in_glossary"></a></b>
</dt>
<dd>A concrete tool template, available for tools such as a Adobe&reg; FrameMaker&reg; or Microsoft&reg; Word&reg;.</dd>
<dt>
<b><a name="domain">							domain					</a><a name="XE_domain__definition_in_glossary"></a></b>
</dt>
<dd>An area of knowledge or activity characterized by a family of related values.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An area of knowledge or activity characterized by a set of concepts and terminology understood by practitioners in that area.</dd>
<dt>
<b><a name="domain_(database)">							domain (database)					</a><a name="NO%20INDEX%20ENTRY"></a></b>
</dt>
<dd>A user defined data type that defines a valid range of values 			for a column of a table in a database.</dd>
<dt>
<b><a name="domain_model">							domain model					</a><a name="XE_domain_model__definition_in_glossary"></a></b>
</dt>
<dd>A domain model captures the most important types of objects in the context 			of the <i><a href="#domain">domain</a></i>. The domain objects represent the entities 			that exist or events that transpire in the environment in which the system works. 			The domain model is a subset of the <i><a href="#business_analysis_model">business analysis 			model</a></i>.</dd>
<dt>
<b><a name="domain_name_server">							domain name server					</a><a name="XE_domain_name_server__definition_in_glossary"></a></b>
</dt>
<dd>A system for translating domain names such as www.software.ibm.com 			into numeric Internet protocol addresses such as 123.45.67.8.</dd>
<dt>
<b><a name="double-byte_character_set_(DBCS)">							double-byte character set (DBCS)					</a><a name="XE_double-byte_character_set__definition_in_glossary"></a></b>
</dt>
<dd>A set of characters in which each character is represented by 2 bytes. 			Languages such as Japanese, Chinese, and Korean, which contain more symbols 			than can be represented by 256 code points, require double- byte character sets. 			Contrast: <i>single-byte character set</i>.</dd>
<dt>
<b><a name="dynamically_linked_library_(DLL)">							dynamically linked library (DLL)					</a><a name="XE_dynamically_linked_library__definition_in_glossary"></a></b>
</dt>
<dd>A file containing executable code and data bound to a program 			at run time rather than at link time (the final phase of compilation). 			This means that the same block of library code can be shared between several 			tasks rather than each task containing copies of the routines it uses. 			The C++ Access Builder generates beans and C++ wrappers that let your 			Java programs access C++ DLLs.</dd>
<dt>
<b><a name="dynamic_classification">							dynamic classification					</a><a name="XE_dynamic_classification__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic variation of <i>					<a href="#generalization">generalization</a>				</i> in which an <i>					<a href="#object">object</a>				</i> may change <i>					<a href="#type">type</a>				</i> or <i>					<a href="#role">role</a>				</i>. Contrast: <i>					<a href="#static_classification">static classification</a>				</i>.</dd>
<dt>
<b><a name="dynamic_information">							dynamic information					</a><a name="XE_dynamic_information__definition_in_glossary"></a></b>
</dt>
<dd>Information that is created at the time the user requests it. 			Dynamic information changes over time so that each time users view it, they 			see different content.</dd>
<dt>
<b><a name="E">							E					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="earned_value">							earned value					</a><a name="XE_earned_value__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#MSP97"><i>MSP97</i></a>] defines this as: <blockquote>"A measure of the value of work performed so far. Earned value uses   original estimates and progress-to-date to show whether the actual costs incurred   are on budget and whether the tasks are ahead or behind the baseline plan."</blockquote>			
</dd>
<dt>
<b><a name="e-business">							e-business					</a><a name="XE_e-business__definition_in_glossary"></a></b>
</dt>
<dd>(1) the transaction of business over an electronic 			medium such as the Internet</dd>
<dd>(2) a business that uses Internet technologies and network computing 			in their internal business processes (via intranets), their business 			relationships (via extranets), and the buying and selling of goods, services, 			and information (via electronic commerce).</dd>
<dt>
<b><a name="EJB,%20Enterprise%20JavaBean">							EJB					</a><a name="XE_EJB__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Enterprise_JavaBean_(EJB)">					<i>enterprise javabean</i>				</a>			
</dd>
<dt>
<b><a name="elaboration">							elaboration					</a><a name="XE_elaboration__definition_in_glossary"></a></b>
</dt>
<dd>The second <i>					<a href="#phase">phase</a>				</i> of the process where the product <i>					<a href="#vision">vision</a>				</i> and its <i>					<a href="#architecture">architecture</a>				</i> are defined.</dd>
<dt>
<b><a name="element">							element					</a><a name="XE_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An atomic constituent of a <i>					<a href="#model">model</a>				</i>.</dd>
<dt>
<b><a name="encapsulation">							encapsulation					</a><a name="XE_encapsulation__definition_in_glossary"></a></b>
</dt>
<dd>The hiding of a software object's internal representation. The object provides an interface that queries and manipulates the data without exposing its underlying structure.</dd>
<dt>
<b><a name="enclosed_document">							enclosed document					</a><a name="XE_enclosed_document__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#document">document</a>				</i> can be enclosed by another document to collect a set of documents into a whole; the enclosing document as well as the individual enclosures are regarded as separate <i>					<a href="#artifact">artifacts</a>				</i>.</dd>
<dt>
<b><a name="enhancement_request">							enhancement request					</a><a name="XE_enhancement_request__definition_in_glossary"></a></b>
</dt>
<dd>A type of <i>					<a href="#stakeholder_request">stakeholder request</a>				</i> that specifies a new <i>					<a href="#feature">feature</a>				</i> or functionality of the system. See also: <i>					<a href="#change_request_(CR)">change request</a>.</i>			
</dd>
<dt>
<b><a name="Enterprise_JavaBean_(EJB)">							enterprise javabean (EJB)					</a><a name="XE_Enterprise_JavaBean__definition_in_glossary"></a></b>
</dt>
<dd>An EJB is a non-visual, remote object designed to run on a server and be invoked by clients. An EJB can be built out of multiple, non-visual JavaBeans. EJBs are intended to live on one machine and be invoked remotely from another machine. They are platform-independent. Once a bean is written, it can be used on any client or server platform that supports Java.</dd>
<dt>
<b><a name="entity_class">							entity class					</a><a name="XE_entity_class__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#class">class</a>				</i> used to model information that has been stored by the system, and the associated behavior. A generic class, reused in many <i>					<a href="#use-case_(class)">use cases</a>				</i>, often with persistent characteristics. An entity class defines a set of entity objects, which participate in several use cases and typically survive those use cases.</dd>
<dt>
<b><a name="entry_action">							entry action					</a><a name="XE_entry_action__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An action executed upon entering a <i>					<a href="#state">state</a>				</i> in a <i>					<a href="#state_machine">state machine</a>				</i> regardless of the transition taken to reach that state.</dd>
<dt>
<b><a name="enumeration">							enumeration					</a><a name="XE_enumeration__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A list of named values used as the range of a particular <i>					<a href="#attribute">attribute</a>				</i> type. For example, RGBColor = {red, green, blue}. Boolean is a predefined enumeration with values from the set {false, true}.</dd>
<dt>
<b><a name="environment">							environment					</a><a name="XE_environment__definition_in_glossary"></a></b>
</dt>
<dd>(1) A <i><a href="#discipline">discipline</a></i> in the 			software-engineering process, whose purpose is to define and manage the 			environment in which the system is being developed. Includes process 			descriptions, <i><a href="#configuration_management">configuration management</a></i>, 			and development tools.</dd>
<dd>(2) A specific instance of a configuration of hardware and 			software, established for the purpose of software development, software testing, 			or in which the final product is deployed. See also: <i>					<a href="#test_environment">test environment</a>				</i>, <i>					<a href="#deployment_environment">deployment environment</a>				</i>.</dd>
<dt>
<b><a name="equivalence_class">							equivalence class					</a><a name="XE_equivalence_class__definition_in_glossary"></a></b>
</dt>
<dd>A classification of equivalent values for which a object is expected to behave			similarly. This technique can be applied to help analyze the most significant tests to 			conduct	when there are too many potential tests to conduct in the available time. 			Synonyms: <i>equivelance partition, <a href="#domain">domain</a></i>.</dd>
<dt>
<b><a name="ERP">							ERP					</a><a name="XE_ERP__definition_in_glossary"></a></b>
</dt>
<dd>Enterprise Resource Planning</dd>
<dt>
<b><a name="evalution_mission">							evalution mission					</a><a name="XE_evalution_mission__definition_in_glossary"></a></b>
</dt>
<dd>A brief, easy-to-remember statement that defines the essence of 			the work objectives for the test team for a given work schedule. Typically 			reconsidered per iteration, the evaluation mission provides focus to keep the 			team working productively to benefit the testing stakeholders. Some examples of 			mission statements include: <i>find important problems fast</i>, 			<i>advise about perceived quality</i> and <i>verify to a specification</i>.</dd>
<dt>
<b><a name="event">							event					</a><a name="XE_event__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The specification of a significant occurrence that has a location in 				time and space. In the context of <i>					<a href="#statechart_diagram">state diagrams</a>				</i>, an event is an occurrence that can trigger a <i>					<a href="#transition">transition</a></i>.</dd>
<dt>
<b><a name="event-to-method_connection">							event-to-method connection					</a><a name="XE_event-to-method_connection__definition_in_glossary"></a></b>
</dt>
<dd>A connection from an event generated by a bean to a method 			of a bean. When the connected event occurs, the method is executed.</dd>
<dt>
<b><a name="evolution">							evolution					</a><a name="XE_evolution__definition_in_glossary"></a></b>
</dt>
<dd>The life of the software after its initial development cycle; 			any subsequent cycle, during which the product evolves.</dd>
<dt>
<b><a name="evolutionary">							evolutionary					</a><a name="XE_evolutionary__definition_in_glossary"></a></b>
</dt>
<dd>An iterative development strategy that acknowledges that user 			needs are not fully understood and therefore requirements are refined in each 			succeeding iteration (<i><a href="#elaboration">elaboration phase</a></i>).</dd>
<dt>
<b><a name="executable_architecture">							executable architecture					</a><a name="XE_executable_architecture__definition_in_glossary"></a></b>
</dt>
<dd>An executable <i><a href="#architecture">architecture</a></i> is 			a partial implementation of the system, built to demonstrate selected system 			functions and properties, in particular those satisfying non-functional 			requirements. It is built during the <i><a href="#elaboration">elaboration phase</a></i> 			to mitigate risks related to performance, throughput, capacity, reliability 			and other 'ilities', so that the complete functional capability of the system 			may be added in the <i><a href="#construction">construction phase</a></i> on 			a solid foundation, without fear of breakage. It is the intention of the RUP 			that the executable architecture be built as an evolutionary prototype, with 			the intention of retaining what is found to work (and satisfies requirements), 			and making it part of the deliverable system.</dd>
<dt>
<b><a name="exit_action">							exit action					</a><a name="XE_exit_action__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An action executed upon exiting a <i>					<a href="#state">state</a>				</i> in a <i>					<a href="#state_machine">state machine</a>				</i> regardless of the transition taken to exit that state.</dd>
<dt>
<b><a name="exploratory_testing">							exploratory testing					</a><a name="XE_exploratory_testing__definition_in_glossary"></a></b>
</dt>
<dd>A technique for testing computer software that requires minimal 			planning and tolerates limited documentation for the target-of-test in advance 			of test execution, relying on the skill and knowledge of the tester and 			feedback from test results to guide the ongoing test effort. Exploratory testing 			is often conducted in short sessions in which feedback gained from one session 			is used to dynamically plan subsequent sessions. For more detail, 			see: [<a href="referenc.htm#BAC01a"><i>BAC01a</i></a>].</dd>
<dt>
<b><a name="export">							export					</a><a name="XE_export__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> In the context of <i><a href="#package">packages</a></i>, to 				make an element visible outside its enclosing namespace. See: 				<i><a href="#visibility">visibility</a>.</i> Contrast: 				<i><a href="#export">export</a>[OMA], <a href="#import">import</a></i>.</dd>
<dt>
<b><a name="expression">							expression					</a><a name="XE_expression__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A string that evaluates to a value of a particular type. For example, 				the expression "(7 + 5 * 3)" evaluates to a value 				of type number.</dd>
<dt>
<b><a name="extend">							extend					</a><a name="XE_extend__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A relationship from an extension use case to a base use case, 				specifying how the behavior defined for the extension use case can be 				inserted into the behavior defined for the base use case.</dd>
<dt>
<b><a name="extend-relationship">							extend-relationship					</a><a name="XE_extend-relationship__definition_in_glossary"></a></b>
</dt>
<dd>An extend-relationship from a use-case class A to a use-case class B 			indicates that an instance of B may include (subject to specific conditions 			specified in the extension) the behavior specified by A. Behavior specified by 			several extenders of a single target use case can occur within a single 			use-case instance.</dd>
<dt>
<b><a name="external_link">							external link					</a><a name="XE_extend-relationship__definition_in_glossary"></a></b>
</dt>
<dd>In a Web site, a link to a URL that is located outside the current Web site. Synonym: <i>					<a href="#outside_link">outside link</a>				</i>			
</dd>
<dt>
<b><a name="F">							F					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="facade">							facade					</a><a name="XE_facade__definition_in_glossary"></a></b>
</dt>
<dd>A special package, stereotyped &laquo;facade&raquo;, within a subsystem that organizes and exports all information needed by the clients of the subsystem. Included in this package are <i>					<a href="#interface">interfaces</a>				</i> (where the interfaces are unique to the subsystem), realization relationships to interfaces outside the subsystem, and any documentation needed by clients of the subsystem to use the subsystem.</dd>
<dt>
<b><a name="factory">							factory					</a><a name="XE_factory__definition_in_glossary"></a></b>
</dt>
<dd>(1) A term commonly used to refer to specific group of <i>					<a href="#design_pattern">design patterns</a>				</i> that deal with the creation or instantiation of <i>					<a href="#object">objects</a>				</i>. Examples include <i>Abstract Factory</i> and <i>Factory Method</i> [<a href="referenc.htm#GAM94"><i>GAM94</i></a>]			</dd>
<dd>(2) Java?A nonvisual bean capable of dynamically creating new instances of a specified bean.</dd>
<dt>
<b><a name="failure">							failure					</a><a name="XE_failure__definition_in_glossary"></a></b>
</dt>
<dd>The inability of a system or component to perform its required functions within specified performance requirements [<a href="referenc.htm#IEEE90"><i>IEEE90</i></a>]. A failure is characterized by the observable symptoms of one or more <i>					<a href="#defect">defects</a>				</i> that have a root cause in one or more <i>					<a href="#fault">faults</a>				</i>.</dd>
<dt>
<b><a name="fault">							fault					</a><a name="XE_fault__definition_in_glossary"></a></b>
</dt>
<dd>An accidental condition that causes the 			<i><a href="#failure">failure</a></i> of a component in the 			implementation model to perform its required behavior. A fault is the 			root cause of one or more <i><a href="#defect">defects</a></i> identified 			by observing one or more <i><a href="#failure">failures</a></i>.</dd>
<dt>
<b><a name="fault-based_testing">							fault-based testing					</a><a name="XE_fault-based_testing__definition_in_glossary"></a></b>
</dt>
<dd>A technique for testing computer software using a test method and 			test data to demonstrate the absence or existence of a set of pre-defined 			<i><a href="#fault">faults</a></i>. For example, to demonstrate that the 			software correctly handles a divide by zero fault, the test data would 			include zero.</dd>
<dt>
<b><a name="fault_model">							fault model					</a><a name="XE_fault_model__definition_in_glossary"></a></b>
</dt>
<dd>A model for testing computer software which uses the notion of 			a plausible <i><a href="#fault">fault</a></i> as it's basis and provides 			a test method to uncover the fault. The good fault model provides a definition 			of the fault or root cause, discussion of the observable 			<i><a href="#failure">failures</a></i> the fault can produce, a test technique 			for uncovering the fault and a profile of appropriate test data.</dd>
<dt>
<b><a name="feature">							feature					</a><a name="XE_feature__definition_in_glossary"></a></b>
</dt>
<dd>An externally observable service provided by the system which directly fulfills a <i>					<a href="#stakeholder_need">stakeholder need</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A property, like operation or attribute, which is encapsulated within a classifier, such as an interface, a class or a datatype.</dd>
<dt>
<b><a name="field">							field					</a><a name="XE_field__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#attribute">					<i>attribute</i>				</a>.</dd>
<dt>
<b><a name="file_transfer_protocol_(FTP)">							file transfer protocol (FTP)					</a><a name="XE_file_transfer_protocol__definition_in_glossary"></a></b>
</dt>
<dd>The basic Internet function that enables files to be transferred between computers. You can use it to download files from a remote, host computer, as well as to upload files from your computer to a remote, host computer. ;</dd>
<dt>
<b><a name="final_state">							final state					</a><a name="XE_final_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A special kind of state signifying that the enclosing <i>					<a href="#composite_state">composite state</a>				</i> or the entire <i>					<a href="#state_machine">state machine</a>				</i> is completed.</dd>
<dt>
<b><a name="fire">							fire					</a><a name="XE_fire__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> To execute a state transition. See: <i>					<a href="#transition">transition</a>				</i>.</dd>
<dt>
<b><a name="Firewall">							firewall					</a><a name="XE_Firewall__definition_in_glossary"></a></b>
</dt>
<dd>A computer, or programmable device, with associated software which can be used to restrict traffic passing through it according to defined rules. Controls would typically be applied based on the origin or destination address and the TCP/IP port number.</dd>
<dt>
<b><a name="flatten">							flatten					</a><a name="XE_flatten__definition_in_glossary"></a></b>
</dt>
<dd>Synonym: <a href="#de-marshal">					<i>de-marshal</i>				</a>.</dd>
<dt>
<b><a name="focus_of_control">							focus of control					</a><a name="XE_focus_of_control__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A symbol on a <i>					<a href="#sequence_diagram">sequence diagram</a>				</i> that shows the period of time during which an object is performing an action, either directly or through a subordinate procedure.</dd>
<dt>
<b><a name="foreign_key">							foreign key					</a><a name="NO%20INDEX%20ENTRY"></a></b>
</dt>
<dd>A column or set of columns of a database table that references the primary key of another table.</dd>
<dt>
<b><a name="formal_parameter">							formal parameter					</a><a name="XE_formal_parameter__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Synonym: <i>					<a href="#parameter">parameter</a>				</i>.</dd>
<dt>
<b><a name="framework">							framework					</a><a name="XE_framework__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A micro-<i>					<a href="#architecture">architecture</a>				</i> that provides an extensible <i>					<a href="#template">template</a>				</i> for applications within a specific <i>					<a href="#domain">domain</a>				</i>.</dd>
<dt>
<b><a name="FTP">							FTP					</a><a name="XE_FTP__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#file_transfer_protocol_(FTP)">					<i>file transfer protocol</i>				</a>			
</dd>
<dt>
<b><a name="FURPS">							FURPS					</a><a name="XE_FURPS__definition_in_glossary"></a></b>
</dt>
<dd>Functionality, usability, reliability, performance, supportability + others. Described in [<a href="referenc.htm#GRA92"><i>GRA92</i></a>], this acronym represents categories that can be used in the definition of product requirements as well as in the assessment of product quality. Alternative categorization methods can also be used. See: <i>					<a href="#CRUPIC_STMPL">CRUPIC STMPL</a>				</i>.</dd>
<dt>
<b><a name="G">							G					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="gateway">							gateway					</a><a name="XE_gateway__definition_in_glossary"></a></b>
</dt>
<dd>A host computer that connects networks that communicate in different languages; for example, a gateway connects a company's LAN to the Internet.</dd>
<dt>
<b><a name="generalizable_element">							generalizable element					</a><a name="XE_generalizable_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model element that may participate in a generalization relationship. See: <i>					<a href="#generalization">generalization</a>				</i>.</dd>
<dt>
<b><a name="generalization">							generalization					</a><a name="XE_generalization__definition_in_glossary,%20XE_use-case-generalization__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element and contains additional information. An instance of the more specific element may be used where the more general element is allowed. See: <i>					<a href="#inheritance">inheritance</a>.</i>			
</dd>
<dt>
<b><a name="generation">							generation					</a><a name="XE_generation__definition_in_glossary"></a></b>
</dt>
<dd>Final <i><a href="#release">release</a></i> at the end of a 			<i><a href="#cycle">cycle</a></i>.</dd>
<dt>
<b><a name="graphical_user_interface_(GUI)">							graphical user interface (GUI)					</a><a name="XE_graphical_user_interface__definition_in_glossary"></a></b>
</dt>
<dd>A type of interface that enables users to communicate with a 			program by manipulating graphical features, rather than by entering commands. 			Typically, a GUI includes a combination of graphics, pointing devices, menu bars 			and other menus, overlapping windows, and icons.</dd>
<dt>
<b><a name="green-field_development">							green-field development					</a><a name="XE_green-field_development__definition_in_glossary"></a></b>
</dt>
<dd>Development "starting from scratch", as opposed to 			"evolution of an existing system" or "reengineering of a 			legacy piece". Origin: from the transformation that takes place when 			building a new factory on an undeveloped site?with grass on it.</dd>
<dt>
<b><a name="guard_condition">							guard condition					</a><a name="XE_guard_condition__definition_in_glossary"></a></b>
</dt>
<dd>A condition that must be satisfied in order to enable an associated <i>					<a href="#transition">transition</a>				</i> to <i>					<a href="#fire">fire</a>				</i>.</dd>
<dt>
<b><a name="GUI">							GUI					</a><a name="XE_GUI__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#graphical_user_interface_(GUI)">					<i>graphical user interface</i>				</a>			
</dd>
<dt>
<b><a name="H">							H					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="home_page">							home page					</a><a name="XE_home_page__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Start_page">					<i>start page</i>.</a>			
</dd>
<dt>
<b><a name="HotJava">							hotjava					</a><a name="XE_HotJava__definition_in_glossary"></a></b>
</dt>
<dd>A Java-enabled Web and intranet browser developed by Sun Microsystems, Inc. HotJava is written in Java.</dd>
<dt>
<b><a name="HTML">							HTML					</a><a name="XE_HTML__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#hypertext_markup_language_(HTML)">					<i>hypertext markup language</i>				</a>			
</dd>
<dt>
<b><a name="HTML_browser">							HTML browser					</a><a name="XE_HTML_browser__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>					<a href="#web_browser">web browser</a>				</i>. ;</dd>
<dt>
<b><a name="HTTP">							HTTP					</a><a name="XE_HTTP__definition_in_glossary"></a></b>
</dt>
<dd>Hypertext transport protocol</dd>
<dt>
<b><a name="HTTP_request">							HTTP request					</a><a name="XE_HTTP_request__definition_in_glossary"></a></b>
</dt>
<dd>A transaction initiated by a Web browser and adhering to HTTP. The server usually responds with HTML data, but can send other kinds of objects as well.</dd>
<dt>
<b><a name="hyperlinks">							hyperlinks					</a><a name="XE_hyperlinks__definition_in_glossary"></a></b>
</dt>
<dd>Areas on a Web page that, when clicked, connect you to other areas on the page or other Web pages.</dd>
<dt>
<b><a name="hypertext">							hypertext					</a><a name="XE_hypertext__definition_in_glossary"></a></b>
</dt>
<dd>Text in a document that contains a hidden link to other text. You can click a mouse on a hypertext word and it will take you to the text designated in the link. Hypertext is used in Windows help programs and CD encyclopedias to jump to related references elsewhere within the same document. The wonderful thing about hypertext, however, is its ability to link?using HTTP over the Web?to any Web document in the world, yet still require only a single mouse click to jump clear around the world.</dd>
<dt>
<b><a name="hypertext_markup_language_(HTML)">							hypertext markup language					</a><a name="XE_hypertext_markup_language__definition_in_glossary"></a></b>
</dt>
<dd>The basic language that is used to build hypertext documents on the World Wide Web. It is used in basic, plain ASCII-text documents, but when those documents are interpreted (called rendering) by a Web browser such as Netscape, the document can display formatted text, color, a variety of fonts, graphic images, special effects, hypertext jumps to other Internet locations, and information forms.</dd>
<dt>
<b><a name="I">							I					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="I/T">							I/T					</a><a name="XE_I/T__definition_in_glossary"></a></b>
</dt>
<dd>Information Technology</dd>
<dt>
<b><a name="IDE">							IDE					</a><a name="XE_IDE__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#integrated_development_environment_(IDE)">			integrated development environment</a></i>			
</dd>
<dt>
<b><a name="Idiom">							idiom					</a><a name="XE_idiom__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#BUS96"><i>BUS96</i></a>] 			defines idiom so: 			<blockquote>?An idiom is a low-level pattern specific to a programming 			language. An idiom describes how to implement particular aspects of 			components or the   relationships between them using the features of the 			given language.?</blockquote>			Also called an implementation pattern. When taking a concrete design expressed 			in UML, say, and implementing it in Java for example, recurring implementation 			patterns for that language may be used. Idioms thus span design and implementation.</dd>
<dt>
<b><a name="IE">							IE					</a><a name="XE_IE__definition_in_glossary"></a></b>
</dt>
<dd>Internet explorer (Microsoft)</dd>
<dt>
<b><a name="IEEE">							IEEE					</a><a name="XE_IEEE__definition_in_glossary"></a></b>
</dt>
<dd>The Institute of Electrical and Electronics Engineers, Inc.</dd>
<dt>
<b><a name="IIOP">							IIOP					</a><a name="XE_IIOP__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>			<a href="#Internet_Inter-ORB_Protocol_(IIOP)">internet inter-ORB protocol</a></i>
</dd>
<dt>
<b><a name="IMAP4">							IMAP4					</a><a name="XE_IMAP4__definition_in_glossary"></a></b>
</dt>
<dd>Internet Message Access Protocol - version 4</dd>
<dt>
<b><a name="implementation">							implementation					</a><a name="XE_implementation__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#discipline">discipline</a></i> in the 			software-engineering process, the purpose of which is to implement software 			components that meet an appropriate standard of quality.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A definition of how something is constructed or computed. For 				example, a class is an implementation of a type, a method is an 				implementation of an operation.</dd>
<dt>
<b><a name="implementation_inheritance">							implementation inheritance					</a><a name="XE_implementation_inheritance__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The inheritance of the implementation of a more specific element. Includes inheritance of the interface. Contrast: <i><a href="#interface_inheritance">interface inheritance</a>				</i>.</dd>
<dt>
<b><a name="implementation_mechanism">							implementation mechanism					</a><a name="XE_implementation_mechanism__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_mechanism">architectural mechanism</a>				</i> used during the implementation process. They are refinements of <i>					<a href="#design_mechanism">design mechanisms</a>				</i>, which specify the exact implementation of the mechanism, and which will also very likely employ several implementation patterns (idioms) in their construction. Again, there is not necessarily any difference in scale between the design mechanism and the implementation mechanism.				For example, one particular implementation of the inter-process communication analysis mechanism is a shared memory design mechanism utilizing a particular operating system's shared memory function calls. Concurrency conflicts (inappropriate simultaneous access to shared memory) may be prevented using semaphores, or using a latching mechanism, which in turn rest upon other implementation mechanisms.</dd>
<dt>
<b><a name="implementation_model">							implementation model					</a><a name="XE_implementation_model__definition_in_glossary"></a></b>
</dt>
<dd>The implementation model is a collection of <i>					<a href="#component">components</a>				</i>, and the <a href="#implementation_subsystem">					<i>implementation subsystems</i>				</a> that contain them.</dd>
<dt>
<b><a name="implementation_pattern">							implementation pattern					</a><a name="XE_implementation_pattern__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Idiom">					<i>idiom</i>				</a>				<a href="#Idiom">.</a>			
</dd>
<dt>
<b><a name="implementation_subsystem">							implementation subsystem					</a><a name="XE_implementation_subsystem__definition_in_glossary"></a></b>
</dt>
<dd>A collection of <i>					<a href="#component">components</a>				</i> and other implementation subsystems used to structure the <i>					<a href="#implementation_model">implementation model</a>				</i> by dividing it into smaller parts. Note that in the RUP, the implementation model and the implementation subsystems are the target of the <a href="#implementation_view">					<i>implementation view</i>				</a> and are, therefore, of primary importance at development time. It is the physical analogue of the <a href="#design_package">					<i>design package</i>				</a>. The name "implementation subsystem" reflects a common usage of the term "subsystem" to indicate something of a larger scale than a component. In UML terms, however, it's a stereotyped <a href="#package">					<i>package</i>				</a>, not a <a href="#subsystem">					<i>subsystem</i>				</a>.</dd>
<dt>
<b><a name="implementation_view">							implementation view					</a><a name="XE_implementation_view__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_view">architectural view</a>				</i> that describes the organization of the static software elements (code, data, and other accompanying artifacts) in the development environment in terms of both <i>					<a href="#package">packaging</a>				</i>, <a href="#layer">					<i>layering</i>				</a>, and <i>					<a href="#configuration_management">configuration management</a>				</i> (ownership, release strategy, and so on). In the Unified Process, it's a view on the <a href="#implementation_model">					<i>implementation model</i>				</a>.</dd>
<dt>
<b><a name="import">							import					</a><a name="XE_import__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> In the context of <i>					<a href="#package">packages</a>				</i>, a dependency that shows the packages whose <i>					<a href="#class">classes</a>				</i> may be referenced within a given package (including packages recursively embedded within it). Contrast: <i>					<a href="#export">export</a>				</i>.</dd>
<dt>
<b><a name="import-dependency">							import-dependency					</a><a name="XE_import-dependency__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#stereotype">stereotyped</a></i> dependency in 			the design whose source is a <i><a href="#design_package">design package</a></i>, 			and whose target is a different design package. The import dependency causes the 			public contents of the target package to be referenceable in the source package.</dd>
<dt>
<b><a name="inception">							inception					</a><a name="XE_inception__definition_in_glossary"></a></b>
</dt>
<dd>The first <i><a href="#phase">phase</a></i> of the Unified Process, 			in which the seed idea, request for proposal, for the previous generation is 			brought to the point of being (at least internally) funded to enter the 			<i><a href="#elaboration">elaboration</a></i> phase.</dd>
<dt>
<b><a name="include">							include					</a><a name="XE_include__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A relationship from a base use case to an inclusion use case, 				specifying how the behavior defined for the inclusion use case can be 				inserted into the behavior defined for the base use case.</dd>
<dt>
<b><a name="include-relationship">							include-relationship					</a><a name="XE_include-relationship__definition_in_glossary"></a></b>
</dt>
<dd>An include-relationship is a relationship from a base use case to 			an inclusion use case, specifying how the behavior defined for the inclusion 			use case is explicitly inserted into the behavior defined for the base use case.</dd>
<dt>
<b><a name="increment">							increment					</a><a name="XE_increment__definition_in_glossary"></a></b>
</dt>
<dd>The difference (<i>delta</i>) between two releases at the end  			of subsequent <i><a href="#iteration">iterations</a></i>.</dd>
<dt>
<b><a name="incremental">							incremental					</a><a name="XE_incremental__definition_in_glossary"></a></b>
</dt>
<dd>Qualifies an iterative development strategy in which the system is built by adding more and more functionality at each <i>					<a href="#iteration">iteration</a>				</i>.</dd>
<dt>
<b><a name="Index">							index					</a><a name="NO%20INDEX%20ENTRY"></a></b>
</dt>
<dd>A mechanism used to improve the efficiency of searches of rows in a database table.</dd>
<dt>
<b><a name="inheritance">							inheritance					</a><a name="XE_inheritance__definition_in_glossary"></a></b>
</dt>
<dd>The mechanism that makes generalization possible; a mechanism for creating full class descriptions out of individual class segments.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The mechanism by which more specific elements incorporate structure and behavior of more general elements related by behavior. See: <i>					<a href="#generalization">generalization</a>				</i>.</dd>
<dt>
<b><a name="input">							input					</a><a name="XE_input__definition_in_glossary"></a></b>
</dt>
<dd>(1) An <i>					<a href="#artifact">artifact</a>				</i> used by a process. See: <a href="#static_artifact">					<i>static artifact</i>				</a>.</dd>
<dd>(2) A value used in a given test that stimulates the execution condition to occur. Input values are defined in the <a href="#test_case">					<i>test case</i>				</a>.</dd>
<dt>
<b><a name="inspection">							inspection					</a><a name="XE_inspection__definition_in_glossary"></a></b>
</dt>
<dd>A formal evaluation technique in which some <i>					<a href="#artifact">artifact</a>				</i> (model, document, software) is examined by a person or group other than the originator, to detect faults, violations of development standards, and other problems.</dd>
<dt>
<b><a name="instance">							instance					</a><a name="XE_instance__definition_in_glossary"></a></b>
</dt>
<dd>An individual entity satisfying the description of a <i>					<a href="#class">class</a>				</i> or <i>					<a href="#type">type</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An entity to which a set of operations can be applied and which has a state that stores the effects of the operations. See: <i><a href="#object">object</a>				</i>.</dd>
<dt>
<b><a name="integrated_development_environment_(IDE)">							integrated development environment (IDE)					</a><a name="XE_integrated_development_environment__definition_in_glossary"></a></b>
</dt>
<dd>A software program comprising an editor, a compiler, and a debugger.</dd>
<dt>
<b><a name="integration">							integration					</a><a name="XE_integration__definition_in_glossary"></a></b>
</dt>
<dd>The software development activity in which separate software components are combined into an executable whole.</dd>
<dt>
<b><a name="integration-build_plan">							integration build plan					</a><a name="XE_Integration_Build_Plan__definition_in_glossary"></a></b>
</dt>
<dd>Defines the order in which components are to be implemented and integrated in a specific iteration. Typically enclosed within an <i>Iteration Plan</i>.</dd>
<dt>
<b><a name="interaction">							interaction					</a><a name="XE_interaction__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A specification of how stimuli are sent between <i>					<a href="#instance">instances</a>				</i> to perform a specific task. The interaction is defined in the context of a collaboration. See: <i>					<a href="#collaboration">collaboration</a>				</i>.</dd>
<dt>
<b><a name="interaction_diagram">							interaction diagram					</a><a name="XE_interaction_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A general term that applies to certain types of diagrams that 				emphasize object interactions. These include: 				<i>					<a href="#collaboration_diagram">collaboration diagrams</a> and 					<a href="#sequence_diagram">sequence diagrams</a>				</i>.			</dd>
<dt>
<b><a name="interface">							interface					</a><a name="XE_interface__definition_in_glossary"></a></b>
</dt>
<dd>A collection of <i>					<a href="#operation">operations</a>				</i> that are used to specify a service of a <i>					<a href="#class">class</a>				</i> or a <i>					<a href="#component">component</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A named set of operations that characterize the behavior of an element.</dd>
<dt>
<b><a name="interface_inheritance">							interface inheritance					</a><a name="XE_interface_inheritance__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The inheritance of the interface of a more specific element. Does not include inheritance of the implementation. Contrast: <i>					<a href="#implementation_inheritance">implementation inheritance</a>				</i>.</dd>
<dt>
<b><a name="internal_transition">							internal transition					</a><a name="XE_internal_transition__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i>					<a href="#transition">transition</a>				</i> signifying a response to an event without changing the <i>					<a href="#state">state</a>				</i> of an object.</dd>
<dt>
<b><a name="Internet">							Internet					</a><a name="XE_Internet__definition_in_glossary"></a></b>
</dt>
<dd>The vast collection of interconnected networks that all use the TCP/IP protocols and that evolved from the ARPANET of the late 1960s and early 1970s.</dd>
<dt>
<b><a name="Internet_Inter-ORB_Protocol_(IIOP)">							Internet Inter-ORB Protocol (IIOP)					</a><a name="XE_Internet_Inter-ORB_Protocol__definition_in_glossary"></a></b>
</dt>
<dd>An industry standard protocol that defines how General 			Inter-ORB Protocol (GIOP) messages are exchanged over a TCP/IP network. 			The IIOP makes it possible to use the Internet itself as a backbone ORB 			through which other ORBs can bridge.</dd>
<dt>
<b><a name="Internet_Protocol">							Internet Protocol (IP)					</a><a name="XE_Internet_Protocol_(IP)__definition_in_glossary"></a></b>
</dt>
<dd>The protocol that provides basic Internet functions.</dd>
<dt>
<b><a name="Internet_protocol_address">							internet protocol address					</a><a name="XE_Internet_protocol_address__definition_in_glossary"></a></b>
</dt>
<dd>A numeric address that uniquely identifies every computer connected to a network. For example, 123.45.67.8.</dd>
<dt>
<b><a name="intranet">							intranet					</a><a name="XE_intranet_class__definition_in_glossary"></a></b>
</dt>
<dd>A private network inside a company or organization that uses the same kinds of software that you would find on the public Internet, but that is only for internal use. As the Internet has become more popular, many of the tools used on the Internet are being used in private networks. For example, many companies have Web servers that are available only to employees.</dd>
<dt>
<b><a name="IP">							IP					</a><a name="XE_IP__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Internet_Protocol">					<i>internet protocol</i>				</a>			
</dd>
<dt>
<b><a name="IP_number">							IP number					</a><a name="XE_IP_number__definition_in_glossary"></a></b>
</dt>
<dd>An Internet address that is a unique number consisting of four parts separated by dots, sometimes called a dotted quad (for example, 123.45.67.8). Every Internet computer has an IP number, and most computers also have one or more domain names that are mappings or aliases for the dotted quad.</dd>
<dt>
<b><a name="IPSec">							IPSec					</a><a name="XE_IPSec__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#IP_Security_Protocol_(IPSec)">					<i>IP security protocol</i>				</a>			
</dd>
<dt>
<b><a name="IP_Security_Protocol_(IPSec)">							IP security protocol (IPSec)					</a><a name="XE_IP_Security_Protocol__definition_in_glossary"></a></b>
</dt>
<dd>Provides cryptographic security services at the network layer.</dd>
<dt>
<b><a name="ISAPI">							ISAPI					</a><a name="XE_ISAPI__definition_in_glossary"></a></b>
</dt>
<dd>Internet server <i><a href="#API">API</a></i>
</dd>
<dt>
<b><a name="ISO">							ISO					</a><a name="XE_ISO__definition_in_glossary"></a></b>
</dt>
<dd>International organization for standardization.</dd>
<dt>
<b><a name="ISP">							ISP					</a><a name="XE_ISP__definition_in_glossary"></a></b>
</dt>
<dd>Internet service provider. A company which provides other companies or individuals with access to, or presence on, the Internet. Most ISPs are also IAPs (Internet access providers).</dd>
<dt>
<b><a name="iteration">							iteration					</a><a name="XE_iteration__definition_in_glossary"></a></b>
</dt>
<dd>A distinct sequence of activities with a base-lined plan and valuation criteria resulting in a <a href="#release">					<i>release</i>				</a> (internal or external).</dd>
<dt>
<b><a name="J">							J					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="JAR">							JAR					</a><a name="XE_JAR__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#java_archive"><i>java archive (JAR)</i></a>			
</dd>
<dt>
<b><a name="Java">							Java					</a><a name="XE_Java__definition_in_glossary"></a></b>
</dt>
<dd>Java is a programming language invented by Sun Microsystems that is specifically designed for writing programs that can be safely downloaded to your computer through the Internet and immediately run without fear of viruses or other harm to your computer or files. Using small Java programs called applets, Web pages can include functions such as animations, calculators, and other fancy tricks. We can expect to see a huge variety of features added to the Web using Java, since you can write a Java program to do almost anything a regular computer program can do, and then include that Java program in a Web page.</dd>
<dt>
<b><a name="java_archive">							Java archive (JAR)					</a><a name="XE_Java_archive_(JAR)__definition_in_glossary"></a></b>
</dt>
<dd>A platform-independent file format that groups many files into one. JAR files are used for compression, reduced download time, and security. Because the JAR format is written in Java, JAR files are fully extensible.</dd>
<dt>
<b><a name="JavaBean">							javabean					</a><a name="XE_JavaBean__definition_in_glossary"></a></b>
</dt>
<dd>A javabean is a component that can be integrated into an application with other beans that were developed separately. This single application can be used stand-alone, within a browser and also as an ActiveX component. Javabeans are intended to be local to a single process and they are often visible at runtime. This visual component may be, for example, a button, list box, graphic or chart.</dd>
<dt>
<b><a name="Java_Database_Connectivity_(JDBC)">							Java database connectivity (JDBC)					</a><a name="XE_Java_Database_Connectivity__definition_in_glossary"></a></b>
</dt>
<dd>In JDK 1.1, the specification that defines an API that enables programs to access databases that comply with this standard.</dd>
<dt>
<b><a name="Java_Development_Kit_(JDK)">							Java development kit (JDK)					</a><a name="XE_Java_Development_Kit__definition_in_glossary"></a></b>
</dt>
<dd>The Java Development Kit is available to licensed developers from Sun Microsystems. Each release of the JDK contains the following: the Java Compiler, Java Virtual Machine, Java Class Libraries, Java Applet Viewer, Java Debugger, and other tools.</dd>
<dt>
<b><a name="Java_Foundation_Classes_(JFC)">							Java foundation class (JFC)					</a><a name="XE_Java_Foundation_Classes__definition_in_glossary"></a></b>
</dt>
<dd>Developed by Netscape, Sun, and IBM, JFCs are building blocks that are helpful in developing interfaces to Java applications. They allow Java applications to interact more completely with the existing operating systems.</dd>
<dt>
<b><a name="JDBC">							JDBC					</a><a name="XE_JDBC__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Java_Database_Connectivity_(JDBC)">					<i>Java database connectivity</i>				</a>			
</dd>
<dt>
<b><a name="JDK">							JDK					</a><a name="XE_JDK__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Java_Development_Kit_(JDK)">					<i>Java development kit</i>				</a>			
</dd>
<dt>
<b><a name="JFC">							JFC					</a><a name="XE_JFC__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Java_Foundation_Classes_(JFC)">					<i>Java foundation class</i>				</a>			
</dd>
<dt>
<b><a name="JIT">							JIT					</a><a name="XE_JIT__definition_in_glossary"></a></b>
</dt>
<dd>Just in time.</dd>
<dt>
<b><a name="JVM">							JVM					</a><a name="XE_JVM__definition_in_glossary"></a></b>
</dt>
<dd>Java virtual machine. A specification for software which interprets Java programs that have been compiled into byte-codes, and usually stored in a ".class" file. The JVM itself is written in C and so can be ported to run on most platforms. The JVM instruction set is stack-oriented, with variable instruction length. Unlike some other instruction sets, the JVM's support object-oriented programming directly by including instructions for object method invocation (similar to subroutine call in other instruction sets).</dd>
<dt>
<b><a name="K">							K					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="key_mechanism">							key mechanism					</a><a name="XE_key_mechanism__definition_in_glossary"></a></b>
</dt>
<dd>A description of how an <i>					<a href="#architectural_pattern">architectural pattern</a>				</i> is realized in terms of patterns of interaction between elements in the system. Typically presented in a <i>					<a href="#software_architecture">software architecture</a>				</i> document.</dd>
<dt>
<b><a name="keyword">							keyword					</a><a name="XE_keyword__definition_in_glossary"></a></b>
</dt>
<dd>A predefined word reserved for Java, for example, return, that may not be used as an identifier.</dd>
<dt>
<b><a name="L">							L					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="LAN">							LAN					</a><a name="XE_LAN__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Local_Area_Network_(LAN)">					<i>local area network</i></a>
</dd>
<dt>
<b><a name="layer">							layer					</a><a name="XE_layer__definition_of_layer_in_glossary"></a></b>
</dt>
<dd>A specific way of grouping <i>					<a href="#package">packages</a>				</i> in a model at the same level of abstraction.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The organization of classifiers or packages at the same level of abstraction. A layer represents a horizontal slice through an architecture, whereas a partition represents a vertical slice. Contrast: <i><a href="#partition">partition</a></i>.</dd>
<dt>
<b><a name="LDAP">							LDAP					</a><a name="XE_LDAP__definition_in_glossary"></a></b>
</dt>
<dd>Lightweight directory access protocol. A protocol for accessing on-line directory services, LDAP defines a relatively simple protocol for updating and searching directories running over <i>					<a href="#TCP/IP">TCP/IP</a>				</i>.</dd>
<dt>
<b><a name="lifecycle">							lifecycle					</a><a name="XE_lifecycle__definition_in_glossary"></a></b>
</dt>
<dd>One complete pass through the four phases: <i>					<a href="#inception">inception</a>				</i>, <i>					<a href="#elaboration">elaboration</a>				</i>, <i>					<a href="#construction">construction</a>				</i> and <i>					<a href="#transition">transition</a>				</i>. The span of time between the beginning of the inception phase and the end of the transition phase. Synonyms: <i>					<a href="#development_cycle">development cycle</a>, <a href="#cycle">cycle</a>				</i>. See also: <i>					<a href="#test_cycle">test cycle</a>				</i>.</dd>
<dt>
<b><a name="link">							link					</a><a name="XE_link__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic connection between two objects. An instance of an association. See: 					<i><a href="#association">association</a>.</i>			
</dd>
<dt>
<b><a name="link_end">							link end					</a><a name="XE_link_end__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An instance of an association end. See: <i>					<a href="#association_end">association end</a>				</i>.</dd>
<dt>
<b><a name="listener">							listener					</a><a name="XE_listener__definition_in_glossary"></a></b>
</dt>
<dd>In JDK 1.1, a class that receives and handles events.</dd>
<dt>
<b><a name="Local_Area_Network_(LAN)">							local area network (LAN)					</a><a name="XE_Local_Area_Network__definition_in_glossary"></a></b>
</dt>
<dd>A computer network located at a user's establishment within a limited geographical area. A LAN typically consists of one or more server machines providing services to a number of client workstations.</dd>
<dt>
<b><a name="logical_view">							logical view					</a><a name="XE_logical_view__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_view">architectural view</a>				</i> that describes the main classes in the design of the system: major business-related classes, and the classes that define key behavioral and structural mechanisms (persistency, communications, fault-tolerance, user-interface). In the Unified Process, the logical view is a <i>					<a href="#view">view</a>				</i> of the <i>					<a href="#design_model">design model</a>				</i>.</dd>
<dt>
<b><a name="M">							M					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="management">							management					</a><a name="XE_management__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#discipline">discipline</a>				</i> in the software-engineering process, whose purpose is to plan and manage the development project.</dd>
<dt>
<b><a name="marshal">							marshal					</a><a name="XE_marshal__definition_in_glossary"></a></b>
</dt>
<dd>Synonym: <a href="#deserialize">					<i>deserialize</i>				</a>.</dd>
<dt>
<b><a name="mechanism">							mechanism					</a><a name="XE_mechanism__definition_in_glossary"></a></b>
</dt>
<dd>A mechanism is an instance of a <a href="#pattern">					<i>pattern</i>				</a>. It may require some further refinement to become a collaboration in a particular model. A mechanism is thus a specific solution (to a recurring problem) in a single context. A mechanism can be said to fit or conform to a pattern. Any collaboration could be termed a mechanism, but the term is usually reserved for collaborations which deliver a solution to a commonly recurring problem in software applications, for example, to handle persistence, to which a pattern is applicable. In analysis and design, the notion of a mechanism can be used as a ?placeholder??having identified that persistence is needed for example, the analyst and designer can say that a persistence mechanism will be used, which will force that problem to be addressed systematically and consistently.</dd>
<dt>
<b><a name="message">							message					</a><a name="XE_message__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A specification of the conveyance of information from one instance to another, with the expectation that activity will ensue. A message may specify the raising of a signal or the call of an operation.</dd>
<dt>
<b><a name="messaging">							messaging					</a><a name="XE_messaging__definition_in_glossary"></a></b>
</dt>
<dd>A communication model whereby the distributed applications communicate by sending messages to each other. A message is typically a short packet of information that does not necessarily require a reply. Messaging implements asynchronous communications method. A fragment of Java code within a class that can be invoked and passed a set of parameters to perform a specific task.</dd>
<dt>
<b><a name="metaclass">							metaclass					</a><a name="XE_metaclass__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A class whose instances are classes. Metaclasses are typically used to construct 					<i><a href="#metamodel">metamodels</a>				</i>.</dd>
<dt>
<b><a name="meta-metamodel">							meta-metamodel					</a><a name="XE_meta-metamodel__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model that defines the language for expressing a 				<i><a href="#metamodel">metamodel</a></i>. The relationship between a 				meta-metamodel and a metamodel is analogous to the relationship between a 				metamodel and a <i><a href="#model">model</a></i>.</dd>
<dt>
<b><a name="metamodel">							metamodel					</a><a name="XE_metamodel__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model that defines the language for expressing a <i>					<a href="#model">model</a></i>.</dd>
<dt>
<b><a name="metaobject">							meta-object					</a><a name="XE_metaobject__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A generic term for all meta-entities in a metamodeling language. For example, metatypes, metaclasses, meta-attributes, and meta-associations.</dd>
<dt>
<b><a name="method">							method					</a><a name="XE_method__definition_in_glossary"></a></b>
</dt>
<dd>(1) A regular and systematic way of accomplishing something; the detailed, logically ordered plans or procedures followed to accomplish a task or attain a goal.</dd>
<dd>(2) UML 1.1: The implementation of an operation, the algorithm or procedure that effects the results of an operation.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The implementation of an operation. It specifies the algorithm or procedure associated with an operation</dd>
<dt>
<b><a name="method_call">							method call					</a><a name="XE_method_call__definition_in_glossary"></a></b>
</dt>
<dd>Synonym: <a href="#message">					<i>message</i>				</a>.</dd>
<dt>
<b><a name="MIB">							MIB					</a><a name="XE_MIB__definition_in_glossary"></a></b>
</dt>
<dd>Management Information Base</dd>
<dt>
<b><a name="milestone">							milestone					</a><a name="XE_milestone__definition_in_glossary"></a></b>
</dt>
<dd>The point at which an iteration formally ends; corresponds to a <i>					<a href="#release">release</a>				</i> point.</dd>
<dt>
<b><a name="MIME">							MIME					</a><a name="XE_MIME__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Multipurpose_Internet_Mail_Extension_(MIME)">					<i>multipurpose internet mail extension</i>				</a>			
</dd>
<dt>
<b><a name="model">							model					</a><a name="XE_model__definition_in_glossary"></a></b>
</dt>
<dd>A semantically closed abstraction of a system. In the Unified Process, a complete description of a system from a particular perspective ('complete' meaning you don't need any additional information to understand the system from that perspective); a set of model elements. Two models cannot overlap.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantically closed abstraction of a subject system. See: <i>					<a href="#system">system</a></i>.</dd>
<dd>Usage note: In the context of the MOF specification, which describes a <i>					<a href="#meta-metamodel">meta-metamodel</a>				</i>, for brevity the meta-metamodel is frequently referred to as simply the model.</dd>
<dt>
<b><a name="model_aspect">							model aspect					</a><a name="XE_model_aspect__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A dimension of modeling that emphasizes particular qualities of the <i>					<a href="#metamodel">metamodel</a></i>. For example, the structural model aspect emphasizes the structural qualities of the metamodel.</dd>
<dt>
<b><a name="model_elaboration">							model elaboration					</a><a name="XE_model_elaboration__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The process of generating a <i><a href="#repository">repository</a></i> type from a published model. Includes the generation of interfaces and implementations which allows repositories to be instantiated and populated based on, and in compliance with, the model elaborated.</dd>
<dt>
<b><a name="model_element">							model element					</a><a name="XE_model_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An element that is an abstraction drawn from the system being modeled. Contrast: 					<i><a href="#view_element">view element</a></i>.</dd>
<dd>In the MOF specification model elements are considered to be <i>					<a href="#metaobject">meta-objects</a></i>.</dd>
<dt>
<b><a name="modeling_conventions">							modeling conventions					</a><a name="XE_modeling_conventions__definition_in_glossary"></a></b>
</dt>
<dd>How concepts will be represented, restrictions on the 			modeling language that the project team management has decided upon; that 			is, dictums such as "Do not use inheritance between subsystems."; 			"Do not use extend or include associations in the Use Case Model."; 			"Do not use the friend construct in C++.". Presented in the 			<i>Software Architecture Document</i>.</dd>
<dt>
<b><a name="modeling_time">							modeling time					</a><a name="XE_modeling_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Refers to something that occurs during a modeling phase of 				the software development process. It includes analysis time and 				design time. Usage note: When discussing object systems, it is 				often important to distinguish between modeling-time and run-time 				concerns. See: <i><a href="#analysis_time">analysis time</a>, 				<a href="#design_time">design time</a>.</i> Contrast: 				<i><a href="#run_time">run time</a></i>.</dd>
<dt>
<b><a name="Model_View_Controller">							model viewcontroller (MVC)					</a><a name="XE_Model_View_Controller__definition_in_glossary,%20XE_MVC__definition_in_glossary"></a></b>
</dt>
<dd>An application architecture which separates the components of the application: the model represents the business logic or data; the view represents the user interface and the controller manages user input or, in some cases, the application flow.</dd>
<dt>
<b><a name="module">							module					</a><a name="XE_module__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A software unit of storage and manipulation. Modules include 				source code modules, binary code modules, and executable code modules. 				See: <i><a href="#component">component</a></i>.</dd>
<dt>
<b><a name="MOF">							MOF					</a><a name="XE_MOF__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An OMG-defined technology: the meta-object facility (MOF) specification defines a set of CORBA IDL interfaces that can be used to define and manipulate a set of interoperable metamodels and their corresponding models. These interoperable metamodels include the UML metamodel, the MOF meta-metamodel, as well as future OMG adopted technologies that will be specified using metamodels. The MOF provides the infrastructure for implementing CORBA-based design and reuse repositories. This definition is taken from the MOF specification version 1.3.</dd>
<dt>
<b><a name="MOM">							MOM					</a><a name="XE_MOM__definition_in_glossary"></a></b>
</dt>
<dd>Message-oriented middleware</dd>
<dt>
<b><a name="multiple_classification">							multiple classification					</a><a name="XE_multiple_classification__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic variation of <i><a href="#generalization">generalization</a>				</i> in which an object may belong directly to more than one class. See: 					<i><a href="#dynamic_classification">dynamic classification</a></i>.</dd>
<dt>
<b><a name="multiple_inheritance">							multiple inheritance					</a><a name="XE_multiple_inheritance__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic variation of <i><a href="#generalization">generalization</a></i>				 in which a type may have more than one 					<i><a href="#supertype">supertype</a></i>. Contrast: 					<i><a href="#single_inheritance">single inheritance</a></i>.</dd>
<dt>
<b><a name="multiplicity">							multiplicity					</a><a name="XE_multiplicity__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A specification of the range of allowable cardinalities that a set 				may assume. Multiplicity specifications may be given for roles within 				associations, parts within composites, repetitions, and other purposes. 				Essentially a multiplicity is a (possibly infinite) subset of the non-negative 				integers. Contrast: <i><a href="#cardinality">cardinality</a></i>.</dd>
<dt>
<b><a name="Multipurpose_Internet_Mail_Extension_(MIME)">							multipurpose internet mail extension (MIME)					</a><a name="XE_Multipurpose_Internet_Mail_Extension__definition_in_glossary"></a></b>
</dt>
<dd>The Internet standard for mail that supports text, images, audio, and video.</dd>
<dt>
<b><a name="multi-valued">							multi-valued					</a><a name="XE_multi-valued__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model element with <i><a href="#multiplicity">multiplicity</a></i>				 defined whose Multiplicity Type:: upper attribute is set to a number greater than one. The term multi-valued does not pertain to the number of values held by an attribute, parameter, and so on at any point in time. Contrast: 					<i><a href="#single_valued">single-valued</a></i>.</dd>
<dt>
<b><a name="mutator_methods">							mutator methods					</a><a name="XE_mutator_methods__definition_in_glossary"></a></b>
</dt>
<dd>Methods that an object provides to define the interface to its instance variables. The accessor method to return the value of an instance variable is called a get method or getter method, and the mutator method to assign a value to an instance variable is called a set method or setter method.</dd>
<dt>
<b><a name="MVC">							MVC					</a><a name="XE_MVC__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Model_View_Controller">					<i>model view controller</i>				</a>			
</dd>
<dt>
<b><a name="MVS">							MVS					</a><a name="XE_MVS__definition_in_glossary"></a></b>
</dt>
<dd>Multiple virtual storage</dd>
<dt>
<b><a name="N">							N					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="name">							name					</a><a name="XE_name__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A string used to identify a <i><a href="#model_element">model element</a></i>.</dd>
<dt>
<b><a name="namespace">							namespace					</a><a name="XE_namespace__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A part of the model in which the names may be defined and used. 				Within a namespace, each name has a unique meaning. 				See: <i><a href="#name">name</a></i>.</dd>
<dt>
<b><a name="n-ary_association">							n-ary association					</a><a name="XE_n-ary_association__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An association among three or more classes. Each instance of the association is an n-tuple of values from the respective classes. Contrast: 					<i><a href="#binary_association">binary association</a></i>.</dd>
<dt>
<b><a name="NC">							NC					</a><a name="XE_NC__definition_in_glossary"></a></b>
</dt>
<dd>Network Computer or Network Computing</dd>
<dt>
<b><a name="NCF">							NCF					</a><a name="XE_NCF__definition_in_glossary"></a></b>
</dt>
<dd>Network Computing Framework</dd>
<dt>
<b><a name="node">							node					</a><a name="XE_node__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A node is classifier that represents a run-time computational resource, which generally has at least a memory and often processing capability. Run-time objects and components may reside on nodes.</dd>
<dt>
<b><a name="NO_UNCHOR_TAG_ENTRY">							NO TERM ENTRY					</a><a name="NO%20INDEX%20ENTRY%20AVAILABLE"></a></b>
</dt>
<dt>
<b><a name="NSAPI">							NSAPI					</a><a name="XE_NSAPI__definition_in_glossary"></a></b>
</dt>
<dd>Netscape server API</dd>
<dt>
<b><a name="NT">							NT					</a><a name="XE_NT__definition_in_glossary"></a></b>
</dt>
<dd>Windows NT (New Technology)</dd>
<dt>
<b><a name="O">							O					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="object">							object					</a><a name="XE_object__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An entity with a well-defined boundary and identity that encapsulates 				<i><a href="#state">state</a></i> and <i><a href="#behavior">behavior</a></i>				. State is represented by <i><a href="#attribute">attributes</a></i> and 				<i>	<a href="#relationship">relationships</a></i>, behavior is represented by 				<i><a href="#operation">operations</a></i>, <i><a href="#method">methods</a></i>, and 				<i><a href="#state_machine">state machines</a></i>. An object is an instance 				of a class. See: <i><a href="#class">class</a>, <a href="#instance">instance</a></i>.</dd>
<dt>
<b><a name="object_class">							object class					</a><a name="XE_object_class__definition_in_glossary"></a></b>
</dt>
<dd>A template for defining the attributes and methods of an object. An object class can contain other object classes. An individual representation of an object class is called an object.</dd>
<dt>
<b><a name="object_diagram">							object diagram					</a><a name="XE_object_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that encompasses <i>					<a href="#object">objects</a>				</i> and their relationships at a point in time. An object diagram may be considered a special case of a class diagram or a collaboration diagram. See: 					<i><a href="#class_diagram">class diagram</a>, <a href="#collaboration_diagram">collaboration diagram</a>.</i>			
</dd>
<dt>
<b><a name="object_flow_state">							object flow state					</a><a name="XE_object_flow_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A <i><a href="#state">state</a></i> 				in an <i><a href="#activity_graph">activity graph</a></i> 				that represents the passing of an object from the output of actions in one state to the input of actions in another state.</dd>
<dt>
<b><a name="object_lifeline">							object lifeline					</a><a name="XE_object_lifeline__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A line in a sequence diagram that represents the existence of an object over a period of time. See: 					<i><a href="#sequence_diagram">sequence diagram</a></i>.</dd>
<dt>
<b><a name="object_model">							object model					</a><a name="XE_object_model__definition_in_glossary"></a></b>
</dt>
<dd>An abstraction of a system's implementation.</dd>
<dt>
<b><a name="object-oriented_programming_(OOP)">							object-oriented programming (OOP)					</a><a name="XE_object-oriented_programming__definition_in_glossary"></a></b>
</dt>
<dd>A programming approach based on the concepts of data abstraction 			and inheritance. Unlike procedural programming techniques, object-oriented 			programming concentrates on those data objects that constitute the problem 			and how they are manipulated, not on how something is accomplished.</dd>
<dt>
<b><a name="Object_Request_Broker_(ORB)">							object request broker (ORB)					</a><a name="XE_Object_Request_Broker__definition_in_glossary"></a></b>
</dt>
<dd>A CORBA term designating the means by which objects transparently 			make requests and receive responses from objects, whether they are local or remote.</dd>
<dt>
<b><a name="ODBC">							ODBC					</a><a name="XE_ODBC__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#Open_DataBase_Connectivity_(ODBC)">open database connectivity</a></i>			
</dd>
<dt>
<b><a name="ODBC_Driver">							ODBC driver					</a><a name="XE_ODBC_Driver__definition_in_glossary"></a></b>
</dt>
<dd>An ODBC driver is a dynamically linked library (DLL) that implements ODBC function calls and interacts with a data source.</dd>
<dt>
<b><a name="ODBC_Driver_Manager">							ODBC driver manager					</a><a name="XE_ODBC_Driver_Manager__definition_in_glossary"></a></b>
</dt>
<dd>The ODBC driver manager, provided by Microsoft, is a DLL with an import library. The primary purpose of the Driver Manager is to load ODBC drivers. The Driver Manager also provides entry points to ODBC functions for each driver and parameter validation and sequence validation for ODBC calls.</dd>
<dt>
<b><a name="OLTP">							OLTP					</a><a name="XE_OLTP__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#online_transaction_processing_(OLTP)">online transaction processing</a></i>
</dd>
<dt>
<b><a name="OMG">							OMG					</a><a name="XE_OMG__definition_in_glossary"></a></b>
</dt>
<dd>Object Management Group</dd>
<dt>
<b><a name="online_transaction_processing_(OLTP)">							online transaction processing (OLTP)					</a><a name="XE_online_transaction_processing__definition_in_glossary"></a></b>
</dt>
<dd>A style of computing that supports interactive applications in which requests submitted by terminal users are processed as soon as they are received. Results are returned to the requester in a relatively short period of time. An online transaction-processing system supervises the sharing of resources to allow efficient processing of multiple transactions at the same time.</dd>
<dt>
<b><a name="OO">							OO					</a><a name="XE_OO__definition_in_glossary"></a></b>
</dt>
<dd>Object oriented.</dd>
<dt>
<b><a name="OOP">							OOP					</a><a name="XE_OOP__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#object-oriented_programming_(OOP)">object-oriented programming</a></i>			
</dd>
<dt>
<b><a name="Open_DataBase_Connectivity_(ODBC)">							open database connectivity (ODBC)					</a><a name="XE_Open_DataBase_Connectivity__definition_in_glossary"></a></b>
</dt>
<dd>A Microsoft-developed C database application programming interface (API) that allows access to database management systems calling callable SQL, which does not require the use of a SQL preprocessor. In addition, ODBC provides an architecture that allows users to add modules called database drivers that link the application to their choice of database management systems at run time. This means applications no longer need to be directly linked to the modules of all the database management systems that are supported.</dd>
<dt>
<b><a name="operating_system_process">							operating system process					</a><a name="XE_operating_system_process__definition_in_glossary"></a></b>
</dt>
<dd>An unique address space and execution environment in which instances of classes and subsystems reside and run. The execution environment may be divided into one or more threads of control. See also: 				<i><a href="#process">process</a></i>				and <i><a href="#thread">thread</a></i>.</dd>
<dt>
<b><a name="operation">							operation					</a><a name="XE_operation__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A service that can be requested from an object to effect behavior. An operation has a 					<i><a href="#signature">signature</a></i>, which may restrict the actual parameters that are possible.</dd>
<dt>
<b><a name="ORB">							ORB					</a><a name="XE_ORB__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#Object_Request_Broker_(ORB)">object request broker</a></i>			
</dd>
<dt>
<b><a name="organization_unit">							organization unit					</a><a name="XE_organization_unit__definition_in_glossary"></a></b>
</dt>
<dd>Primary component of an organization, providing a context for its management. Organization structure relates a parent unit to its subsidiaries in a hierarchy, and each unit is responsible for collections of other business components [<a href="referenc.htm#MARS00"><i>MARS00</i></a>]. See: 					<i><a href="#business_system">business system</a></i>
</dd>
<dt>
<b><a name="originator">							originator					</a><a name="XE_originator__definition_in_glossary"></a></b>
</dt>
<dd>An originator is anyone who submits a 					<i><a href="#change_request_(CR)">change request</a></i> 				(CR). The standard change request mechanism requires the originator to provide information on the current problem, and a proposed solution in accordance with the change request form.</dd>
<dt>
<b><a name="output">							output					</a><a name="XE_output__definition_in_glossary"></a></b>
</dt>
<dd>(1) Any artifact that is the result of a process step. See: 					<i><a href="#deliverable">deliverable</a></i>.</dd>
<dd>(2) A raw outcome or product that results from a test having been conducted. Expected outputs are defined in the 					<i><a href="#test_case">test case</a></i>.</dd>
<dt>
<b><a name="outside_link">							outside link					</a><a name="XE_outside_link__definition_in_glossary"></a></b>
</dt>
<dd>Synonym: <i><a href="#external_link">external link</a></i>			
</dd>
<dt>
<b><a name="P">							P					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="package">							package					</a><a name="XE_package__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A general purpose mechanism for organizing elements into groups. Packages may be nested within other packages.</dd>
<dt>
<b><a name="palette">							palette					</a><a name="XE_palette__definition_in_glossary"></a></b>
</dt>
<dd>See: beans palette.</dd>
<dt>
<b><a name="parameter">							parameter					</a><a name="XE_parameter__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The specification of a variable that can be changed, passed, or returned. A parameter may include a name, type, and direction. Parameters are used for operations, messages, and events. Synonyms: 					<i><a href="#formal_parameter">formal parameter</a></i>. Contrast: 					<i><a href="#argument">argument</a></i>.</dd>
<dt>
<b><a name="parameter_connection">							parameter connection					</a><a name="XE_parameter_connection__definition_in_glossary"></a></b>
</dt>
<dd>A connection that satisfies a parameter of an action or method by supplying either a property's value or the return value of an action, method, or script. The parameter is always the source of the connection. See also: connection.</dd>
<dt>
<b><a name="parameterized_element">							parameterized element					</a><a name="XE_parameterized_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The descriptor for a class with one or more unbound parameters. Synonym: 					<i><a href="#template">template</a></i>.</dd>
<dt>
<b><a name="parent">							parent					</a><a name="XE_parent__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> In a <i><a href="#generalization">generalization</a></i> 				relationship, the generalization of another element, the child. See: 				<i><a href="#subclass">subclass</a></i>, <i><a href="#subtype">subtype</a></i>. Contrast: 				<i><a href="#child">child</a></i>.</dd>
<dt>
<b><a name="parent_class">							parent class					</a><a name="XE_parent_class__definition_in_glossary"></a></b>
</dt>
<dd>The class from which another bean or class inherits data, methods, or both.</dd>
<dt>
<b><a name="participates">							participates					</a><a name="XE_participates__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The connection of a model element to a relationship or to a reified relationship. For example, a class participates in an association, an actor participates in a use case.</dd>
<dt>
<b><a name="partition">							partition					</a><a name="XE_partition__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> (1) <i>					<a href="#activity_graph">activity graphs</a>				</i>: A portion of an activity graphs that organizes the responsibilities for actions. See also: <i>					<a href="#swimlane">swimlane</a>				</i>.</dd>
<dd>(2) <i>					<a href="#architecture">architecture</a>				</i>: A subset of classifiers or packages at the same level of abstraction. A partition represents a vertical slice through an architecture, whereas a layer represents a horizontal slice. Contrast: <a href="#layer">					<i>layer</i>				</a>.</dd>
<dt>
<b><a name="pattern">							pattern					</a><a name="XE_pattern__definition_in_glossary"></a></b>
</dt>
<dd>A solution template for a recurring problem that has proven useful in a given context. Good patterns successfully resolve the conflicting forces that define the problem, and one pattern is chosen over another based on the way it resolves those forces. To be worthy of being called a pattern, at least three practical applications of the pattern should already be evident. For software, the UML can support the representation of a pattern by using a parameterized collaboration although UML does not directly model other aspects of patterns such as lists of consequences of use, examples of use, and so on?text can be used for these. A software pattern is instantiated by binding values to its parameters. Patterns can exist at various scales and levels of abstraction, for example, as <a href="#architectural_pattern">					<i>architectural patterns</i>				</a>, <a href="#analysis_pattern">					<i>analysis patterns</i>				</a>, <a href="#design_pattern">					<i>design patterns</i>				</a>, <i>test patterns</i> and <a href="#Idiom">					<i>idioms</i>				</a> or <a href="#implementation_pattern">					<i>implementation patterns</i>				</a>.</dd>
<dt>
<b><a name="PCO">							PCO					</a><a name="XE_POC__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#point_of_control_and_observation">					<i>point of control and observation</i>				</a>			
</dd>
<dt>
<b><a name="PDR">							PDR					</a><a name="XE_PDR__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#preliminary_design_review_(PDR)">					<i>preliminary design review</i>				</a>			
</dd>
<dt>
<b><a name="PERL">							PERL					</a><a name="XE_PERL__definition_in_glossary"></a></b>
</dt>
<dd>Practical extraction &amp; reporting language.</dd>
<dt>
<b><a name="persistent_object">							persistent object					</a><a name="XE_persistent_object__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An object that exists after the process or thread that created it has ceased to exist.</dd>
<dt>
<b><a name="PGP">							PGP					</a><a name="XE_PGP__definition_in_glossary"></a></b>
</dt>
<dd>Pretty good privacy.</dd>
<dt>
<b><a name="phase">							phase					</a><a name="XE_phase__definition_in_glossary"></a></b>
</dt>
<dd>The time between two major project milestones, during which a well-defined set of objectives is met, artifacts are completed, and decisions are made to move or not move into the next phase.</dd>
<dt>
<b><a name="PKI">							PKI					</a><a name="XE_PKI__definition_in_glossary"></a></b>
</dt>
<dd>Public key infrastructure.</dd>
<dt>
<b><a name="point_of_control_and_observation">							point of control and observation					</a><a name="XE_point_of_control_and_observation__definition_in_glossary"></a></b>
</dt>
<dd>A specific point in the <a href="#test_procedure">					<i>procedural flow</i>				</a> of a test at which either an observation is recorded of the <a href="#test_environment">					<i>test environment</i>				</a>, or a decision is made regarding the test's flow of control. Closely related concepts, a point of control usually requires the details of one or more points of observations to make the necessary control decision.</dd>
<dt>
<b><a name="POP3">							POP3					</a><a name="XE_POP3__definition_in_glossary"></a></b>
</dt>
<dd>Post Office Protocol 3</dd>
<dt>
<b><a name="port">							port					</a><a name="XE_port__definition_in_glossary"></a></b>
</dt>
<dd>Ports are boundary objects, acting as interfaces through which messages are passed, for a <a href="#capsule">					<i>capsule</i>				</a> instance. Ports are "owned" by the capsule instance in the sense that they are created along with their capsule and destroyed when the capsule is destroyed. Each port has an identity and a state that are distinct from the identity and state of its owning capsule instance (to the same extent that any part is distinct from its container).</dd>
<dd>In TCP/IP terminology, a port is a separately addressable point to which an application can connect. For example, by default HTTP uses port 80 and Secure HTTP (HTTPS) uses port 443.</dd>
<dd>To modify (software) for use on a different machine or platform.</dd>
<dt>
<b><a name="postcondition">							postcondition					</a><a name="XE_postcondition__definition_in_glossary"></a></b>
</dt>
<dd>A textual description defining a constraint on the system when a use case has terminated.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A constraint that must be true at the completion of an operation.</dd>
<dt>
<b><a name="PRA">							PRA					</a><a name="XE_PRA__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Project_Review_Authority_(PRA)">					<i>project review authority</i>				</a>			
</dd>
<dt>
<b><a name="PRD">							PRD					</a><a name="XE_PRD__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#product_requirements_document_(PRD)">					<i>product requirements document</i>				</a>			
</dd>
<dt>
<b><a name="precondition">							precondition					</a><a name="XE_precondition__definition_in_glossary"></a></b>
</dt>
<dd>A textual description defining a constraint on the system when a use case may start.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A constraint that must be true when an operation is invoked.</dd>
<dt>
<b><a name="preliminary_design_review_(PDR)">							preliminary design review (PDR)					</a><a name="XE_preliminary_design_review_(PDR)__definition_in_glossary,%20XE_software_development_plan__traditional_reviews__preliminary_design_review_(PDR)__definition_in_glossary"></a></b>
</dt>
<dd>In the waterfall life cycle, the major review held when the architectural design is completed.</dd>
<dt>
<b><a name="primary_key">							primary key					</a><a name="XE_primary_key__definition_in_glossary"></a></b>
</dt>
<dd>Column or set of columns of a database table used to identify rows in the table. ;</dd>
<dt>
<b><a name="primitive_type">							primitive type					</a><a name="XE_primitive_type__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A predefined basic datatype without any substructure, such as an integer or a string.</dd>
<dt>
<b><a name="private">							private					</a><a name="XE_private__definition_in_glossary"></a></b>
</dt>
<dd>An access modifier associated with a class member. It allows only the class itself to access the member.</dd>
<dt>
<b><a name="process">							process					</a><a name="XE_process__definition_in_glossary"></a></b>
</dt>
<dd>(1) A thread of control that can logically execute concurrently with other processes, specifically an operating system process. See also: <a href="#thread">					<i>thread</i>				</a>.</dd>
<dd>(2) A set of partially ordered steps intended to reach a goal; in software engineering the goal is to build a software product or to enhance an existing one; in process engineering, the goal is to develop or enhance a process model; corresponds to a business use case in business engineering.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> (1) A heavyweight unit of concurrency and execution in an operating system. Contrast: <i>					<a href="#thread">thread</a>				</i>, which includes heavyweight and lightweight processes. If necessary, an implementation distinction can be made using stereotypes.</dd>
<dd>(2) A software development process?the steps and guidelines by which to develop a system.</dd>
<dd>(3) To execute an algorithm or otherwise handle something dynamically.</dd>
<dt>
<b><a name="processor">							processor					</a><a name="XE_processor__definition_in_glossary"></a></b>
</dt>
<dd>A type of node which possesses the capability to run one or more processes. Generally this requires a computational capability, memory, input-output devices, and so on. See also: <a href="#node">					<i>node</i>				</a>, <a href="#process">					<i>process</i>				</a>, and <i>					<a href="#device">device</a>				</i>.</dd>
<dt>
<b><a name="process_view">							process view					</a><a name="XE_process_view__definition_in_glossary"></a></b>
</dt>
<dd>An <i>					<a href="#architectural_view">architectural view</a>				</i> that describes the concurrent aspect of the system: tasks (processes) and their interactions.</dd>
<dt>
<b><a name="product">							product					</a><a name="XE_product__definition_in_glossary"></a></b>
</dt>
<dd>Software that is the result of development, and some of the associated <i>					<a href="#artifact">artifacts</a>				</i> (documentation, release medium, training).</dd>
<dt>
<b><a name="product_champion">							product champion					</a><a name="XE_product_champion__definition_in_glossary"></a></b>
</dt>
<dd>A high-ranking individual who is the sponsor for the 			<i><a href="#vision">vision</a></i> of the product and acts as an advocate 			between the development team and the <i><a href="#customer">customer</a></i>.</dd>
<dt>
<b><a name="product-line_architecture">							product-line architecture					</a><a name="XE_product-line_architecture__definition_in_glossary"></a></b>
</dt>
<dd>Defines element types, how they interact, and how the product functionality is mapped to them. It may also go further by defining some of the instances of the architecture elements. This term generally applies to a set of products within an organization or company. See also: [<a href="referenc.htm#HOF99"><i>HOF99</i></a>].</dd>
<dt>
<b><a name="product_requirements_document_(PRD)">							product requirements document (PRD)					</a><a name="XE_product_requirements_document_PRD__definition_in_glossary"></a></b>
</dt>
<dd>A high level description of the product (system), its intended use, and the set of <i>					<a href="#feature">features</a>				</i> it provides.</dd>
<dt>
<b><a name="project">							project					</a><a name="XE_project__definition_in_glossary"></a></b>
</dt>
<dd>Projects are performed by people, constrained by limited resources, and planned, executed, and controlled. A project is a temporary endeavor undertaken to create a unique product or service. Temporary means that every project has a definite beginning and a definite ending. Unique means that the product or service is different in some distinguishing way from all similar products and services. Projects are often critical components of the performing organizations' business strategy.</dd>
<dt>
<b><a name="projection">							projection					</a><a name="XE_projection__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A mapping from a set to a subset of it.</dd>
<dt>
<b><a name="project_manager">							project manager					</a><a name="XE_project_manager__definition_in_glossary"></a></b>
</dt>
<dd>The role with overall responsibility for the project. The Project Manager needs to ensure tasks are scheduled, allocated and completed in accordance with project schedules, budgets and quality requirements.</dd>
<dt>
<b><a name="Project_Review_Authority_(PRA)">							Project Review Authority (PRA)					</a><a name="XE_Project_Review_Authority_(PRA)__definition_in_glossary"></a></b>
</dt>
<dd>The organizational entity to which the Project Manager reports. The PRA is responsible for ensuring that a software project complies with policies, practices and standards.</dd>
<dt>
<b><a name="promotion">							promotion					</a><a name="XE_promotion__definition_in_glossary"></a></b>
</dt>
<dd>Within a JavaBean, to make features of a contained bean available to be used for making connections. For example, a bean consisting of three push buttons on a panel. If this bean is placed in a frame, the features of the push buttons would have to be promoted to make them available from within the frame.</dd>
<dt>
<b><a name="property">							property					</a><a name="XE_property__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A named value denoting a characteristic of an element. A property has semantic impact. Certain properties are predefined in the UML; others may be user defined. See: <i>					<a href="#tagged_value">tagged value</a>				</i>.</dd>
<dt>
<b><a name="property-to-property_connection">							property-to-property connection					</a><a name="XE_property-to-property_connection__definition_in_glossary"></a></b>
</dt>
<dd>A connection from a property of one object to a property of another object. See also: connection.</dd>
<dt>
<b><a name="protected">							protected					</a><a name="XE_protected__definition_in_glossary"></a></b>
</dt>
<dd>An access modifier associated with a class member. It allows the class itself, sub-classes, and all classes in the same package to access the member.</dd>
<dt>
<b><a name="protocol">							protocol					</a><a name="XE_protocol__definition_in_glossary"></a></b>
</dt>
<dd>A specification of a compatible set of messages used to 			communicate between <i><a href="#capsule">capsule</a></i>s. The protocol 			defines a set of incoming and outgoing messages types (for example, 			operations, signals), and optionally a set of sequence diagrams which define 			the required ordering of messages and a state machine which specifies the 			abstract behavior that the participants in a protocol must provide.</dd>
<dt>
<b><a name="Protocol_(TCP/IP)">							protocol (TCP/IP)					</a><a name="XE_Protocol_(TCP/IP)__definition_in_glossary"></a></b>
</dt>
<dd>The basic programming foundation that carries computer messages around the globe via the Internet. The suite of protocols that defines the Internet. Originally designed for the UNIX operating system, TCP/IP software is now available for every major kind of computer operating system. To be truly on the Internet, your computer must have TCP/IP software.</dd>
<dt>
<b><a name="prototype">							prototype					</a><a name="XE_prototype__definition_in_glossary"></a></b>
</dt>
<dd>A release that is not necessarily subject to <i>					<a href="#change_management">change management</a>				</i> and <i>					<a href="#configuration_management">configuration control</a>.</i>			
</dd>
<dt>
<b><a name="proxy">							proxy					</a><a name="XE_proxy__definition_in_glossary"></a></b>
</dt>
<dd>An application gateway from one network to another for a specific network application such as Telnet of FTP, for example, where a firewall's proxy Telnet server performs authentication of the user and then lets the traffic flow through the proxy as if it were not there. Function is performed in the firewall and not in the client workstation, causing more load in the firewall. Compare with socks.</dd>
<dt>
<b><a name="pseudo-state">							pseudo-state					</a><a name="XE_pseudo-state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A vertex in a state machine that has the form of a state, but doesn't behave as a state. Pseudo-states include initial and history vertices.</dd>
<dt>
<b><a name="published_model">							published model					</a><a name="XE_published_model__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model which has been frozen, and becomes available for instantiating repositories and for the support in defining other models. A frozen model's model elements cannot be changed.</dd>
<dt>
<b><a name="Q">							Q					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="QA">							QA					</a><a name="XE_QA__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#quality_assurance">					<i>quality assurance</i>				</a>			
</dd>
<dt>
<b><a name="QE">							QE					</a><a name="XE_QE__definition_in_glossary"></a></b>
</dt>
<dd>Quality Engineering. See also: <i>					<a href="#quality_assurance">quality assurance</a>				</i>			
</dd>
<dt>
<b><a name="qualifier">							qualifier					</a><a name="XE_qualifier__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An association attribute or tuple of attributes whose values partition the set of objects related to an object across an association.</dd>
<dt>
<b><a name="quality">							quality					</a><a name="XE_quality__definition_in_glossary"></a></b>
</dt>
<dd>The totality of features and characteristics of a product or service that bear on its ability to satisfy stated or implied needs.</dd>
<dt>
<b><a name="quality_assurance">							quality assurance(QA)					</a><a name="XE_quality_assurance_(QA)__definition_in_glossary"></a></b>
</dt>
<dd>All those planned and systematic actions necessary to provide adequate confidence that a product or service will satisfy given requirements for quality.</dd>
<dt>
<b><a name="quality_risk">							quality risk					</a><a name="XE_quality_risk__definition_in_glossary"></a></b>
</dt>
<dd>An upcoming or ongoing concern that has a significant probability of adversely affecting the quality of the software product. While the is arguably a limitless number of qulaity dimensions on which to assess quality risks, RUP uses the <i>					<a href="#FURPS">FURPS+</a>				</i> requirements model as a basis to discuss dimensions of quality.</dd>
<dt>
<b><a name="R">							R					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="race_condition">							race condition					</a><a name="XE_race_condition__definition_in_glossary"></a></b>
</dt>
<dd>A condition which occurs when two or more independent tasks simultaneously attempt to access and modify the same state information. This condition can lead to inconsistent behavior of the system and is a fundamental issue in concurrent system design.</dd>
<dt>
<b><a name="rank">							rank					</a><a name="XE_rank__definition_in_glossary"></a></b>
</dt>
<dd>An attribute of a <i><a href="#use-case_(class)">use case</a></i>, 			or <i><a href="#scenario">scenario</a></i> that describes its impact on the 			<i><a href="#architecture">architecture</a></i>, or its importance for a 			<i><a href="#release">release</a></i>.</dd>
<dt>
<b><a name="rational_process_workbench">							Rational process workbench (RPW)					</a><a name="XE_Rational_Process_Workbench_(RPW)__definition_in_glossary"></a></b>
</dt>
<dd>A process customization and publishing tool that enables process engineers to accelerate delivery of customized software development process, visually model process using Unified Modeling Language, and leverage the best practices captured in the RUP.</dd>
<dt>
<b><a name="RDBMS">							RDBMS					</a><a name="XE_RDBMS__definition_in_glossary"></a></b>
</dt>
<dd>Relational database management system.</dd>
<dt>
<b><a name="receive">							receive [a message]					</a><a name="XE_receive__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The handling of a stimulus passed from a sender instance. See: 				<i><a href="#sender">sender</a>, <a href="#receiver">receiver</a></i>.</dd>
<dt>
<b><a name="receiver">							receiver					</a><a name="XE_receiver__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The object handling a stimulus passed from a sender object. Contrast: <i>					<a href="#sender">sender</a>				</i>.</dd>
<dt>
<b><a name="reception">							reception					</a><a name="XE_reception__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A declaration that a classifier is prepared to react to the receipt of a signal.</dd>
<dt>
<b><a name="reference">							reference					</a><a name="XE_reference__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> (1) A denotation of a model element.</dd>
<dd>(2) A named slot within a classifier that facilitates navigation to other classifiers. Synonym: <i>pointer</i>.</dd>
<dt>
<b><a name="refinement">							refinement					</a><a name="XE_refinement__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A relationship that represents a fuller specification of something that has already been specified at a certain level of detail. For example, a design class is a refinement of an analysis class.</dd>
<dt>
<b><a name="relationship">							relationship					</a><a name="XE_relationship__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic connection among model elements. Examples of relationships include <i>					<a href="#association">associations</a>				</i> and <i>					<a href="#generalization">generalizations</a>				</i>.</dd>
<dt>
<b><a name="release">							release					</a><a name="XE_release__definition_in_glossary"></a></b>
</dt>
<dd>A subset of the end-product that is the object of evaluation at a major milestone. A release is a stable, executable version of product, together with any artifacts necessary to use this release, such as release notes or installation instructions. A release can be internal or external. An internal release is used only by the development organization, as part of a milestone, or for a demonstration to users or customers. An external release (or delivery) is delivered to end users. A release is not necessarily a complete product, but can just be one step along the way, with its usefulness measured only from an engineering perspective. Releases act as a forcing function that drives the development team to get closure at regular intervals, avoiding the "90% done, 90% remaining" syndrome. See also: <a href="#prototype">					<i>prototype</i>				</a>, <a href="#baseline">					<i>baseline</i>				</a>.</dd>
<dt>
<b><a name="release_manager">							release manager					</a><a name="XE_release_manager__definition_in_glossary"></a></b>
</dt>
<dd>A release manager is responsible for ensuring that all software assets are controlled and configurable into internal and external <i>					<a href="#release">releases</a>				</i> as required.</dd>
<dt>
<b><a name="Remote_Method_Invocation_(RMI)">							remote method invocation (RMI)					</a><a name="XE_Remote_Method_Invocation__definition_in_glossary"></a></b>
</dt>
<dd>In JDK 1.1, the API that allows you to write distributed Java programs, allowing methods of remote Java objects to be accessed from other Java virtual machines.</dd>
<dt>
<b><a name="Remote_Procedure_Call_(RPC)">							remote procedure call (RPC)					</a><a name="XE_Remote_Procedure_Call__definition_in_glossary"></a></b>
</dt>
<dd>A communication model where requests are made by function calls to distributed procedure elsewhere. The location of the procedures is transparent to the calling application.</dd>
<dt>
<b><a name="report">							report					</a><a name="XE_report__definition_in_glossary"></a></b>
</dt>
<dd>An automatically generated description, describing one or several <i>					<a href="#artifact">artifacts</a>				</i>. A report is not an artifact in itself. A report is in most cases a transitory product of the development process, and a vehicle to communicate certain aspects of the evolving system; it is a snapshot description of artifacts that are not documents themselves.</dd>
<dt>
<b><a name="repository">							repository					</a><a name="XE_repository__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A storage place for work products (artifacts) output during process enactment, such as requuirements, results (i.e. metrics), object models, interfaces, and implementations.</dd>
<dt>
<b><a name="requirement">							requirement					</a><a name="XE_requirement__definition_in_glossary"></a></b>
</dt>
<dd>A requirement describes a condition or capability to which a system must conform; either derived directly from user needs, or stated in a contract, standard, specification, or other formally imposed document. See: <a href="#software_requirement">					<i>software requirements</i>				</a>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A desired feature, property, or behavior of a system.</dd>
<dt>
<b><a name="requirement_attribute">							requirement attribute					</a><a name="XE_requirement_attribute__definition_in_glossary"></a></b>
</dt>
<dd>Information associated with a particular requirement providing a link between the requirement and other project elements?for example, priorities, schedules, status, design elements, resources, costs, hazards.</dd>
<dt>
<b><a name="requirements">							requirements					</a><a name="XE_requirements__definition_in_glossary"></a></b>
</dt>
<dd>A <a href="#discipline">					<i>discipline</i>				</a> in the software-engineering process, whose purpose is to define what the system should do. The most significant activities are to develop <a href="#vision">					<i>vision</i>				</a>, <a href="#use-case_model">					<i>use-case model</i>				</a>, and <i>supplementary specification</i> artifacts.</dd>
<dt>
<b><a name="requirements_management">							requirements management					</a><a name="XE_requirements_management__definition_in_glossary"></a></b>
</dt>
<dd>A systematic approach to eliciting, organizing and documenting the <a href="#software_requirement">					<i>software requirements</i>				</a> of the system, and establishing and maintaining agreement between the customer and the project team on changes to those requirements.</dd>
<dt>
<b><a name="requirements_tracing">							requirements tracing					</a><a name="XE_requirements_tracing__definition_in_glossary"></a></b>
</dt>
<dd>The linking of a <i>					<a href="#requirement">requirement</a>				</i> to other requirements and to other artifacts and their associated project elements.</dd>
<dt>
<b><a name="requirement_type">							requirement type					</a><a name="XE_requirement_type__definition_in_glossary"></a></b>
</dt>
<dd>A categorization of requirements based on common characteristics and attributes. Sometime requirement types are based on the requirement source or area of effect?for example, stakeholder need, feature, use case, supplementary requirement, documentation requirement, hardware requirement, software requirement, and so on. Requirements may also be categorized based on the dimension of software quality that they represent?for example, <a href="#FURPS">					<i>FURPS+</i>				</a>.</dd>
<dt>
<b><a name="resource_file">							resource file					</a><a name="XE_resource_file__definition_in_glossary"></a></b>
</dt>
<dd>A file that is referred to from your Java program. Examples include graphics and audio files.</dd>
<dt>
<b><a name="responsibility">							responsibility					</a><a name="XE_responsibility__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A contract or obligation of a classifier.</dd>
<dt>
<b><a name="result">							result					</a><a name="XE_result__definition_in_glossary"></a></b>
</dt>
<dd>Synonym of output. See also: <a href="#deliverable">					<i>deliverable</i>				</a>.</dd>
<dt>
<b><a name="resurrect">							resurrect					</a><a name="XE_resurrect__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#deserialize">					<i>deserialize</i>				</a>.</dd>
<dt>
<b><a name="reuse">							reuse					</a><a name="XE_reuse__definition_in_glossary"></a></b>
</dt>
<dd>Further use or repeated use of an <i>					<a href="#artifact">artifact</a>				</i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The use of a pre-existing artifact.</dd>
<dt>
<b><a name="review">							review					</a><a name="XE_review__definition_in_glossary"></a></b>
</dt>
<dd>A review is a group activity carried out to discover potential defects and to assess the quality of a set of <i>					<a href="#artifact">artifacts</a>				</i>.</dd>
<dt>
<b><a name="RFC">							RFC					</a><a name="XE_Request_For_Change__definition_in_glossary,%20XE_Request_For_Comment__definition_in_glossary"></a></b>
</dt>
<dd>(1) Request for change. A buyer or seller request to spend contract funds on an engineering change proposal for a change. The request states the technical or contractual issue being addressed, the impact on or benefit to the project, and an assessment of the cost and schedule impact.			</dd>
<dd>(2) Request for comment. Internet Standards are defined in documents known as RFCs.</dd>
<dt>
<b><a name="RFI">							RFI					</a><a name="XE_Request_For_Information__definition_in_glossary"></a></b>
</dt>
<dd>Request for information. A formal inquiry in the market place for information, typically concerning 'Expressions of Interest', capacity, capability and availability of contractors to undertake and bid on work described in the solicitation.</dd>
<dt>
<b><a name="RFP">							RFP					</a><a name="XE_Request_For_Proposal__definition_in_glossary"></a></b>
</dt>
<dd>Request for proposal. A formal invitation containing a scope of work which seeks a formal response (proposal) describing both methodology and compensation to form the basis of a contract.</dd>
<dt>
<b><a name="RFQ">							RFQ					</a><a name="XE_Request_For_Quotation__definition_in_glossary"></a></b>
</dt>
<dd>Request for quotation. A formal invitation to submit a price for goods and/or services as specified.</dd>
<dt>
<b><a name="risk">							risk					</a><a name="XE_risk__definition_in_glossary"></a></b>
</dt>
<dd>An ongoing or upcoming concern that has a significant probability of adversely affecting the success of major milestones.</dd>
<dt>
<b><a name="RMI">							RMI					</a><a name="XE_RMI__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Remote_Method_Invocation_(RMI)">					<i>remote method invocation</i>				</a>			
</dd>
<dt>
<b><a name="RMI_compiler">							RMI compiler					</a><a name="XE_RMI_compiler__definition_in_glossary"></a></b>
</dt>
<dd>The compiler that generates stub and skeleton files that facilitate RMI communication. This compiler can be automatically invoked from the Tools menu item.</dd>
<dt>
<b><a name="RMI_registry">							RMI registry					</a><a name="XE_RMI_registry__definition_in_glossary"></a></b>
</dt>
<dd>A server program that allows remote clients to get a reference to a server bean.</dd>
<dt>
<b><a name="role">							role					</a><a name="L%20role,%20XE_role__definition_in_glossary"></a></b>
</dt>
<dd>A definition of the behavior and responsibilities of an individual, or a set of individuals working together as a team, within the context of a software engineering organization.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a>The named specific behavior of an entity participating in a particular context. A role may be static (for example, an association end) or dynamic (for example, a collaboration role).</dd>
<dt>
<b><a name="RPC">							RPC					</a><a name="XE_RPC__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Remote_Procedure_Call_(RPC)">					<i>remote procedure call</i>				</a>			
</dd>
<dt>
<b><a name="RPW">							RPW					</a><a name="XE_RPW__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#rational_process_workbench">					<i>Rational process workbench</i>				</a>			
</dd>
<dt>
<b><a name="RSA">							RSA					</a><a name="XE_RSA__definition_in_glossary"></a></b>
</dt>
<dd>Rivest-Shamir-Adleman algorithm</dd>
<dt>
<b><a name="run_time">							run time					</a><a name="XE_run_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The period of time during which a computer program executes. Contrast: <i>					<a href="#modeling_time">modeling time</a>				</i>.</dd>
<dt>
<b><a name="RUP">							RUP					</a><a name="XE_RUP__definition_in_glossary"></a></b>
</dt>
<dd>Rational Unified Process</dd>
<dt>
<b><a name="S">							S					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="S/MIME">							S/MIME					</a><a name="XE_S/MIME__definition_in_glossary"></a></b>
</dt>
<dd>Secure MIME</dd>
<dt>
<b><a name="sandbox">							sandbox					</a><a name="XE_sandbox__definition_in_glossary"></a></b>
</dt>
<dd>A restricted environment, provided by the Web browser, in which Java applets run. The sandbox offers them services and prevents them from doing anything naughty, such as doing file I/O or talking to strangers (servers other than the one from which the applet was loaded). The analogy of applets to children led to calling the environment in which they run the sandbox.</dd>
<dt>
<b><a name="SAP">							SAP					</a><a name="XE_Systems,_Applications,_and_Products__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>					<a href="#Systems_Applications_and_Products">systems, applications, and products (SAP)</a>				</i>			
</dd>
<dt>
<b><a name="scenario">							scenario					</a><a name="XE_scenario__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A specific sequence of actions that illustrates behaviors. A scenario 				may be used to illustrate an interaction or the execution of one or more 				use-case instances. See: <i><a href="#interaction">interaction</a></i>, 				<i><a href="#test_scenario">test scenario</a></i>.</dd>
<dt>
<b><a name="schema_[MOF]">							schema [MOF]					</a><a name="XE_schema__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				In the context of the MOF, a schema is analogous to a 				<i><a href="#package">package</a></i> which is a container of 				<i><a href="#model_element">model elements</a></i>. Schema corresponds 				to an MOF package. Contrast: <i><a href="#metamodel">metamodel</a></i>, 				package corresponds to an MOF package.</dd>
<dt>
<b><a name="scope_management">							scope management					</a><a name="XE_scope_management__definition_in_glossary"></a></b>
</dt>
<dd>The process of prioritizing and determining the set of requirements that can be implemented in a particular release cycle, based on the resources and time available. This process continues throughout the lifecycle of the project as changes occur. See also: <i>					<a href="#change_management">change management</a>				</i>.</dd>
<dt>
<b><a name="semantic_variation_point">							semantic variation point					</a><a name="XE_semantic_variation_point__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A point of variation in the semantics of a <i>					<a href="#metamodel">metamodel</a>				</i>. It provides an intentional degree of freedom for the interpretation of the metamodel semantics.</dd>
<dt>
<b><a name="send">							send					</a><a name="XE_send__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The passing of a stimulus from a sender instance to a receiver instance. See: <i>					<a href="#sender">sender</a>, <a href="#receiver">receiver</a>				</i>.</dd>
<dt>
<b><a name="sender">							sender					</a><a name="XE_sender__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The object passing a stimulus to a receiver object. Contrast: <i>					<a href="#receiver">receiver</a>				</i>.</dd>
<dt>
<b><a name="SEPA">							SEPA					</a><a name="XE_SEPA__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#Software_Engineering_Process_Authority_(SEPA)">					<i>software engineering process authority</i>				</a>			
</dd>
<dt>
<b><a name="sequence_diagram">							sequence diagram					</a><a name="XE_sequence_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A diagram that shows object interactions arranged in time sequence. 				In particular, it shows the objects participating in the interaction and 				the sequence of messages exchanged. Unlike a collaboration diagram, a 				sequence diagram includes time sequences but does not include object 				relationships. A sequence diagram can exist in a generic form (describes 				a general <i><a href="#scenario">scenario</a></i>) and in an instance 				form (describes one scenario instance). Sequence diagrams and collaboration 				diagrams express similar information, but show it in different ways. 				See: <i><a href="#collaboration_diagram">collaboration diagram</a></i>.</dd>
<dt>
<b><a name="serialize">							serialize					</a><a name="XE_serialize__definition_in_glossary"></a></b>
</dt>
<dd>Synonymous with <a href="#de-marshal">					<i>de-marshal</i>				</a>.</dd>
<dt>
<b><a name="server">							server					</a><a name="XE_server__definition_in_glossary"></a></b>
</dt>
<dd>A computer that provides services to multiple users or workstations in a network; for example, a file server, a print server, or a mail server.</dd>
<dt>
<b><a name="Service-Oriented_Architecture">							Service-Oriented Architecture (SOA)					</a><a name="XE_service_oriented_architecture__definition_in_glossary"></a></b>
</dt>
<dd>A service-oriented architecture is a conceptual description of a the structure of a software system in terms of its components and the services they provide, without regard for the underlying implementation of these components, services and connections between components.</dd>
<dt>
<b><a name="Servlets">							servlets					</a><a name="XE_Servlets__definition_in_glossary"></a></b>
</dt>
<dd>Servlets are Java objects which execute on the server in response to a browser request. They can either generate HTML or XML directly, or call a JSP to produce the output.</dd>
<dt>
<b><a name="SET">							SET					</a><a name="XE_SET__definition_in_glossary"></a></b>
</dt>
<dd>Secure electronic transaction</dd>
<dt>
<b><a name="SHTTP">							SHTTP					</a><a name="XE_SHTTP__definition_in_glossary"></a></b>
</dt>
<dd>Secure hypertext transfer protocol</dd>
<dt>
<b><a name="signal">							signal					</a><a name="XE_signal__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The specification of an asynchronous stimulus communicated between instances. Signals may have parameters.</dd>
<dt>
<b><a name="signature">							signature					</a><a name="XE_signature__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The name and parameters of a behavioral feature. A signature may include an optional returned parameter.</dd>
<dt>
<b><a name="single-byte_character_set">							single-byte character set					</a><a name="XE_single-byte_character_set__definition_in_glossary"></a></b>
</dt>
<dd>A set of characters in which each character is represented 			by a 1-byte code.</dd>
<dt>
<b><a name="single_inheritance">							single inheritance					</a><a name="XE_single_inheritance__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic variation of <i>					<a href="#generalization">generalization</a>				</i> in which a <i>					<a href="#type">type</a>				</i> may have only one <i>					<a href="#supertype">supertype</a>				</i>. Contrast: <a href="#multiple_inheritance">					<i>multiple inheritance</i>				</a>.</dd>
<dt>
<b><a name="single_valued">							single valued					</a><a name="XE_single_valued__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model element with <i><a href="#multiplicity">multiplicity</a></i> 				defined is single valued when its Multiplicity Type:: upper attribute is 				set to one. The term single-valued does not pertain to the number of 				values held by an attribute, parameter, and so on, at any point in time, 				since a single-valued attribute (for instance, with a multiplicity lower 				bound of zero) may have no value. Contrast: 				<i><a href="#multi-valued">multi-valued</a></i>.</dd>
<dt>
<b><a name="smoke_test">							smoke test					</a><a name="XE_smoke_test__definition_in_glossary"></a></b>
</dt>
<dd>A phrase used to describe a subset of tests?typically limited in number?that can be run against each software build to determine whether the software has regressed in form or function since a previous build. Synonyms: <i>build validation test</i>, <i>build verification test</i>, <i>build acceptance test</i>, <i>build regression test</i> and <i>sanity check</i>.</dd>
<dt>
<b><a name="SMTP">							SMTP					</a><a name="XE_SMTP__definition_in_glossary"></a></b>
</dt>
<dd>Simple mail transport protocol</dd>
<dt>
<b><a name="SNMP">							SNMP					</a><a name="XE_SNMP__definition_in_glossary"></a></b>
</dt>
<dd>Simple Network Management Protocol</dd>
<dt>
<b><a name="soap-opera_testing">							soap-opera testing					</a><a name="XE_soap_opera_testing__definition_in_glossary,%20XE_test__soap_opera_testing__definition_in_glossary"></a></b>
</dt>
<dd>A technique for defining test scenarios by reasoning about 			dramatic and exaggerated usage scenarios. Like a soap opera on television, 			these scenarios reflect "real life", but are condensed and 			exaggerated to depict dramatic instances of system use. When defined in 			collaboration with experienced users, soap operas help to test many 			functional aspects of a system quickly and?because they are not related 			directly to either the systems formal specifications, or to the systems 			features?they have a high rate of success in revealing important yet 			often unanticipated problems. The definition of this term and the associated 			technique were developed by Hans Buwalda during his test consultancy experience 			with customers.</dd>
<dt>
<b><a name="Socket_Secure_(SOCKS)">							socket secure (SOCKS)					</a><a name="XE_Socket_Secure__definition_in_glossary"></a></b>
</dt>
<dd>The gateway that allows compliant client code (client code 			made socket secure) to establish a session with a remote host.</dd>
<dt>
<b><a name="SOCKS">							SOCKS					</a><a name="XE_SOCKS__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#Socket_Secure_(SOCKS)">socket secure</a></i>.</dd>
<dt>
<b><a name="software_architecture">							software architecture					</a><a name="XE_software_architecture__definition_in_glossary"></a></b>
</dt>
<dd>Software architecture encompasses: 							the significant decisions about the organization of a software system				the selection of the structural elements and their interfaces by which 				the system is composed together with their behavior as specified in the 				collaboration among those elements				the composition of the structural and behavioral elements into 				progressively larger subsystems				the architectural style that guides this organization, these elements 				and their interfaces, their collaborations, and their composition						</dd>
<dd>Software architecture is not only concerned with structure and 			behavior, but also with usage, functionality, performance, resilience, reuse, 			comprehensibility, economic and technology constraints and tradeoffs, 			and aesthetic concerns.</dd>
<dt>
<b><a name="Software_Engineering_Process_Authority_(SEPA)">							Software Engineering Process Authority (SEPA)					</a><a name="XE_Software_Engineering_Process_Authority_(SEPA)__definition_in_glossary"></a></b>
</dt>
<dd>The organizational entity with responsibility for process 			definition, assessment and improvement.</dd>
<dt>
<b><a name="software_requirement">							software requirement					</a><a name="XE_software_requirement__definition_in_glossary"></a></b>
</dt>
<dd>A specification of an externally observable behavior of the system; for example, inputs to the system, outputs from the system, functions of the system, attributes of the system, or attributes of the system environment.</dd>
<dt>
<b><a name="software_requirements_specifications_(SRS)">							software requirements specifications (SRS)					</a><a name="XE_software_requirements_specifications_SRS__definition_in_glossary"></a></b>
</dt>
<dd>A set of requirements which completely defines the external behavior of the system to be built?sometimes called a functional specification.</dd>
<dt>
<b><a name="software_specification_review_(SSR)">							software specification review (SSR)					</a><a name="XE_software_specification_review_(SSR)__definition_in_glossary,%20XE_software_development_plan__traditional_reviews__software_specification_review_(SSR)__definition_in_glossary"></a></b>
</dt>
<dd>In the waterfall life cycle, the major review held when the 			software requirements specification is complete.</dd>
<dt>
<b><a name="specification">							specification					</a><a name="XE_specification__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A declarative description of what something is or does. 				Contrast: <i><a href="#implementation">implementation</a></i>.</dd>
<dt>
<b><a name="SQL">							SQL					</a><a name="XE_SQL__definition_in_glossary"></a></b>
</dt>
<dd>Structured query language.</dd>
<dt>
<b><a name="SRR">							SRR					</a><a name="XE_SRR__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#system_requirements_review_(SRR)">					system requirements review				</a></i>			
</dd>
<dt>
<b><a name="SRS">							SRS					</a><a name="XE_SRS__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#software_requirements_specifications_(SRS)">					software requirements specifications				</a></i>			
</dd>
<dt>
<b><a name="SSL">							SSL					</a><a name="XE_SSL__definition_in_glossary"></a></b>
</dt>
<dd>Secure sockets layer.</dd>
<dt>
<b><a name="SSR">							SSR					</a><a name="XE_SSR__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>			<a href="#software_specification_review_(SSR)">Software Specification Review</a></i>			
</dd>
<dt>
<b><a name="stakeholder">							stakeholder					</a><a name="XE_stakeholder__definition_in_glossary"></a></b>
</dt>
<dd>An individual who is who is materially affected by the 			outcome of the system.</dd>
<dt>
<b><a name="stakeholder_need">							stakeholder need					</a><a name="XE_stakeholder_need__definition_in_glossary"></a></b>
</dt>
<dd>The business or operational problem (opportunity) that must be fulfilled in order to justify purchase or use.</dd>
<dt>
<b><a name="stakeholder_request">							stakeholder request					</a><a name="XE_stakeholder_request__definition_in_glossary"></a></b>
</dt>
<dd>A request of various specialized types?for example, <i>					<a href="#change_request_(CR)">change request</a>				</i>, <i>					<a href="#enhancement_request">enhancement request</a>				</i>, request for a requirement change, <i>					<a href="#defect">defect</a>				</i>?from a <i>					<a href="#stakeholder">stakeholder</a>				</i>.</dd>
<dt>
<b><a name="Start_page">							start page					</a><a name="XE_Start_page__definition_in_glossary"></a></b>
</dt>
<dd>The first page a user sees when browsing a Web site. Synonyms: <i>default page</i>, <a href="#home_page">					<i>home page</i>				</a>.</dd>
<dt>
<b><a name="state">							state					</a><a name="XE_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A condition or situation during the life of an object during which it satisfies some condition, performs some activity, or waits for some event.</dd>
<dt>
<b><a name="statechart_diagram">							statechart diagram					</a><a name="XE_statechart_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows a state machine. See: <i>					<a href="#state_machine">state machine</a>				</i>.</dd>
<dt>
<b><a name="state_machine">							state machine					</a><a name="XE_state_machine__definition_in_glossary"></a></b>
</dt>
<dd>A state machine specifies the behavior of a <i>					<a href="#model_element">model element</a>				</i>, defining its response to events and the life cycle of the object.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A behavior that specifies the sequences of <i>					<a href="#state">states</a>				</i> that an object or an interaction goes through during its life in response to events, together with its responses and actions.</dd>
<dt>
<b><a name="static_artifact">							static artifact					</a><a name="XE_static_artifact__definition_in_glossary"></a></b>
</dt>
<dd>An artifact that is used, but not changed, by a process.</dd>
<dt>
<b><a name="static_classification">							static classification					</a><a name="XE_static_classification__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A semantic variation of <i>					<a href="#generalization">generalization</a>				</i> in which an object may not change type or may not change role. Contrast: <i>					<a href="#dynamic_classification">dynamic classification</a>				</i>.</dd>
<dt>
<b><a name="static_information">							static information					</a><a name="XE_static_information__definition_in_glossary"></a></b>
</dt>
<dd>Web files that do not change on every access.</dd>
<dt>
<b><a name="stereotype">							stereotype					</a><a name="XE_stereotype__definition_in_glossary"></a></b>
</dt>
<dd>A meta-classification of an element. Stereotypes have semantic implications which can be specified for every specific stereotype value. See the "UML Representation" attributes on the artifacts in RUP to see the predefined stereotypes that are recommended for in use in the RUP.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A new type of modeling element that extends the semantics of the metamodel. Stereotypes must be based on certain existing types or classes in the metamodel. Stereotypes may extend the semantics, but not the structure of pre-existing types and classes. Certain stereotypes are predefined in the UML, others may be user defined.</dd>
<dt>
<b><a name="stimulus">							stimulus					</a><a name="XE_stimulus__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				The passing of information from one instance to another, such as 				raising a <i><a href="#signal">signal</a></i> or invoking an 				<i><a href="#operation">operation</a></i>. The receipt of a signal 				is normally considered an <i><a href="#event">event</a></i>. See: 				<i><a href="#message">message</a></i>.</dd>
<dt>
<b><a name="stored_procedure">							stored procedure					</a><a name="XE_stored_procedure__definition_in_glossary"></a></b>
</dt>
<dd>A functional unit of code or script that is associated with 			the database.</dd>
<dt>
<b><a name="string">							string					</a><a name="XE_string__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A sequence of text characters. The details of string representation depend on implementation, and may include character sets that support international characters and graphics.</dd>
<dt>
<b><a name="structural_feature">							structural feature					</a><a name="XE_structural_feature__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A static feature of a <i><a href="#model_element">model element</a></i>, 				such as an <i><a href="#attribute">attribute</a></i>.</dd>
<dt>
<b><a name="structural_model_aspect">							structural model aspect					</a><a name="XE_structural_model_aspect__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A model aspect that emphasizes the structure of the objects in a system, 				including their <i><a href="#type">types</a></i>, 				<i><a href="#class">classes</a></i>, 				<i><a href="#relationship">relationships</a></i>, 				<i><a href="#attribute">attributes</a></i>, and 				<i><a href="#operation">operations</a></i>.</dd>
<dt>
<b><a name="stub">							stub					</a><a name="XE_stub__definition_in_glossary"></a></b>
</dt>
<dd>A component containing functionality for testing 			purposes. A stub is either a pure "dummy", just returning some predefined 			values, or it is "simulating" a more complex behavior.</dd>
<dt>
<b><a name="subactivity_state">							subactivity state					</a><a name="XE_subactivity_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A <i><a href="#state">state</a></i> in an 				<i><a href="#activity_graph">activity graph</a></i> that represents the 				execution of a non-atomic sequence of steps that has some duration.</dd>
<dt>
<b><a name="subclass">							subclass					</a><a name="XE_subclass__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				In a generalization relationship, the specialization of another class; 				the superclass. See: <i><a href="#generalization">generalization</a></i>. 				Contrast: <i><a href="#superclass">superclass</a></i>.</dd>
<dt>
<b><a name="submachine_state">							submachine state					</a><a name="XE_submachine_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A <i><a href="#state">state</a></i> in a <i><a href="#state_machine">state machine</a></i> 				which is equivalent to a <i><a href="#composite_state">composite state</a></i> 				but its contents are described by another state machine.</dd>
<dt>
<b><a name="substate">							substate					</a><a name="XE_substate__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A state that is part of a <i><a href="#composite_state">composite state</a></i>. 				See: <i><a href="#concurrent_substate">concurrent substate</a></i>, 				<i><a href="#disjoint_substate">disjoint substate</a></i>.</dd>
<dt>
<b><a name="subsystem">							subsystem					</a><a name="XE_subsystem__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#model_element">model element</a></i> which has 			the semantics of a <i><a href="#package">package</a></i>, such that it can 			contain other model elements, and a <i><a href="#class">class</a></i>, 			such that it has behavior. The behavior of the subsystem is provided by classes 			or other subsystems it contains. A subsystem realizes one or more interfaces, 			which define the behavior it can perform.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A subsystem is a grouping of model elements, of which some constitute a 				specification of the behavior offered by the other contained model elements. 				See also: <i><a href="#package">package</a>, <a href="#system">system</a></i>.</dd>
<dt>
<b><a name="subtype">							subtype					</a><a name="XE_subtype__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				In a generalization relationship, the specialization of another type; 				the supertype. See: <i><a href="#generalization">generalization</a></i>. 				Contrast: <i><a href="#supertype">supertype</a></i>.</dd>
<dt>
<b><a name="superclass">							superclass					</a><a name="XE_superclass__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				In a generalization relationship, the generalization of another class; 				the subclass. See: <i><a href="#generalization">generalization</a></i>. 				Contrast: <i><a href="#subclass">subclass</a></i>.</dd>
<dt>
<b><a name="supertype">							supertype					</a><a name="XE_supertype__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				In a generalization relationship, the generalization of another type; 				the subtype. See: <i><a href="#generalization">generalization</a></i>. 				Contrast: <i><a href="#subtype">subtype</a></i>.</dd>
<dt>
<b><a name="supplier">							supplier					</a><a name="XE_supplier__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A classifier that provides services that can be invoked by others. 				Contrast: <i><a href="#client">client</a></i>.</dd>
<dt>
<b><a name="swimlane">							swimlane					</a><a name="XE_swimlane__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A partition on a <i><a href="#activity_graph">activity diagram</a></i> 				for organizing the responsibilities for actions. Swimlanes typically 				correspond to organizational units in a business model. 				See: <i><a href="#partition">partition</a></i>.</dd>
<dt>
<b><a name="synchronous_action">							synchronous action					</a><a name="XE_synchronous_action__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A request where the sending object pauses to wait for results. Contrast: 				<i><a href="#asynchronous_action">asynchronous action</a></i>.</dd>
<dt>
<b><a name="synch_state">							synch state					</a><a name="XE_synch_state__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A vertex in a <i><a href="#state_machine">state machine</a></i> 				used for synchronizing the concurrent regions of a state machine.</dd>
<dt>
<b><a name="system">							system					</a><a name="XE_system__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> (1) A collection of connected units that are organized to accomplish a specific purpose. A system can be described by one or more models, possibly from different viewpoints. Synonym: physical system.</dd>
<dd>(2) A top-level subsystem.</dd>
<dt>
<b><a name="system_requirements_review_(SRR)">							system requirements review (SRR)					</a><a name="XE_system_requirements_review_(SRR)__definition_in_glossary,%20XE_software_development_plan__traditional_reviews__system_requirements_review_(SRR)__definition_in_glossary"></a></b>
</dt>
<dd>In the waterfall life cycle, the name of the major review held when the system specification is completed.</dd>
<dt>
<b><a name="Systems_Applications_and_Products">							Systems, Applications, and Products (SAP)					</a><a name="XE_Systems,_Applications,_and_Products__definition_in_glossary"></a></b>
</dt>
<dd>Originally "Systemanalyse und Programmentwicklung" and now named Systems, Applications, and Products in Data Processing, SAP supplies widely-used software for integrated business solutions.</dd>
<dt>
<b><a name="T">							T					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="table">							table					</a><a name="XE_table__definition_in_glossary"></a></b>
</dt>
<dd>Element of a database that represents a collection of information about a specific entity or topic.</dd>
<dt>
<b><a name="tablespace">							tablespace					</a><a name="XE_tablespace__definition_in_glossary"></a></b>
</dt>
<dd>A logical unit of storage in a database.</dd>
<dt>
<b><a name="tagged_value">							tagged value					</a><a name="XE_tagged_value__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The explicit definition of a property as a name-value pair. In a tagged value, the name is referred as the tag. Certain tags are predefined in the UML; others may be user defined. Tagged values are one of three extensibility mechanisms in UML. See: <i>					<a href="#constraint">constraint</a>, <a href="#stereotype">stereotype</a>				</i>.</dd>
<dt>
<b><a name="target-of-test">							target-of-test					</a><a name="XE_target-of-test__definition_in_glossary"></a></b>
</dt>
<dd>Synonym: <a href="#target_test_item">					<i>target test item</i>				</a>.</dd>
<dt>
<b><a name="target_test_item">							target test item					</a><a name="XE_test_item__definition_in_glossary"></a></b>
</dt>
<dd>An aspect of the developed product?typically software or hardware?which has been identified as a target of the testing effort. A target test item might be scoped at the level of an <a href="#operation">					<i>operation</i>				</a>, <a href="#interface">					<i>interface</i>				</a>, <a href="#feature">					<i>feature</i>				</a>, <a href="#component">					<i>component</i>				</a>, <a href="#implementation_subsystem">					<i>implementation subsystem</i>				</a>, or <a href="#system">					<i>system</i>				</a>; or it may be an external aspect of the system, such as an operating system or peripheral device (eg printer). Synonyms: <a href="#target-of-test">					<i>target-of-test</i>				</a>, <i>test item</i>.</dd>
<dt>
<b><a name="task">							task					</a><a name="XE_task__definition_in_glossary"></a></b>
</dt>
<dd>See: 			<i><a href="#operating_system_process">operating system process</a>, 			<a href="#process">process</a> and <a href="#thread">thread</a></i>.</dd>
<dt>
<b><a name="TCP">							TCP					</a><a name="XE_TCP__definition_in_glossary"></a></b>
</dt>
<dd>				
<i><a href="#Protocol_(TCP/IP)">Transmission Control Protocol</a></i>			
</dd>
<dt>
<b><a name="TCP/IP">							TCP/IP					</a><a name="XE_TCP/IP__definition_in_glossary"></a></b>
</dt>
<dd>				
<i><a href="#Protocol_(TCP/IP)">Transmission Control Protocol/Internet Protocol</a></i>			
</dd>
<dt>
<b><a name="team_leader">							team leader					</a><a name="XE_team_leader__definition_in_glossary"></a></b>
</dt>
<dd>The team leader is the interface between project management and developers. The team leader is responsible for ensuring that a task is allocated and monitored to completion. The team leader is responsible for ensuring that development staff follow project standards, and adhere to project schedules.</dd>
<dt>
<b><a name="technical_authority">							technical authority					</a><a name="XE_technical_authority__definition_in_glossary"></a></b>
</dt>
<dd>The project's technical authority has the authority and technical expertise to arbitrate on if, and how, a change request is to be implemented. The technical authority defines change tasks, and estimates the effort of engineering the work tasks, corresponding to a 					<i><a href="#change_request_(CR)">change request</a></i>.</dd>
<dt>
<b><a name="Telnet">							telnet					</a><a name="XE_Telnet__definition_in_glossary"></a></b>
</dt>
<dd>U.S. Department of Defense virtual terminal protocol.</dd>
<dt>
<b><a name="template">							template					</a><a name="XE_template__definition_in_glossary"></a></b>
</dt>
<dd>A predefined structure for an <i><a href="#artifact">artifact</a></i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> Synonym: <i>					<a href="#parameterized_element">parameterized software element</a>				</i>.</dd>
<dt>
<b><a name="test">							test					</a><a name="XE_test__definition_in_glossary"></a></b>
</dt>
<dd>(1) A <i>					<a href="#discipline">discipline</a>				</i> in the software-engineering process whose purpose is to integrate and test the system.</dd>
<dd>an instance of a given <a href="#test_case">					<i>test case</i>				</a>			
</dd>
<dd>To execute a test.</dd>
<dt>
<b><a name="testability">							testability					</a><a name="XE_testability__definition_in_glossary"></a></b>
</dt>
<dd>The ability for the <i><a href="#target_test_item">			target test items</a></i> to be appropriately tested: if the target item 			cannot have the required tests implemented against it, it is possibly lacking 			testability. Arguably, the two major aspects discussed in regard to 			testability are: 			1) the ability for the target test items to 			provide appropriate support for being tested and			  2) the suitability of the process and tools employed by the test team - 			and the specific strategy taken to applying them. See: 			<i>test interface</i>, <i>test approach</i>.</dd>
<dt>
<b><a name="test_case">							test case					</a><a name="XE_test_case__definition_in_glossary"></a></b>
</dt>
<dd>The specification (usually formal) of a set of test inputs, 			execution conditions, and expected results, identified for the purpose 			of making an evaluation of some particular aspect of a 			<i><a href="#target_test_item">target test item</a></i>. 			A test case differs from a <i><a href="#test_idea">test idea</a></i>, 			in that the test case is a more fully-formed specification of the test, 			describing what the test(s) that result form the test case will be 			required to do.</dd>
<dt>
<b><a name="test_coverage">							test coverage					</a><a name="XE_test_coverage__definition_in_glossary"></a></b>
</dt>
<dd>A term used generically to refer to how the extent of testing should be or has been measured. Typical approaches to measuring, the extent of testing include: considering the degree to which a given set of tests address the formal specifications specified test cases for a given <i>					<a href="#system">system</a>				</i> or <i>					<a href="#component">component</a>				</i>.</dd>
<dt>
<b><a name="test_cycle">							test cycle					</a><a name="XE_test_cycle__definition_in_glossary"></a></b>
</dt>
<dd>A period of test activity that includes amongst other things the execution and evaluation of tests. The span of time between the acceptance of a software <a href="#build">					<i>build</i>				</a> into the <a href="#test_environment">					<i>test environment</i>				</a>, when a build is made available for independent testing and, when the current period of testing activity on that build ends. The majority of iterations will contain at least one test cyle, although an iteration can contain from none to many test cycles.</dd>
<dt>
<b><a name="test_driver">							test driver					</a><a name="XE_test_driver__definition_in_glossary"></a></b>
</dt>
<dd>A software module or application used to invoke a test and, often, provide test data, control and monitor execution, and report test outcomes. A test driver sequences and controls the automated execution of one or more tests. Synonym: <i>					<a href="#test_suite">test suite</a>				</i>.</dd>
<dt>
<b><a name="test_environment">							test environment					</a><a name="XE_test_environment__definition_in_glossary"></a></b>
</dt>
<dd>A specific instance of a configuration of hardware and software established for the purpose of conducting tests under known and controlled conditions. See also: <i>					<a href="#deployment_environment">deployment environment</a>				</i>, <a href="#environment">					<i>environment</i>				</a>.</dd>
<dt>
<b><a name="test_escape">							test escape					</a><a name="XE_test_escape__definition_in_glossary"></a></b>
</dt>
<dd>A <i>					<a href="#fault">fault</a>				</i> or <i>					<a href="#defect">defect</a>				</i> that escapes detection during the enactment of the activities the test team conducts to detect defects which is discovered subsequently during downstream product use.</dd>
<dt>
<b><a name="test_idea">							test idea					</a><a name="XE_test_idea__definition_in_glossary"></a></b>
</dt>
<dd>A brief statement identifying a test that is potentially useful 			to conduct. The test idea typically represents an aspect of a given test: 			an input, an execution condition or an expected result, but often only 			addresses a single aspect of a test. A test idea differs from a 			<i><a href="#test_case">test case</a></i>, in that the test idea is an incomplete 			definition containing no specification of the test workings, only the essence of 			the idea behind the test. Synonym: <i><a href="#test_requirement">test requirement</a></i>. 			See also: <i><a href="#test_case">test case</a></i>.</dd>
<dt>
<b><a name="test_mission">							test mission					</a><a name="XE_test_mission__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#evalution_mission">evaluation mission</a></i>.</dd>
<dt>
<b><a name="test_motivator">							test motivator					</a><a name="XE_test_motivator__definition_in_glossary"></a></b>
</dt>
<dd>Something which provides an incentive to undertake tests; 			moves testers to action; impels them to test. Test motivators help to identify 			and make visible the things that will motivate testers to evaluate the 			appropriate aspects of a given executable software release: as a 			generalization, test motivators in RUP normally represent specific 			<i><a href="#quality_risk">quality risks</a></i> and are scoped within the context 			of an <i><a href="#evalution_mission">evaluation mission</a></i>.</dd>
<dt>
<b><a name="test_oracle">							test oracle					</a><a name="XE_test_oracle__definition_in_glossary"></a></b>
</dt>
<dd>A strategy for knowing whether a test passes or fails. The test oracle includes both the medium through which the output from the test can be observed, and the technique for interpreting what that medium exposes. It provides a means by which observed results can be evaluated against expected results.</dd>
<dt>
<b><a name="test_procedure">							test procedure					</a><a name="XE_test_procedure__definition_in_glossary"></a></b>
</dt>
<dd>The procedural aspect of a given test, usually a set of detailed 			instructions for the setup and step-by-step execution of one or more given 			<i><a href="#test_case">test cases</a></i>. The test procedure is captured in 			both test scenarios and test scripts. 			See: <i><a href="#test_scenario">test scenario</a>, <a href="#test_script">test script</a></i>.</dd>
<dt>
<b><a name="test_requirement">							test requirement					</a><a name="XE_test_idea__definition_in_glossary"></a></b>
</dt>
<dd>A requirement placed on the test effort that must be fulfilled 			the implementation and execution of one or more tests. This term has been 			superseded by the term <i><a href="#test_idea">test idea</a></i>.</dd>
<dt>
<b><a name="test_scenario">							test scenario					</a><a name="XE_test_scenario__definition_in_glossary"></a></b>
</dt>
<dd>A sequence of actions (execution conditions) that identifies 			behaviors of interest in the context of test execution. The test scenario 			provides a way to generalize equivalent classes of action sequences, where they 			are deemed equivalent based on characteristics such as ranges rather than 			specific data values. A test scenario describes behavior at a single level 			of scope, and relates to one or more behavioral instances at that level: 			for example, a test scenario can relate to one or more use-case instances, or 			it can relate to behavioral instances that span use-cases.			See: <i><a href="#scenario">scenario</a>, 			<a href="#use-case_instance">use-case instance</a>, 			<a href="#test_procedure">test procedure</a></i>.</dd>
<dt>
<b><a name="test_script">							test script					</a><a name="XE_test_script__definition_in_glossary"></a></b>
</dt>
<dd>A collection of step-by-step instructions that realize a test, enabling its execution. Test scripts may take the form of either documented textual instructions that are executed manually or computer readable instructions that enable automated test execution. See: <a href="#test_scenario">					<i>test scenario</i>				</a>, <a href="#test_procedure">					<i>test procedure</i>				</a>.</dd>
<dt>
<b><a name="test_suite">							test suite					</a><a name="XE_test_suite__definition_in_glossary"></a></b>
</dt>
<dd>A <a href="#package">					<i>package-like</i>				</a> artifact used to group collections of <a href="#test_script">					<i>test scripts</i>				</a>, both to sequence the execution of the tests and to provide a useful and related set of Test Log information from which Test Results can be determined.. Synonyms: <a href="#test_driver">					<i>test driver</i>				</a>, <i>shell script</i>.</dd>
<dt>
<b><a name="thin_client">							thin client					</a><a name="XE_thin_client__definition_in_glossary"></a></b>
</dt>
<dd>Thin client usually refers to a system that runs on a resource-constrained machine or that runs a small operating system. Thin clients don't require local system administration, and they execute Java applications delivered over the network</dd>
<dt>
<b><a name="thread">							thread					</a><a name="XE_thread__definition_in_glossary"></a></b>
</dt>
<dd>An independent computation executing within an the execution environment and address space defined by an enclosing operating system <a href="#process">					<i>process</i>				</a>. Also sometimes called a "lightweight process".</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A single path of execution through a program, a dynamic model, or some other representation of control flow. Also, a stereotype for the implementation of an active object as lightweight process. See: <a href="#process">					<i>process</i>				</a>.</dd>
<dt>
<b><a name="time">							time					</a><a name="XE_time__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A value representing an absolute or relative moment in time.</dd>
<dt>
<b><a name="timeboxing">							timeboxing					</a><a name="XE_timeboxing__definition_in_glossary"></a></b>
</dt>
<dd>The approach to the management of an iteration's schedule recommended in the RUP: having initially established the scope and schedule for an iteration, the project manager is encouraged to actively manage that scope (and the resources committed to the iteration) so as to meet the planned iteration end date, rather than slipping the end date to accommodate the originally planned scope, if development takes longer than planned. In the RUP, reduction of scope is preferred to addition of resources to manage a slipping schedule. The motivations for this approach are to make the results of an iteration visible to the stakeholders and to assess the iteration, so that the lessons learned may be applied to subsequent iterations.</dd>
<dt>
<b><a name="time_event">							time event					</a><a name="XE_time_event__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An event that denotes the time elapsed since the current state was entered. See: <i>					<a href="#event">event</a>				</i>.</dd>
<dt>
<b><a name="time_expression">							time expression					</a><a name="XE_time_expression__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An expression that resolves to an absolute or relative value of time.</dd>
<dt>
<b><a name="timing_mark">							timing mark					</a><a name="XE_timing_mark__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A denotation for the time at which an event or message occurs. Timing marks may be used in constraints.</dd>
<dt>
<b><a name="tool_mentor">							tool mentor					</a><a name="XE_tool_mentor__definition_in_glossary"></a></b>
</dt>
<dd>A description that provides practical guidance on how to perform specific process activities or steps using a specific software tool.</dd>
<dt>
<b><a name="trace">							trace					</a><a name="XE_trace__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A dependency that indicates a historical or process relationship between two elements that represent the same concept without specific rules for deriving one from the other.</dd>
<dt>
<b><a name="traceability">							traceability					</a><a name="XE_traceability__definition_in_glossary"></a></b>
</dt>
<dd>The ability to trace a project element to other related project elements, especially those related to <i>					<a href="#requirement">requirements</a>				</i>. ; Project elements involved in traceability are called <a href="#traceability_item">traceability items</a>.</dd>
<dt>
<b><a name="traceability_item">							traceability item					</a><a name="XE_traceability_item__definition_in_glossary"></a></b>
</dt>
<dd>Any project element which needs to be explicitly traced from another project element in order to keep track of the dependencies between them. ; With respect to Rational RequisitePro this definition can be rephrased as: any project element represented within RequisitePro by an instance of a RequisitePro requirement type.</dd>
<dt>
<b><a name="transaction">							transaction					</a><a name="XE_transaction__definition_in_glossary"></a></b>
</dt>
<dd>A unit of processing consisting of one or more application programs initiated by a single request. A transaction can require the initiation of one or more tasks for its execution.</dd>
<dt>
<b><a name="transaction_processing">							transaction processing					</a><a name="XE_transaction_processing__definition_in_glossary"></a></b>
</dt>
<dd>A style of computing that supports interactive applications in which requests submitted by users are processed as soon as they are received. Results are returned to the requester in a relatively short period of time. A transaction processing system supervises the sharing of resources for processing multiple transactions at the same time.</dd>
<dt>
<b><a name="transient_object">							transient object					</a><a name="XE_transient_object__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				An object that exists only during the execution of the process or 				thread that created it.</dd>
<dt>
<b><a name="transition">							transition					</a><a name="XE_transition__definition_in_glossary"></a></b>
</dt>
<dd>The fourth <i><a href="#phase">phase</a></i> of the process 			in which the software is turned over to the user community.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A relationship between two <i><a href="#state">states</a></i> 				indicating that an object in the first state will perform certain 				specified actions and enter the second state when a specified event 				occurs and specified conditions are satisfied. On such a change of 				state, the transition is said to <i><a href="#fire">fire</a></i>.</dd>
<dt>
<b><a name="trigger">							trigger					</a><a name="XE_trigger__definition_in_glossary"></a></b>
</dt>
<dd>With the exception of the initial <a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a>				<i><a href="#transition">transition</a></i>, all behavior in a 				<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a>				<i><a href="#state_machine">state machine</a></i> is triggered 				by the arrival of events on one of an object's interfaces. Therefore, 				a trigger defines those events from which interfaces will cause the 				transition to be taken. The trigger is associated with the interface 				on which the triggering event is expected to arrive. Moreover, a 				transition can have multiple triggers such that an event that satisfies 				any one of the triggers will cause the transition to be taken.</dd>
<dt>
<b><a name="trigger_(database)">							trigger (database)					</a><a name="NO%20INDEX%20ENTRY"></a></b>
</dt>
<dd>Code associated with a database that causes the database to perform a specific action or set of actions.</dd>
<dt>
<b><a name="type">							type					</a><a name="XE_type__definition_in_glossary"></a></b>
</dt>
<dd>Description of a set of entities which share common characteristics, relations, attributes, and semantics.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A stereotype of class that is used to specify a domain of instances (objects) together with the operations applicable to the objects. A type may not contain any methods. See: <i>					<a href="#class">class</a>, <a href="#instance">instance</a>				</i>. Contrast: <i><a href="#interface">interface</a></i>.</dd>
<dt>
<b><a name="type_expression">							type expression					</a><a name="XE_type_expression__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				An expression that evaluates to a reference to one or more 				<i><a href="#type">types</a></i>.</dd>
<dt>
<b><a name="U">							U					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="UI">							UI					</a><a name="XE_UI__definition_in_glossary"></a></b>
</dt>
<dd>See: <i><a href="#user_interface">user interface</a></i>
</dd>
<dt>
<b><a name="UML">							UML					</a><a name="XE_UML__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>			<a href="#Unified_Modeling_Language_(UML)">unified modeling language</a></i>
</dd>
<dt>
<b><a name="unicode">							unicode					</a><a name="XE_Unicode__definition_in_glossary"></a></b>
</dt>
<dd>A character coding system designed to support the interchange, processing, and display of the written texts of the diverse languages of the modern world. Unicode characters are typically encoded using 16-bit integral unsigned numbers.</dd>
<dt>
<b><a name="Unified_Modeling_Language_(UML)">							unified modeling language (UML)					</a><a name="XE_UML__definition_in_glossary"></a></b>
</dt>
<dd>A language for visualizing, specifying, constructing, and documenting the artifacts of a software-intensive system [<a href="referenc.htm#BOO98"><i>BOO98</i></a>]. See Unified Modeling Language [<a href="referenc.htm#UML01"><i>UML01</i></a>]. ; In the RUP Glossary, definitions from the Unified Modeling Language are indicated by the symbol ; <img height="16" width="13" src="images/uml.gif" border="0">.</dd>
<dt>
<b><a name="uniform_resource_locator_(URL)">							uniform resource locator (URL)					</a><a name="XE_uniform_resource_locator__definition_in_glossary"></a></b>
</dt>
<dd>A standard identifier for a resource on the World Wide Web, used by Web browsers to initiate a connection. The URL includes the communications protocol to use, the name of the server, and path information identifying the objects to be retrieved on the server.</dd>
<dt>
<b><a name="uninterpreted">							uninterpreted					</a><a name="XE_uninterpreted__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A placeholder for a type or types whose implementation is not specified by the UML. Every uninterpreted value has a corresponding string representation. See: <i>					<a href="#Common_Object_Request_Broker_Architecture_(CORBA)">any</a>				</i> [CORBA].</dd>
<dt>
<b><a name="URL">							URL					</a><a name="XE_URL__definition_in_glossary"></a></b>
</dt>
<dd>See: <i>			<a href="#uniform_resource_locator_(URL)">uniform resource locator</a></i>.</dd>
<dt>
<b><a name="usage">							usage					</a><a name="XE_usage__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A dependency in which one element (the <i>					<a href="#client">client</a>				</i>) requires the presence of another element (the <i>					<a href="#supplier">supplier</a>				</i>) for its correct functioning or implementation.</dd>
<dt>
<b><a name="use-case_(class)">							use case					</a><a name="XE_use_case__definition_in_glossary"></a></b>
</dt>
<dd>A description of system behavior, in terms of sequences of actions. 			A use case should yield an observable result of value to an 			<i><a href="#actor_instance">actor</a></i>. A use case contains all flows of events 			related to producing the "observable result of value", including alternate 			and exception flows.			More formally, a use case defines a set of 			<i><a href="#use-case_instance">use-case instances</a></i> or 			<i><a href="#scenario">scenarios</a></i>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The specification of a sequence of actions, including variants, 				that a system (or other entity) can perform, interacting with 				<i><a href="#actor_instance">actors</a></i> of the system. 				See: <i><a href="#use-case_instance">use-case instance</a>, 				<a href="#scenario">scenario</a></i>.</dd>
<dt>
<b><a name="use-case_diagram">							use-case diagram					</a><a name="XE_use-case_diagram__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A diagram that shows the relationships among 				<i><a href="#actor_class">actors</a></i> and 				<i><a href="#use-case_(class)">use cases</a></i> within a system.</dd>
<dt>
<b><a name="use-case_instance">							use-case instance					</a><a name="XE_use-case_instance__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> The performance of a sequence of actions being specified in a 				<i><a href="#use-case_(class)">use case</a></i>. An instance of a use case.				A use-case instance is a specific "end-to-end" concrete path through a 				use case?<i><a href="#actor_class">actors</a></i> are replaced by 				specific persons (actor instances), specific values and responses are given 				and only a single path is taken through one or more possible flows of the 				use case. See also: <i><a href="#scenario">scenario</a>, 				<a href="#test_scenario">test scenario</a></i>.</dd>
<dt>
<b><a name="use-case_model">							use-case model					</a><a name="XE_use-case_model__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A model that describes a system's functional 				<i><a href="#requirement">requirements</a></i> in terms of 				<i><a href="#use-case_(class)">use cases</a></i>.</dd>
<dt>
<b><a name="use-case_package">							use-case package					</a><a name="XE_use-case_package__definition_in_glossary"></a></b>
</dt>
<dd>A use-case package is a collection of use cases, actors, 			relationships, diagrams, and other packages; it is used to structure 			the use-case model by dividing it into smaller parts.</dd>
<dt>
<b><a name="use-case_realization">							use-case realization					</a><a name="XE_use-case_realization__definition_in_glossary"></a></b>
</dt>
<dd>A use-case realization describes how a particular use case is 			realized within the <i><a href="#design_model">design model</a></i>, in terms 			of collaborating objects.</dd>
<dt>
<b><a name="use-case_section">							use-case section					</a><a name="XE_use-case_section__definition_in_glossary"></a></b>
</dt>
<dd>A use-case section is any section of a use case, including 			preconditions, postconditions, subflows, steps, and text. Use-case sections 			can be used as <i><a href="#traceability_item">traceability items</a></i>.</dd>
<dt>
<b><a name="use-case_view">							use-case view					</a><a name="XE_use-case_view__definition_in_glossary"></a></b>
</dt>
<dd>An <i><a href="#architectural_view">architectural view</a></i> 			that describes how critical use cases are performed in the system, focusing 			mostly on architecturally significant components (objects, tasks, nodes). In the 			RUP, it is a view of the <i><a href="#use-case_model">use-case model</a></i>.</dd>
<dt>
<b><a name="user_interface">							user interface					</a><a name="XE_user_interface__definition_in_glossary"></a></b>
</dt>
<dd>(1) The hardware, or software, or both that enables a user to interact with a computer.</dd>
<dd>(2) The term user interface typically refers to the visual presentation and its underlying software with which a user interacts.</dd>
<dt>
<b><a name="utility">							utility					</a><a name="XE_utility__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A stereotype that groups global variables and procedures in the form of a class declaration. The utility attributes and operations become global variables and global procedures, respectively. A utility is not a fundamental modeling construct, but a programming convenience.</dd>
<dt>
<b><a name="V">							V					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="value">							value					</a><a name="XE_value__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> An element of a type domain.</dd>
<dt>
<b><a name="variable">							variable					</a><a name="XE_variable__definition_in_glossary"></a></b>
</dt>
<dd>(1) A storage place within an object for a data feature. The data feature is an object, such as number or date, stored as an attribute of the containing object.</dd>
<dd>(2) A bean that receives an identity at run time. A variable by itself contains no data or program logic; it must be connected such that it receives run-time identity from a bean elsewhere in the application.</dd>
<dt>
<b><a name="VB">							VB					</a><a name="XE_VB__definition_in_glossary"></a></b>
</dt>
<dd>The Visual Basic?a specialized version of <i>					<a href="#basic">BASIC</a>				</i> ?programming language and associated <i>					<a href="#IDE">IDE</a>				</i> created by Microsoft.</dd>
<dt>
<b><a name="version">							version					</a><a name="XE_version__definition_in_glossary"></a></b>
</dt>
<dd>A variant of some artifact; later versions of an artifact typically expand on earlier versions.</dd>
<dt>
<b><a name="vertex">							vertex					</a><a name="XE_vertex__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A source or a target for a transition in a state machine. A vertex can be either a state or a pseudo-state. See: <i>					<a href="#state">state</a>				</i>, <i>					<a href="#pseudo-state">pseudo-state</a>				</i>.</dd>
<dt>
<b><a name="view">							view					</a><a name="XE_view__definition_in_glossary"></a></b>
</dt>
<dd>A simplified description (an abstraction) of a model, which is seen from a given perspective or vantage point and omits entities that are not relevant to this perspective. See also: <a href="#architectural_view">					<i>architectural view</i>				</a>.</dd>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> A projection of a model, which is seen from a given perspective or vantage point and omits entities that are not relevant to this perspective.</dd>
<dt>
<b><a name="view_(database)">							view (database)					</a><a name="XE_database_view__definition_in_glossary"></a></b>
</dt>
<dd>A virtual table composed of column information from one or more 			physical tables in the database.</dd>
<dt>
<b><a name="view_element">							view element					</a><a name="XE_view_element__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A view element is a textual and/or graphical projection of a collection of 				<i><a href="#model_element">model elements</a></i>.</dd>
<dt>
<b><a name="view_projection">							view projection					</a><a name="XE_view_projection__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				A projection of <i><a href="#model_element">model elements</a></i> onto 				<i><a href="#view_element">view elements</a></i>. A view projection provides a 				location and a style for each view element.</dd>
<dt>
<b><a name="virtual_machine_(VM)">							virtual machine					</a><a name="XE_virtual_machine__definition_in_glossary"></a></b>
</dt>
<dd>A software program that executes other computer programs. It allows a 			physical machine, a computer, to behave as if it were another physical machine.</dd>
<dt>
<b><a name="visibility">							visibility					</a><a name="XE_visibility__definition_in_glossary"></a></b>
</dt>
<dd>				
<a href="#UML">					<img height="16" width="13" src="images/uml.gif" border="0">				</a> 				An enumeration whose value (public, protected, or private) denotes how the 				<i><a href="#model_element">model element</a></i> to which it refers may be 				seen outside its enclosing <i><a href="#namespace">namespace</a></i>.</dd>
<dt>
<b><a name="vision">							vision					</a><a name="XE_vision__definition_in_glossary"></a></b>
</dt>
<dd>The user's or <i><a href="#customer">customer's</a></i> 			view of the product to be developed, specified at the level of key 			<i><a href="#stakeholder_need">stakeholder needs</a></i> and 			<i><a href="#feature">features</a></i> of the system.</dd>
<dt>
<b><a name="visual_programming_tool">							visual programming tool					</a><a name="XE_visual_programming_tool__definition_in_glossary"></a></b>
</dt>
<dd>A tool that provides a means for specifying programs graphically. 			Application programmers write applications by manipulating graphical representations 			of components.</dd>
<dt>
<b><a name="VM">							VM					</a><a name="XE_VM__definition_in_glossary"></a></b>
</dt>
<dd>See: <a href="#virtual_machine_(VM)">					<i>virtual machine</i>				</a>			
</dd>
<dt>
<b><a name="VPN">							VPN					</a><a name="XE_VPN__definition_in_glossary"></a></b>
</dt>
<dd>Virtual private network.</dd>
<dt>
<b><a name="W">							W					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="waterfall_model">							waterfall model					</a><a name="XE_waterfall_model__definition_in_glossary"></a></b>
</dt>
<dd>[<a href="referenc.htm#IEEE90"><i>IEEE90</i></a>] defines the 			waterfall model as; 			<blockquote>"A model of the software development process in which the constituent 			activities, typically a concept phase, requirements phase, design phase, implementation 			phase, test phase, and installation and checkout phase, are performed in that order, 			possibly with overlap but with little or no iteration."</blockquote>			This definition applies in the RUP, with the substitution of the term "discipline" 			for "phase". In the RUP, the disciplines are named Business Modeling, Requirements, 			Analysis &amp; Design, Implementation, Test, and Deployment and in the waterfall model 			of development, these would occur only once, in sequence, with little or no overlap.</dd>
<dt>
<b><a name="web_application">							web application					</a><a name="XE_web_application__definition_in_glossary"></a></b>
</dt>
<dd>A system that uses the internet as the primary means of communication 			between the system users and the system. See also: <i><a href="#web_system">web system.</a></i>
</dd>
<dt>
<b><a name="web_browser">							web browser					</a><a name="XE_web_browser__definition_in_glossary"></a></b>
</dt>
<dd>A piece of software that runs on a client which allows a user to request 			and render <i><a href="#HTML">HTML</a></i> pages.</dd>
<dt>
<b><a name="web_server">							web server					</a><a name="XE_web_server__definition_in_glossary"></a></b>
</dt>
<dd>The server component of the World Wide Web. It is responsible for 			servicing requests for information from Web browsers. The information can be a file 			retrieved from the server's local disk or generated by a program called by the server 			to perform a specific application function.</dd>
<dt>
<b><a name="web_site">							web site					</a><a name="XE_web_site__definition_in_glossary"></a></b>
</dt>
<dd>A <i><a href="#web_system">web system</a></i> that is all on one server. 			Users navigate the Web site with a browser.</dd>
<dt>
<b><a name="web_system">							web system					</a><a name="XE_web_system__definition_in_glossary"></a></b>
</dt>
<dd>A hyper media system that contains pages of information that are 			linked to each other in the form of a graph, as opposed to being hierarchical 			or linear. A Web system can manifest itself as a Web server that can be accessed 			through a browser.</dd>
<dt>
<b><a name="Widget">							widget					</a><a name="XE_Widget__definition_in_glossary"></a></b>
</dt>
<dd>In this context, a generic term for something that can be put on 			a window such as a button, scrollbar, label, listbox, menu, or checkbox.</dd>
<dt>
<b><a name="windows_registry">							windows registry					</a><a name="XE_windows_registry__definition_in_glossary"></a></b>
</dt>
<dd>The Microsoft&reg; Windows&reg; registration database, used to store 			the configuration settings and user options for the software programs installed on 			a given PC.</dd>
<dt>
<b><a name="work_breakdown_structure">							work breakdown structure (WBS)					</a><a name="XE_work_breakdown_structure__definition_in_glossary"></a></b>
</dt>
<dd>The planning framework; a project decomposition into units of work from 			which cost, artifacts, and activities can be allocated and tracked.</dd>
<dt>
<b><a name="workflow">							workflow					</a><a name="XE_workflow__definition_in_glossary"></a></b>
</dt>
<dd>The sequence of activities performed in a business that produces a result 			of observable value to an individual actor of the business.</dd>
<dt>
<b><a name="workflow_detail">							workflow detail					</a><a name="XE_workflow_detail__definition_in_glossary"></a></b>
</dt>
<dd>A grouping of activities which are performed in close collaboration 			to accomplish some result. The activities are typically performed either in parallel 			or iteratively, with the output from one activity serving as the input to another activity. 			Workflow details are used to group activities to provide a higher level of abstraction 			and to improve the comprehensibility of workflows.</dd>
<dt>
<b><a name="workspace">							workspace					</a><a name="XE_workspace__definition_in_glossary"></a></b>
</dt>
<dd>The work area that contains all the code you are currently working on; 			that is, current editions. The workspace also contains the standard Java class 			libraries and other class libraries.</dd>
<dt>
<b><a name="workstation">							workstation					</a><a name="XE_workstation__definition_in_glossary"></a></b>
</dt>
<dd>A configuration of input/output equipment at which an operator works. 			A terminal or microcomputer, usually one that is connected to a mainframe or a 			network, at which a user can perform applications.</dd>
<dt>
<b><a name="World_Wide_Web">							World Wide Web (WWW or web)					</a><a name="XE_World_Wide_Web__definition_in_glossary"></a></b>
</dt>
<dd>A graphic hypertextual multimedia Internet service.</dd>
<dt>
<b><a name="WYSIWYG">							WYSIWYG					</a><a name="XE_WYSIWYG__definition_in_glossary"></a></b>
</dt>
<dd>What you see is what you get.</dd>
<dt>
<b><a name="X">							X					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="XML">							XML					</a><a name="XE_XML__definition_in_glossary"></a></b>
</dt>
<dd>Extensible markup language.</dd>
<dt>
<b><a name="XP">							XP					</a><a name="XE_XP__definition_in_glossary"></a></b>
</dt>
<dd>Extreme programming.</dd>
<dt>
<b><a name="Y">							Y					</a><a name=""></a></b>
</dt>
<dd></dd>
<dt>
<b><a name="Z">							Z					</a><a name=""></a></b>
</dt>
<dd></dd>
</dl>
</font>
</body>
</html>
