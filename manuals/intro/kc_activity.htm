
<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Key Concept: Activity</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

  <h1 class="banner"><a name="Top"></a>Key Concept: Activity</h1>

      
<h5>Topics:&nbsp;</h5>
<ul>
  <li>
    <a href="#Activities">Activity</a> 
  </li>
  <li>
    <a href="#Steps">Step</a> 
  </li>
</ul>
<h3><a name="Activities">Activity</a> <a target="_self" href="#Top"><img src="../../images/top.gif" border="0" width="26" height="20"></a></h3>

<p>Roles have activities that define the work they perform. An <b>activity</b> is something that a

role does that provides a meaningful result in the context of the project. See
<a href="../../process/activity/ac_ccvoc.htm">Activity: Capture a Common Vocabulary</a> for an example of an activity.</p>

<p align="center"><img border="0" src="images/wk_tree.gif" width="373" height="256"></p>

<p align="center" class="picturetext">A typical role, showing its activities

in the treebrowser</p>

<p><b>An activity is a unit of work</b> that an individual playing the described 
  role may be asked to perform. The activity has a <b>clear purpose</b>, usually 
  expressed in terms of creating or updating some artifacts, such as a model, 
  a class, or a plan. Every activity is assigned to a specific role. The granularity 
  of an activity is generally a few hours to a few days, it usually involves one 
  role, and affects one or only a small number of artifacts. An activity should 
  be usable as an element of planning and progress; if it is too small, it will 
  be neglected, and if it is too large, progress would have to be expressed in 
  terms of an activity’s parts.</p>

<p>Activities may be repeated several times on the same artifact, especially

when going from one iteration to another, refining and expanding the system, by

the same role, but not necessarily the same individual.</p>

<h3>

<a name="Steps">Steps</a> <a target="_self" href="#Top"><img src="../../images/top.gif" border="0" width="26" height="20"></a></h3>

<p>Activities are broken down into steps. Steps fall into three main categories:

<ul>

  <li><b>Thinking</b> steps: where the individual performing the role understands the nature

    of the task, gathers and examines the input artifacts, and formulates the

    outcome.</li>

  <li><b>Performing</b> steps: where the individual performing the

    role creates or updates

    some artifacts.</li>

  <li><b>Reviewing</b> steps: where the individual performing the role inspects the results

    against some criteria.</li>

</ul>

<p>Not all steps are necessarily performed each time an activity is invoked, so

they can be expressed in the form of alternate flows.</p>

<i>

<p class="example">Example of steps:</p></i>

<p class="example">The <i>Activity: Find use cases and actors</i> decomposes

into the steps:</p>

<blockquote>

  <blockquote>

    <ol>

      <li>Find actors</li>

      <li>Find use cases</li>

      <li>Describe how actors and use cases interact</li>

      <li>Package use-cases and actors</li>

      <li>Present the use-case model in use-case diagrams</li>

      <li>Develop a survey of the use-case model</li>

      <li>Evaluate your results</li>

    </ol>

  </blockquote>

</blockquote>

<p class="example">The finding part [steps 1 to 3] requires some thinking; the

performing part [steps 4 to 6] involves capturing the result in the use-case

model; the reviewing part [step 7] is where the individual performing the role evaluates the result to

assess completeness, robustness, intelligibility, or other qualities.</p>

<br>
<br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
  

</body>

</html>