<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Tool Mentor:&nbsp;Using Rational TestFactory to Measure and Evaluate Code-based Test Coverage on Rational Robot Test Scripts</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 


<h2 class="banner"><a name="Top"></a>Tool Mentor:&nbsp;<rpw name="PresentationName">Using 
  Rational TestFactory to Measure and Evaluate Code-based Test Coverage on Rational 
  Robot Test Scripts</rpw></h2>

<h3>Purpose</h3>
<p>This tool mentor describes how to use Rational TestFactory to measure and evaluate 
  code-based test coverage for Rational Robot Test Scripts that test an application 
  written in C++, Java, or Visual Basic, or that test a Java applet.</p>
<p>Related Rational Unified Process information: 
<ul>
  <li><a href="../../process/activity/ac_tst_asststefr.htm">Activity: Assess 
    and Improve Test Effort</a></li>
</ul>

<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_tst_exctstste.htm">Execute Test Suite</a></li>
<li><a href="../../process/activity/ac_tst_anltstflr.htm">Analyze Test Failure</a></li>
<li><a href="../../process/activity/ac_tst_dtrtstrsl.htm">Determine Test Results</a></li>
<li><a href="../../process/activity/ac_anlrntbhv.htm">Analyze Runtime Behavior</a></li>
</ul>
<br>
   
</p>

<h3>Overview</h3>
<p>You can use Rational Robot to implement Test Scripts, and then execute the 
  resulting Test Scripts as part of a Test Suite. While Robot does not have an 
  inbuilt feature to collect and analyze code-base test coverage, when you execute 
  the Robot Test Scripts using Rational TestFactory, TestFactory has the capability 
  of calculating code-based coverage metrics for the Robot Test Scripts.</p>
<p>This tool mentor is applicable when running Windows 98/2000/NT 4.0. 
<p>To use Rational TestFactory to evaluate code-based test coverage for Rational 
  Robot Test Scripts:</p>
<ol>
  <li><a href="#Implement test procedures">Record or program Test Scripts in Rational 
    Robot</a></li>
  <li><a href="#Play back script">Execute the Rational Robot Test Scripts in Rational 
    TestFactory</a></li>
  <li><a href="#Review code coverage values">Review code-based coverage data for 
    each Test Script</a></li>
</ol>
<h3>1.&nbsp;&nbsp; <a name="Implement test procedures">Record or program Test 
  Scripts in Rational Robot</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To record or program test scripts in Rational Robot, see <a href="../robot/tm_imtst.htm">Tool 
  Mentor:&nbsp;Implementing Test Scripts Using Rational Robot</a>. 
<p><b>Note:</b> For Rational TestFactory to calculate code-based coverage data 
  successfully for Rational Robot Test Scripts, each Test Script must start and 
  stop the application-under-test (AUT).</p>
<p><img src="../../images/HelpBook.gif" alt="Help icon" width="16" height="16">&nbsp;&nbsp; Refer to
the <i>Viewing code coverage for a Robot script </i>topic in Rational TestFactory
online Help.
<h3>2.&nbsp;&nbsp; <a name="Play back script">Execute the Rational Robot Test 
  Scripts in Rational TestFactory</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>To measure code-based coverage of an executed Test Script, the code of the 
  application-under-test (AUT) must contain instrumentation points. The instrumentation 
  points are counters that tally the parts of the code that a Test Script executes. 
  In Rational TestFactory, you can instrument either the object code or the source 
  code of the AUT. Regardless of the instrumentation method you use, TestFactory 
  maintains the integrity of your original source files or executable file.</p>
<p>When you execute Test Scripts in Rational TestFactory, two actions occur: 
<ul>
  <li>TestFactory passes each Test Script to Rational Robot to execute.</li>
  <li>As a Test Script executes, TestFactory monitors the instrumentation points 
    in the code to tally the code-based coverage information.</li>
</ul>
<p><img src="../../images/HelpBook.gif" alt="Help icon" width="16" height="16">&nbsp;&nbsp; Refer to
the following topics in Rational TestFactory online Help:
<ul>
  <li><i>Specifying information for a new project</i></li>
  <li><i>Instrumenting the application-under-test</i></li>
  <li><i>Run a single Test Script</i></li>
</ul>
<h3>3.&nbsp;&nbsp; <a name="Review code coverage values">Review code-based
coverage data for each script</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>After you execute Rational Robot Test Scripts in Rational TestFactory, the 
  code-based coverage data is available for you to review. For each Test Script, 
  TestFactory displays an overall code-based coverage value&#151;for both the 
  application (or applet) and all the additional instrumented files that the application 
  (or applet) calls. TestFactory also displays coverage information for each file 
  and subroutine in the application.</p>
<p>Rational TestFactory calculates the code-based test coverage value as the percent 
  of the source code that a Test Script touches, relative to <i>all</i> the source 
  code in the application-under-test. If you have access to the source files for 
  the application-under-test, you can use the Coverage Browser in TestFactory 
  to review the lines of source code that each Test Script covered&#151;examining 
  which source statements were executed and which were not.</p>
<p>You can also view the combined code-based coverage data for two or more Rational 
  Robot Test Scripts.</p>
<p><img src="../../images/HelpBook.gif" alt="Help icon" width="16" height="16">&nbsp;&nbsp; Refer to
the following topics in Rational TestFactory online Help:
<ul>
  <li><i>Review coverage results for a script</i></li>
  <li><i>View combined code coverage for multiple scripts</i></li>
  <li><i>Code coverage for scripts in a Java application or applet</i></li>
</ul>
<br>
<br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

