<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->
<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<title>Tool Mentor:&nbsp;Executing Test Suites Using Rational Robot</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">

</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 


<h2 class="banner"><a name="Top"></a>Tool Mentor:&nbsp;<rpw name="PresentationName">Executing Test 
  Suites Using Rational Robot</rpw> </h2>

<h3>Purpose</h3>
<p>This tool mentor describes how to use Rational Robot to execute Test Suites 
  (playing back one or more Test Scripts), and to analyze the results of the test 
  execution.</p>
<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_tst_exctstste.htm">Execute Test Suite</a></li>
<li><a href="../../process/activity/ac_untst.htm">Execute Developer Tests</a></li>
</ul>
<br>
   
</p>

<h3>Overview</h3>
<p>This tool mentor is applicable when running Microsoft Windows 98/2000/NT 4.0.</p>
<p>To execute the test scripts recorded or programmed using Rational Robot, play back the
test script. 
<ol>
  <li><a href="#PlayTheScriptBack">Play the script back</a></li>
  <li><a href="#Evaluate the execution of test">View the results in the TestManager log</a></li>
  <li><a href="#step three">Analyze verification point results with the Comparators</a></li>
</ol>

<h3>1. <a name="PlayTheScriptBack">Play the script back</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>When you play back a script, Rational Robot repeats your recorded actions and automates
the execution of the test. With automation, you can test each new build of your
application faster and more thoroughly than by testing it manually. This decreases testing
time and increases both coverage and overall consistency.</p>

<p>Test scripts are played back at several times during the test life cycle: 

<ul>
  <li><b>Test Implementation</b> &#151; Play back the scripts to verify that they work as
    intended, using the same build of the application-under-test that you used to record. This
    verifies the baseline of expected behavior for the application-under-test.</li>
  <li><b>Test Execution and Regression</b> &#151; Play back the scripts to compare the latest
    build of the application-under-test to the baseline established during test
    implementation. Ongoing play back of all test scripts during the development cycle reveals
    any differences that may have been introduced into the application since the last build.
    These differences can be evaluated to determine if they are actual defects or deliberate
    changes.</li>
</ul>

<p>Before playback, Rational Robot automatically compiles a Test Script if it 
  has changed since it last ran.</p>

<p>For information on preparing the test environment for Test Script playback, 
  see <a href="tm_tsten.htm">Tool Mentor: Setting up the Test Environment in Rational 
  Robot</a>.</p>


<p>To play back a Test Script: 
<ol>
  <li>Click the <b>Playback Script</b> button on the toolbar. The Playback dialog 
    box will appear.</li>
  <li>Type a Test Script name or select it from the list.</li>
</ol>

<blockquote>
  <p>To change the Playback options, click <b>GUI Options</b>.</p>
  <p>When finished, click <b>OK</b>. For 
    information on playback options, see <a href="tm_tsten.htm">Tool Mentor: Setting 
    up the Test Environment in Rational Robot</a>.</p>
</blockquote>

<ol start="3">
  <li>Click <b>OK</b> to continue.</li>
  <li>If the Specify Log Information dialog box appears, do the following:</li>
</ol>

<blockquote>
  <ul>
    <li>Select a Build from the list. To create a new Build, click the <b>Build</b> 
      button on the right.</li>
    <li>Select a Test Log folder from the list. To create a new Test Log folder, 
      click the <b>Log Folder</b> button on the right.</li>
    <li>Accept the default Test Log name, which is the same as the Test Script 
      name, or type a new name.</li>
    <li>Click <b>OK</b>.</li>
  </ul>
</blockquote>

<ol start="6">
  <li>If a prompt appears asking if you want to overwrite the log, click <b>Yes</b>.</li>
</ol>
<p> <b>Note</b>: To stop playback of a Test Script, press the F11 key. Rational 
  Robot recognizes the F11 key only when playing back Object-Oriented commands. 
  The F11 key does not stop Test Script playback during low-level actions.</p>

<h3>2. <a name="Evaluate the execution of test">View the results in the TestManager 
  Test Log</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>After playback completes, use the TestManager Test Log to view the playback 
  results, including verification point failures, procedural failures, aborts, 
  and any additional playback information.</p>

<p>To control the Test Log information and display of the Test Log, you can set 
  options in the Log tab in the GUI Playback Options dialog box: 
<ul>
  <li>To update your project with the playback results, select <b>Output playback results to
    log</b>.</li>
  <li>To display the log automatically after playback, select <b>View log after playback</b>.</li>
</ul>

<p>If this is not selected, you can display the Test Log after playback by clicking 
  <b> Tools &gt; Rational Test &gt; Rational TestManager</b>.</p>

<p>If the playback of the Test Scripts resulted in any errors, the specific cause 
  of the error must be identified.</p>

<p>Test Scripts which failed to execute sucessfully are identified in the Test 
  Log by the word <b>Fail</b> (shown in red) in the <b>Results 
  </b>column, or <b>Warning </b>(shown in yellow). There are several 
  classes of execution failure to be addressed: fatal errors, script errors, and 
  verification point failures. Fatal errors often indicate that there is a problems 
  with the Test Environment Configuration rather than the Test Script itself. 
  Investigate the Test Environment Configuration and isolate the failure and resolve 
  the corresponding fault. Resolving Test Script errors may require some Test 
  Script maintenance. Verification point failures (during test implementation) 
  typically require changes to the verification point parameters or indicate a 
  difference between the desired state of the Target Test Items when the script 
  was recorded versus when it was played back. See the next section for analyzing 
  verification points.</p>

<p>Additional information regarding the error condition may be viewed in the <b>Log 
  Event Properties </b>dialog box. Open this box by selecting a Test Log 
  event and clicking<b> View &gt; Properties</b>.</p>

<p>For each Test Script in which a failure (or warning) occurred, review the information 
  regarding the failure and if necessary, edit the Test Script (see <a href="#step three">Section 
  3. Edit the test script if necessary</a> above). The Test Script (and Rational 
  Robot) may be opened from the Test Log by clicking <b>View &gt; Script</b>.</p>

<p>After editing the Test Script, the environment should be re-set to its appropriate 
  initial state (<a href="tm_tsten.htm">see 
  Tool Mentor: Setting Up the Test Environment in Rational Robot</a>) and 
  the Test Suites re-executed (See step: <a href="#PlayTheScriptBack">Play the 
  script back</a>).</p>

<h3>3. <a name="step three">Analyze the verification point results with the Comparators </a><a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Use the Comparators to analyze verification point results. To open a Comparator 
  from the TestManager Test Log: 
<ol>
  <li>In the Log Event column, select a verification point and click <b>View &gt; Verification
    Point</b>. The appropriate Comparator will appear. The Comparators may also be opened from
    Rational Robot by double-clicking a verification point in the Asset pane. However, when
    you open a Comparator this way, you can view only the baseline file. </li>
  <li>Differences between the baseline and the actual results will be highlighted.</li>
  <li>Review the differences and determine the appropriate course of action, including:<br>
    (<b>Note</b>: the available actions will differ based upon the type of verification
    point.)</li>
</ol>

<blockquote>
  <ul>
    <li>Copy property to baseline &#151; copy the current individual actual property and
      over-write the baseline property.</li>
    <li>Copy all properties to baseline &#151; copy all the actual property values and
      over-write all the baseline properties.</li>
    <li>Edit individual property (menu, value, and so on) by double-clicking the property (menu,
      value, and so forth) and entering a different value.</li>
    <li>Editing the properties list (to identify which properties should be captured by the
      verification point).</li>
    <li>Create or modify masks.</li>
  </ul>
</blockquote>

<ol start="4">
  <li>When finished making the appropriate changes in the Comparator, click <b>File &gt; Save
    Baseline</b> to save the changes, and click the <b>Exit</b> button to close the
    Comparator.</li>
</ol>

<p>After editing the Test Script or verification points, the environment should 
  be reset to its appropriate initial state (<a href="tm_tsten.htm">see 
  Tool Mentor: Setting Up the Test Environment in Rational Robot</a>) and 
  the tests re-executed (See step: <a href="#PlayTheScriptBack">Play the script back</a>).<br>
</p>
<br>
<br>



 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

