<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->
<HTML>
 <HEAD>
  <title>Tool Mentor:&nbsp;Generating Elements from a Model Using Rational Rose</title>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <LINK REL="StyleSheet" HREF="../../rop.css" TYPE="text/css">
</HEAD>
 <BODY>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<H2 CLASS="banner">Tool Mentor:&nbsp;<rpw name="PresentationName">Generating Elements from a Model Using Rational Rose</rpw><A NAME="Top" msnavigation></A>
</H2>
      <H3>
       Purpose</H3>

<p>This tool mentor describes Rational Rose's ability to generate source elements
from a Rose model, enabling implementers to create and update source based on
the design documented in Rose.&nbsp;
</p>

<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_impcl.htm">Implement Design Elements</a></li>
</ul>
<br>
   
</p>

      <H3>
       Overview</H3>

<p>Through its language add-ins, Rational Rose enables developers to generate
code directly from a design model. As design evolves, implementers can
round-trip code in an iterative process of generating code from a model, updating the
source, and reverse engineering the changes back to the design model. &nbsp; </p>

<p>The following Rational Rose add-ins provide code generation features: </p>

<ul>
  <li><a href="#Visual C++">Visual C++</a>
  <li><a href="#Visual Basic">Visual Basic</a></li>
  <li><a href="#ANSII C++">ANSII C++</a></li>
  <li><a href="#Rose J (Java)">Rose J (Java)</a></li>
  <li><a href="#CORBA">CORBA</a></li>
  <li><a href="#XML DTD">XML DTD</a></li>
</ul>

<h3><a name="Visual C++">Visual C++ </a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Rational Rose Visual C++ enables you to generate Visual C++ source code from
classes and components in your Rose model. Its features include:
<ul>
  <li>Round-trip engineering Visual C++ models and code</li>
  <li>Full generation of common Visual C++ language constructs, such as
    relationships, typedefs, enums, message/object/COM maps, constructors and
    destructors&nbsp;</li>
  <li>Dialog-based support for modeling and generating code for Visual C++
    elements</li>
  <li>Syntax checking</li>
  <li>Autosynchronization mode for automatically updating code or model when
    either is changed&nbsp;</li>
  <li>Ability to extend and customize code generation through the COM, ATL and
    MFC interface libraries</li>
  <li>Integration with Microsoft's Visual Studio, including IDL files</li>
  <li>Support for Visual C++ template classes and user-specified code patterns</li>
</ul>

<h3>&nbsp;<a name="Visual Basic">Visual Basic </a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Being tightly integrated with the Microsoft Visual Basic 6.0 environment, the
Rational Rose Visual Basic Language Support Add-in enables you to generate
Visual Basic source code from components and classes and to visualize existing
code in UML in your Rose model. The extensible and customizable dialog-based
tools guide you smoothly through the process of generating code from a Rose
model and updating the source code when the model is changed.</p>
<p>Features include:</p>
<ul>
  <li>Creation and specification of new Visual Basic classes in the Rose model
    with help of the Class Wizard</li>
  <li>Creation of members in the class and specification of implementation
    details about the class and its members in the Model Assistant tool</li>
  <li>Preview of code to be generated for each members of each class</li>
  <li>Deployment of classes to components with the help of the Component
    Assignment tool</li>
  <li>Full generation of common Visual Basic language constructs, such as
    constants, Declare and Event statements, Enum and Type declarations, Get,
    Let, and Set procedures, and user-defined collection classes from the
    components in your model into corresponding source projects with help of the
    Code Update tool</li>
  <li>Synchronization mode for updating source code project items when model
    elements are deleted&nbsp;</li>
  <li>Ability to customize and extend code generation by using Visual Studio
    code templates and VBScript</li>
  <li>Ability to automate and extend round-trip engineering and templates by
    using the VSRTE SDK</li>
</ul>

<h3><a name="ANSII C++">ANSII C++ </a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Rose ANSI C+ is the C++ add-in for Rational Rose. It provides:</p>
<ul>
  <li>Support for Model evolution from analysis to design</li>
  <li>Support for C++ language without being restricted to a single vendor’s
    C++ compiler</li>
  <li>Generation of C++ source code from a model</li>
  <li>Round trip engineering that synchronizes models and generated C++ code
    across multiple iterations</li>
  <li>Changes made to the code are carried back to the model during reverse
    engineering</li>
  <li>Design, modeling and visualization of all C++ constructs including
    classes, templates, namespaces, inheritance and class members functions</li>
  <li>Support for large frameworks</li>
  <li>User controlled code generation via patterns of default constructors,
    destructors and class members</li>
  <li>Style sheet mechanism to allow for custom formatting of generated code</li>
</ul>

<h3><a name="Rose J (Java)">Rose J (Java)</a>&nbsp; <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Rational Rose J enables you to generate Java source code from classes and
components in your Rose model. Its features include:&nbsp;</p>
<ul>
  <li>Full generation of common Java language constructs, such as imports,
    extends, implements and throws relationships, constructors and initializers</li>
  <li>Syntax checking</li>
  <li>Javadoc tag generation</li>
  <li>Dialog-based support for modeling and generating code for Enterprise
    JavaBeans and Servlets, including the JAR and WAR archive files for
    deploying Java 2 Enterprise Edition (J2EE) elements</li>
  <li>Autosynchronization mode for automatically updating code when a model is
    changed</li>
  <li>Ability to extend and customize code generation through the Java XFE
    interface</li>
  <li>Integration with IBM's VisualAge for Java&nbsp;</li>
  <li>Built-in editor support for browsing and editing Java source code</li>
  <li>Java Frameworks for adding Java API classes to a model</li>
</ul>
      <h3><a name="CORBA">CORBA</a>&nbsp; <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>Rational Rose CORBA allows you to generate CORBA-compliant IDL code from
classes and components in your Rose model. Its features include:</p>
<ul>
  <li>Full generation of common CORBA IDL constructs, such as const, enum,
    struct, union, typedef, exception, value, fixed, and interface, as defined
    in the CORBA 2.3 specification</li>
  <li>Generation of native types, similar to CORBA fundamental types, to allow
    users to specify programming language-dependent types for use by object
    adapters</li>
  <li>Syntax checking</li>
  <li>Built-in editor support for browsing and editing IDL source code</li>
  <li>Round-trip engineering capability that synchronizes models and generated
    IDL source across multiple iterations</li>
</ul>

<h3><a name="XML DTD">XML DTD</a>&nbsp; <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>
<p>The Rational Rose XML DTD add-in provides visualization, modeling, and tools for XML documents that use document type definitions
(DTD).&nbsp; From the valid XML DTD model, you can use the forward engineering feature to create new XML
DTDs.</p>
<p> By modeling your XML DTD, you can visualize the structure of the document to see which element definitions to change or remove. Since you probably don't work in isolation, you can share your XML DTD model with members of your development
team to verify that you have captured the XML document requirements.&nbsp;<br>
<br>
The Rational Rose XML DTD syntax checker finds errors in the XML DTD model allowing you to make corrections before the DTD before is implemented.
</p>

<p> 
To support mapping XML to UML, Rational Rose extends UML with stereotypes for XML elements, element attribute lists, entities, and notations. Stereotypes or tagged values represent XML operator symbols, sequence lists, choice lists, and element and element attribute multiplicity.
</p>

      <P>
       


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>

