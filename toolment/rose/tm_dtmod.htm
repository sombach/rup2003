<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->

<HTML>

<HEAD>
 <title>Tool Mentor:&nbsp;Designing and Modeling Databases Using Rational Rose Data Modeler</title>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <LINK REL="StyleSheet" HREF="../../rop.css" TYPE="text/css">
</HEAD>

<BODY>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 

<H2 CLASS="banner">Tool Mentor:&nbsp;<rpw name="PresentationName">Designing and Modeling Databases Using Rational Rose Data Modeler</rpw><A NAME="Top" msnavigation></A></H2>
<H3>Purpose</H3>
<P>This tool mentor describes creating a data model with Rational Rose Data Modeler.&nbsp; 
This tool mentor also provides information on generating a new DDL or database 
schema from the Rose data model, and how to reverse engineer a database to 
create a data model. </P>
      
<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_dbdes.htm">Database Design</a></li>
</ul>
<br>
   
</p>

<H3>Overview</H3>

<p> Rational Rose Data Modeler features allow the database designer and the 
software developer to develop the application and database design using the same tool. As a database designer or developer, you can use 
Rational Rose Data Modeler to model and design databases, and to integrate your application and
database.&nbsp; </p>

<p> 
Rational Rose Data Modeler uses or creates three model types—an object model, a 
data model, and an optional data storage model. An object model represents 
classes, their behaviors, and the relationships between classes. The Rational 
Rose Data Modeler &quot;object&quot; model generally corresponds to the RUP <a href="../../process/artifact/ar_desmd.htm">Design Model</a> artifact. The
Rose class diagram represents a view of the object model. A data model&nbsp;represents the structure of the database as implemented by the enterprise.&nbsp;The
optional data storage model represents the physical storage structure of the
database.&nbsp; The Rational Rose Data Modeler &quot;Data Model&quot; and &quot;Data 
Storage Model&quot; generally correspond to the RUP
<a href="../../process/artifact/ar_datmd.htm">Data Model</a> artifact.</p>

<p> 
You can create a model of the physical design of the database by transforming 
the persistent classes in the object 
model to 
tables in a data
model.&nbsp; The persistent classes must be assigned to a component and be located in the same logical package.&nbsp; Another way to create a model of the physical database design is by reverse engineering an existing database schema or DDL script.  </p>

<p> 
Using Rose Data Modeler transformation options, you can integrate application and database designs. Transformation options map elements contained in an object model to create a data model, or transform elements in a data model to create an object model.
You must understand object-oriented analysis and design (OOAD) concepts and the Unified Modeling Language (UML) to create the object model. Creating a data model requires understanding relational database design. Rose
Data Modeler uses database terminology and UML stereotypes to represent database elements.<br>
&nbsp;</p>

<h4>Tool Steps</h4>

<ol>
  <li><a href="#Develop Logical Data Model (Optional)">Develop Logical Data 
  Model (Optional)</a></li>
  <li><a href="#Develop Physical Database Design">Develop Physical Database 
  Design</a><ul>
    <li><a href="#Create Domains">Create Domains</a></li>
    <li>
    <a href="#Transforming Persistent Design Elements to Physical Data Model Elements">
    Create Initial Physical Database Design 
    Elements </a> </li>
    <li><a href="#Define Reference Tables">Define Reference Tables</a></li>
    <li><a href="#Create Primary Key and Unique Key Constraints">Create Primary 
    Key and Unique Key Constraints</a></li>
    <li><a href="#Define Data and Referential Integrity Rules">
    Define Data and Referential Integrity Enforcement Rules</a>
    </li>
    <li><a href="#Optimize Data Model for Performance">De-Normalize the Database 
    Design to Optimize  for Performance</a> </li>
    <li><a href="#Optimize Data Access">Optimize Data Access</a> </li>
    <li><a href="#Define Storage Characteristics">
    Define Storage Characteristics</a> </li>
    <li>
    <a href="#Distribute Class Behavior to the Database">Design Stored Procedures to Distribute Class 
    Behavior to the Database</a> </li>
  </ul>
  </li>
  <li><a href="#Review the Results">Review the Results</a></li>
</ol>

<p>In addition to the steps described above, this tool mentor also provides 
information on the following <a href="#Additional Topics">additional topics</a> 
related on building and managing the Data Model in Rational Rose.</p>
<ul>
  <li><a href="#Forward Engineer the Data Model">Forward Engineer the Data Model</a></li>
  <li><a href="#Maintain the Data Model">Maintain the Data Model</a></li>
  <li><a href="#Reverse Engineer DDL Script or Database Schema">Reverse Engineer 
  the Data Model from a DDL script or Database Schema</a></li>
</ul>

<p>See the&nbsp;
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="17" height="16"> <i>
Getting Started</i> section of the Rose Data Modeler online Help topics for an 
overview of how to design and model databases using Rational Rose Data Modeler.&nbsp; </p>

<h3><a name="Develop Logical Data Model (Optional)"></a>1. <a name="Develop Logical Data Model">
Develop Logical Data Model (Optional)</a> <a href="#Top">
<img border="0" src="../../images/top.gif" width="26" height="20"></a></h3>

<p>Some projects may need to create a idealized &quot;logical&quot; model of the database 
design that captures an application independent view of the key logical data 
entities and their relationships.&nbsp; This &quot;Logical Data Model&quot; can be thought 
of as an &quot;analysis&quot; type of model similar to the optional
<a href="../../process/artifact/ar_amdl.htm">Artifact: Analysis Model</a> that 
may be used in the development of the application design.&nbsp;&nbsp; It should 
be noted that the Logical Data Model is included in the
<a href="../../process/artifact/ar_datmd.htm">Artifact: Data Model</a>, and is 
not considered to be a separate RUP artifact.&nbsp; </p>

<p>The Logical Data Model may be created using the Rational Rose Data Modeler 
features for building a new data model using Data Model Diagrams. In Rational 
Rose Data Modeler, the Logical Data Model will be enclosed in a separate schema 
package in the Rational Rose Logical View.&nbsp; Consult the following online 
Help topics for information on building a Data Model: </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Building a Data Model</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create a Schema</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Working with Data Model Diagrams</i>. </li>
</ul>

<p>The development of an idealized Logical Data Model is optional based on the 
specific project needs.&nbsp; Projects may choose to develop the data model 
through the use of Rational Rose Data Modeler Object-to-Table transformation 
capabilities instead of building the model independently.&nbsp; </p>

<h3>2. <a name="Develop Physical Database Design">Develop Physical Database 
Design</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h3>

<p>The physical database design is the detailed table designs of the database 
created using Data Model Diagrams in the Logical View.&nbsp; The physical 
database design may be represented as a &quot;Physical Data Model&quot;&nbsp;which also 
includes model elements for database views, indexes, constraints, stored 
procedures, and other elements as described in the
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>Data 
Model Elements</i> online Help topic.&nbsp; This Physical Data Model is not 
considered to be a separate artifact but is instead part of the
<a href="../../process/artifact/ar_datmd.htm">Artifact: Data Model</a>, and may 
be contained in one or more schema packages in the Rational Rose Logical View.&nbsp; </p>


<p>The initial physical database design model elements can be initially created 
in one of the following ways:</p>


<ul>
  <li>Use the Rational Rose Data modeler Object-to-Table transformation features 
  to create an initial set of tables.</li>
  <li>Reverse engineer an existing database schema or DDL script (See&nbsp;
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Reverse Engineering a Database or DDL File</i>)</li>
  <li>Develop an initial physical data model through the evolution of the logical database 
  design contained in an optional logical data model. </li>
</ul>

<p>The remaining steps in this tool mentor discuss the approach of starting the 
physical database design using the Object-to-Table transformation process. 
Consult the
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
Transforming an Object Model to a Data Model</i> on-line Help topic for 
information on pre-requisites for using the Object-to-Table transformation 
feature. </p>


<h4><a name="Create Domains">Create Domains</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>

<p>Create Domains to implement user-defined data types that can be used 
throughout the data model to enforce database design standards. See the 
following online help topic,&nbsp;
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
Working with Domains,</i> for an overview of what domains are and how they are 
used.&nbsp; When a schema package in the Data Model is first created, Rational Rose 
Data Modeler also creates a <b>
Global Data Types</b> package in the Logical View that is used to store domain 
packages and domains. Refer to the following Rational Rose Data Modeler online 
help topics for more details on creating Domains. </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Domains</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create a Domain Package</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create a Domain</i></li>
</ul>

<h4>
<a name="Transforming Persistent Design Elements to Physical Data Model Elements">
Create Initial Physical Database Design Elements </a><a href="#Top">
<img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>

<p>Using Rational Rose Data Modeler, you can transform classes and their 
relationships in the object model to create tables and data model relationships 
in the 
data model. See the Rational Rose Data Modeler online Help topic
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
Transforming Object Model Elements Mapping </i>for a detailed description of how 
the object model elements are transformed into Data Model elements.

<p>&nbsp;Before transforming an object model to a Data Model:
<ul>
  <li>Set the state of classes to persistent.</li>
  <li>Assign classes to a component that uses the languages Java, Visual Basic, or Analysis.</li>
  <li>Group the classes in the same logical package.</li>
</ul>
<p>The specific transformation steps are described in the Rational Rose Data 
Modeler <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
<i>Transform an Object Model to a Data Model</i> online Help topic. Object model 
elements transform to the data model elements using data type mappings specific 
to the selected DBMS. When the transformation is complete, you can create Data 
Model Diagrams to begin work on developing the detailed physical database 
design.&nbsp; See
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>Create 
Data Model Diagrams</i> for more information.</p>

<p>You can modify the tables and/or create additional tables and relationships 
in the Data Model. Refer to the following topics for more information on 
creating tables and relationships: </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
Tables</i>
  and
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create Tables</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Columns</i> and
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create a Column</i></li>
  <li>
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Relationships</i> and
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>Create 
  Relationships</i></li>
</ul>

<h4><a name="Define Reference Tables">Define Reference Tables</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>
<p>Create reference tables as needed for managing any static data items in the 
database.&nbsp; See the list of topics on tables and relationships in the 
preceding step of this tool mentor for information on creating tables and 
relationships. </p>


<h4><a name="Create Primary Key and Unique Key Constraints">Create Primary Key 
and Unique Key Constraints</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>


<p>Define primary key constraints and unique key constraints to identify rows of 
information in a table.&nbsp; For information on how to create and use primary and 
unique key constraints consult the following Rose Data Modeler online help 
topics:</p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Key Constraints</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create a Key Constraint</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create Keys (Primary and Unique)</i></li>
</ul>


<h4><a name="Define Data and Referential Integrity Rules">Define Data and Referential Integrity 
Enforcement Rules</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>
<p>Defining referential integrity rules to ensure that database updates are 
managed properly.&nbsp; Rational Rose Data Modeler supports declarative 
referential integrity (DRI) and system generated referential integrity (RI) 
triggers.&nbsp; Consult the following online Help topics for information on </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Referential Integrity</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Define Referential Integrity</i></li>
</ul>
<p>Apply check constraints to enforce business rules in the Data Model.&nbsp; 
Rational Rose Data Modeler allows check constraints to be 
assigned to a column, a domain, or a table.&nbsp; The following online help 
topics provide more information on creating and using check constraints. </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Check Constraints</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create Check Constraints</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Apply Business Rules</i></li>
</ul>

<p>Foreign key constraints are another important aspect of data and referential 
integrity enforcement.&nbsp; Foreign key constraints are obtained by creating a relationship between tables.&nbsp; When a relationship is created, the primary 
key of the parent table is migrated to the child table as the foreign key. 
Consult the following online help topics for more information on creating 
foreign key constraints
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>Key 
Constraints</i> and
<IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
Migrating Keys</i>.</p>

<h4><a name="Optimize Data Model for Performance">De-normalize Database Design 
to Optimize for Performance</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>
<p>Occasionally, it may be desirable for performance improvement to store 
objects that are retrieved together in the same table.&nbsp; This technique is 
called de-normalization.&nbsp; To represent this in the Data Model, combine the 
unique columns from the two tables into one and remove the second table.&nbsp; 
For more information on de-normalization and optimization, consult the following 
Rational Rose Data Modeler online Help topics:</p>
<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  De-normalizing the Data Model</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Optimizing the Data Model </i></li>
</ul>
<h4><a name="Optimize Data Access">Optimize Data Access</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>
<p>An additional optimization technique is to use column indexing to access data 
in tables more efficiently. See the following topics for information on how to 
create indexes in the Data Model. </p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Indexes </i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create an Index</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Optimizing the Data Model </i></li>
</ul>

<p>Additionally, views may be defined to improve data access.&nbsp; Views can be 
used to create a virtual table consisting of columns from one or more tables 
and/or other views that are accessed frequently by the application. The 
following Rational Rose Data Modeler online Help topics provide detailed 
information on creating views and relationships between views and tables in the 
model:</p>

<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Views</i> and
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Create Views</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Working with Views</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Dependencies and&nbsp; </i>
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Working with View Dependencies</i></li>
</ul>

<h4><a name="Define Storage Characteristics">Define Storage Characteristics</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>
 <p>You model the physical storage of your data by creating a data storage
 model. A data storage model consists of a database that contains one or more tablespaces.&nbsp; 
 This &quot;data storage model&quot; is considered to be part Physical Data Model, which is 
 included in the <a href="../../process/artifact/ar_datmd.htm">Artifact: Data 
 Model</a> in RUP, and is not a separate artifact.&nbsp; The data storage model 
 is contained in the Component View of the overall Rose Model.
 <p>A tablespace is a logical storage element that stores your table
 data. You can assign one or more tables to your tablespace and  distribute your table data across one or more containers. A container is a
 physical storage device, such as a disk, file, or directory. Each container is
 segmented into extents or pages and measured in kilobytes.&nbsp; See the list 
 of topics in the following Rose Data Modeler online Help sections for more 
 information on databases and table spaces.<ul>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Modeling Data Storage</i></li>
  <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Building a Data Storage Model</i></li>
  </ul>
 <p>These help sections also include topics that provide information on defining 
 data storage model elements that are specific to the Database Management 
 Systems (DBMSes) supported by Rational Rose Data Modeler. </p>


<h4><a name="Distribute Class Behavior to the Database">Design Stored Procedures 
to Distribute Class Behavior to the Database</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>


<p>Define stored procedures as needed to support efficient storage and retrieval 
of information in the database. Examine the operations of the design classes 
that were used to create the initial tables for candidate stored procedures.&nbsp; 
Stored procedures can be implemented as procedures or functions.&nbsp; For more 
information how to create stored procedures in the Data Model see the following 
Rational Rose Data Modeler online Help topics:</p>


  <ul>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Stored Procedures </i></li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Creating Stored Procedures</i></li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Working with Stored Procedures</i></li>
  </ul>


<p>Also, you can define triggers as needed to further control and manage 
modifications to the information in the tables. Consult the following online 
help topics for more information on creating triggers in the Data Model:</p>


  <ul>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Custom Triggers</i></li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Creating Custom Triggers</i></li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Working with Custom Triggers</i></li>
  </ul>


<h3><a name="Review the Results">3. Review the Results</a> <a href="#Top">
<img border="0" src="../../images/top.gif" width="26" height="20"></a></h3>


<p>Review the results of the database design in the
<a href="../../process/artifact/ar_datmd.htm">Data Model</a> for consistency 
with the application design in the <a href="../../process/artifact/ar_desmd.htm">
Design Model</a> and with the overall application architecture structure.&nbsp; 
Refer to <a href="../../process/activity/chklists/ck_dtmdl.htm">Checkpoints: 
Data Model</a> for some specific items to review. </p>


<h3><a name="Additional Topics">Additional Topics</a> <a href="#Top">
<img border="0" src="../../images/top.gif" width="26" height="20"></a></h3>


<p>This section of the tool mentor describes some additional items related to 
roundtrip engineering and maintenance of the data model and database. </p>

<h4> <a name="Forward Engineer the Data Model">Forward Engineer the Data Model</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>

<p>When the detailed database design (including the data storage design) has 
been sufficiently developed in the Data Model, you can use the Rose Data Modeler Forward Engineering Wizard to generate a DDL or database schema from your data model diagram. The Forward Engineering Wizard reads the schema in the data model and generates
a DDL script for the DBMS you specified in the wizard. In the wizard, you can
choose to execute the DDL script to generate a database schema.</p>
<p>In the Forward Engineering Wizard, you select options to generate:</p>
<ul class="plus">
  <li>Tables</li>
  <li>Indexes</li>
  <li>Triggers</li>
  <li>Stored Procedures</li>
  <li>Views</li>
  <li>Tablespaces</li>
  <li>Fully qualified names to prefix the schema name to table names</li>
  <li>Quoted identifiers for tables, columns, and schemas required for
    localization using double-byte code set (DBCS)</li>
  <li>SQL drop statements to overwrite existing DDL scripts, database elements,
    or comments</li>
</ul>

  <p>You will need to ensure that the proper database connectivity has been 
  established to enable forward engineering process to work.&nbsp; Consult 
  the following Rational Rose Data Modeler online Help topics for more 
  information on Forward Engineering:</p>
  <ul>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Forward Engineering to a DDL or Database </i>(Forward engineering process 
    information)</li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Forward Engineer to a DDL or Database</i> (Specific steps to run the 
    Forward Engineering Wizard)</li>
  </ul>
  <p>Consult the list of Database Management System (DBMS) topics in the
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Reference</i> section of the Rational Rose Data Modeler online Help for 
  specific information about data type mapping, database connections and other 
  topics related to forward engineering of the Data Model to a specific target 
  DBMS.&nbsp; </p>

<h4> <a name="Maintain the Data Model">Maintain the Data Model</a><a href="#Top"><img border="0" src="../../images/top.gif" width="26" height="20"></a></h4>

<p>Once a Data Model has been forward engineered to create a database, you can 
use the Rational Rose Data Modeler Compare and Synchronize Wizard to maintain 
the consistency of the data model with the implemented database.&nbsp; </p>

  <p>When synchronizing the Data Model with an implemented database, you will 
  need to ensure that the proper database connectivity has been established to 
  enable the compare and synchronize process to work.&nbsp; Consult the 
  following Rational Rose Data Modeler online Help topics for more information 
  on Data Model Compare and Synchronization:</p>
  <ul>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Comparing and Synchronizing the Data Model&nbsp; </i>(Compare and 
    Synchronize process information)</li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Compare a Schema to a Database or DDL file from a Database or DDL file</i> 
    (Specific steps to run the Compare and Synchronize Wizard)</li>
  </ul>
  <p>Consult the list of Database Management System (DBMS) topics in the
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Reference</i> section of the Rational Rose Data Modeler online Help for 
  specific information about data type mapping, database connections and other 
  topics related to comparing and synchronizing the Data Model to a specific 
  target DBMS.&nbsp; </p>
  <p>Also refer to the Rational Rose Data Modeler online Help topic
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Modifying Data Models</i> for information about specific rules for making 
  modifications to the Data Model elements. </p>

<h4><a name="Reverse Engineer DDL Script or Database Schema"></a>Reverse Engineer 
the Data Model from a DDL script or Database Schema</h4>

<p>Use the Rational Rose Data Modeler Reverse Engineering Wizard to generate a data model 
from a database schema or DDL file.&nbsp; The Reverse Engineering Wizard reads the database schema or DDL file and creates a data model diagram that includes the names of all quoted identifier entities. Depending on the DBMS, Rose Data Modeler Reverse Engineering Wizard
models tables,&nbsp;relationships between tables, stored procedures, indexes, and triggers in the data model diagram. </p>

  <p>You will need to ensure that the proper database connectivity has been 
  established to enable the reverse engineering process to work.&nbsp; Consult the 
  following Rational Rose Data Modeler online Help topics for more information 
  on Reverse Engineering:</p>
  <ul>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Reverse Engineering a Database or DDL </i>(Reverse engineering process 
    information)</li>
    <li><IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16">
    <i>Reverse Engineer from a Database or DDL file</i> (Specific steps to run 
    the Reverse Engineering Wizard)</li>
  </ul>
  <p>Consult the list of Database Management System (DBMS) topics in the
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Reference</i> section of the Rational Rose Data Modeler online Help for 
  specific information about data type mapping, database connections and other 
  topics related to reverse engineering of the Data Model from a specific DBMS.&nbsp;
  </p>

<p>After reverse engineering the database or DDL, you can optionally transform 
the tables in the Data Model generated from the reverse engineering process into 
classes in the object (design) model. See the following topics for more 
information on the table-to-object transformation process. </p>

<ul>
  <li>
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Transforming a Data Model to an Object Model </i>(Transformation process 
  information)</li>
  <li>
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Transform a Data Model into an Object Model</i> (Specific steps to perform the 
  transformation)</li>
  <li>
  <IMG SRC="../../images/HelpBook.gif" VSPACE="0" HSPACE="0" BORDER="0" width="16" height="16"> <i>
  Transforming Data Model Elements Mapping </i>(Mapping of Data Model elements 
  to Object Model elements)</li>
</ul>

<br><br>
       
 
<hr>
<table border="0" width="100%">
	<tr>
		<td valign="middle" align="left"><a  target="_blank" href="http://www.appliedis.com"><img border="0" src="../../images/appliedis.gif" ></a>
		</td>
		<td width="86%" valign="middle" align="left"><font face="Arial"><small><small>This content developed or partially developed by <a target="_blank" href="http://www.appliedis.com">Applied Information Sciences</a>.</small></small></font>
		</td>
	</tr>
</table>


<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>