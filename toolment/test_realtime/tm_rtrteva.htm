<!-- RPW META DATA START --
 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Tool Mentor:&nbsp;Analyzing Test Results Using Rational Test RealTime</title>
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner"><a name="Top"></a>Tool Mentor:&nbsp;<rpw name="PresentationName">Analyzing Test Results Using Rational Test RealTime</rpw> </h2>


<h3>Purpose</h3>
<p>This tool mentor describes how to analyze the results of test execution from 
  Rational Test RealTime. The value of testing early and often cannot be realized 
  if the results of the testing activity cannot be quickly and easily interpreted 
  and subsequently acted upon.</p>

<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_tst_anltstflr.htm">Analyze Test Failure</a></li>
</ul>
<br>
   
</p>

<h3>Overview</h3>
<p>Using both a source code insertion technology as well as source code analysis, 
  Rational Test RealTime is able to focus its component testing and runtime analysis 
  functionality directly at the source code level. A variety of features have 
  been added to ensure that fault isolation is quick and that it is easy and efficient 
  to work on the associated source code:</p>
<ul>
  <li>source code can be opened and modified in the Test RealTime Text Editor.</li>
  <li>version control programs (e.g. Rational ClearCase) can be manipulated to 
    check-in/check-out versioned code.</li>
  <li>change management programs (e.g. ClearQuest) can be directly accessed for 
    defect submissions and enhancement requests</li>
</ul>
<p>These features are used in conjunction with the analysis reports produced by 
  the test tools. Each key function of Test RealTime&#151;component testing, system 
  testing, memory profiling, performance profiling, code coverage analysis, runtime 
  tracing, static metric generation&#151;has a dedicated report. These reports 
  contain information extracted from a number of log files generated by source 
  code parsers, source code instrumentors, test script generators, test script 
  compilers, target deployment ports and report generators. These files can be 
  opened automatically by Test RealTime at the conclusion of a run, or can be 
  opened manually.</p>
<p>Each report is designed to be immediately interpretable to ensure problem diagnosis 
  and resolution is quick and efficient.</p>


<h4>Types of Reports</h4>
<p>Report analysis for each Test RealTime feature will be discussed. Where relevant, 
  report differences due to programming language used will be discussed:</p>
<ul>
  <li><a href="#ComponentAndSystemTesting">Component Testing and System Testing</a></li>
  <li><a href="#MemoryProfiling">Memory Profiling</a></li>
  <li><a href="#PerformanceProfiling">Application Performance Profiling</a></li>
  <li><a href="#CodeCoverageAnalysis">Code Coverage Analysis</a></li>
  <li><a href="#RuntimeTracing">Runtime Tracing</a></li>
  <li><a href="#StaticMetrics">Static Metrics</a></li>
</ul>


<h3><a name="ComponentAndSystemTesting">Component Testing and System Testing</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>To open these reports using the Project Browser tab in the Project Window on the right-hand side of the Test RealTime user interface, right-click a test node and select View Report->Test.
To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Report</b> from the Files of Type dropdown list</li>
  <li>Browse to and then select the .xrd files corresponding to the reports you 
    would like to view</li>
  <li>Click the Open button</li>
</ol>
<p>To open these reports from the command line, simply treat each .xrd file as 
  a parameter to the command line <code><b>studio</b></code>.</p>
<p>The report is organized into two main sections, a summary section followed 
  by a details section.</p>
<ul>
  <li><i>Summary &#151 </i>The summary section contains information such as the 
    report file locations, time of test execution and a summary count of passed 
    and failed tests.<br>
    <br>
  </li>
  <li><i>Component Test Details &#151</i> For component tests, this section provides 
    information about the drivers/services/functions/methods/procedures under 
    test. For each item, the report contains some or all of the following information, 
    depending on the source language and the options selected: 
    <ul>
      <li>a test section which provides an overview and summarizes whether or 
        not the test passed</li>
      <li>a variable value section, specifying the acquired value for each variable.</li>
      <li>if code coverage analysis was performed, a code coverage section</li>
      <li>for C++ and Java, additional information is provided regarding contract 
        (i.e. assertion) validation and verify queries.</li>
    </ul>
    <br>
  </li>
  <li><i>System Test Details &#151</i> For system tests, the following subsections 
    are provided: 
    <ul>
      <li>an Initialization section, which details the steps involved in opening 
        a connection to the component under test.</li>
      <li>one or more Scenario sections, which details the actual tests that were 
        performed. Scenario blocks can be nested.</li>
      <li>a Termination section, which details the steps involved in terminating 
        connection to the component under test.</li>
    </ul>
    <br>
  </li>
</ul>
<p>The Report Explorer of the Test RealTime user interface can be used to maneuver 
  through the test report (double-click on any node of interest); the Test Report 
  menu item and the toolbar let you filter the report in order to only view failures. 
  Multiple sections of the test report are hyperlinked to the test script; simply 
  right-click those sections in which the mouse icon resembles a hand.</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing test reports see the <i>Rational Test RealTime User 
  Guide</i>, and refer to the chapter Automated Testing-&gt;Component Testing, 
  in the sections discussing the test report.</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>


<h3><a name="MemoryProfiling">Memory Profiling</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>Memory profiling reports for all supported languages&#151;C, C++ and Java&#151;are 
  stored in XML-based files within the Project folder or the TDP folder, depending 
  on the language.</p>
<p>To open these reports using the Project Browser tab in the Project Window on 
  the right-hand side of the Test RealTime user interface, right-click a test 
  node and select View Report-&gt;Memory Profile.</p>
<p>To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Memory Profiling</b> from the Files of Type dropdown list.</li>
  <li>Browse to and then select the files you are interested in viewing.</li>
  <li>Repeat steps 2-4 as needed.</li>
  <li>Click the Open button in the Report Browser window.</li>
</ol>
<p>To open these reports from the command line, simply treat the one or more files 
  you are interested in viewing as parameters to the command line <code><b>studio</b></code>.</p>
<p>The report is organized into two main sections, a summary section followed 
  by a details section.</p>
<ul>
  <li><i>Summary &#151 </i>A Histogram and textual report section giving the total 
    number of blocks and bytes allocated and freed, as well as the maximum number 
    of blocks/bytes allocated at any given time.<br>
    <br>
  </li>
  <li><i>C and C++ Details &#151</i> Each error and warning is listed, with its 
    associated call stack. The call stack is listed with the last called function/method 
    mentioned first; all functions/methods in the call stack are hyperlinked to 
    source code<br>
    <br>
  </li>
  <li><i>Java Details &#151</i> A listing is presented of every method that has 
    allocated objects since the last snapshot. The basic table lists the number 
    of objects and associated bytes allocated since the last snapshot for each 
    method, as well as the total number of objects and bytes allocated by each 
    method and its descendants (i.e. child methods of the parent).<br>
    <br>
  </li>
</ul>
<p>The Report Explorer of the Test RealTime user interface can be used to maneuver 
  through the test report (double-click on any node of interest); the Test Report 
  menu item and the toolbar let you filter the report in order to only view failures. 
  Multiple sections of the test report are hyperlinked to the test script; simply 
  right-click those sections in which the mouse icon resembles a hand.</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing memory profiling reports see the <i>Rational Test 
  RealTime User Guide</i>, and refer to the chapter Runtime Analysis-&gt;Memory 
  Profiling.</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>



<h3><a name="PerformanceProfiling">Application Performance Profiling</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>Performance profiling reports for all supported languages&#151;C, C++ and Java&#151;are 
  stored in XML-based files within the Project folder or the TDP folder, depending 
  on the language.</p>
<p>To open these reports using the Project Browser tab in the Project Window on 
  the right-hand side of the Test RealTime user interface, right-click a test 
  node and select View Report-&gt;Memory Profile.</p>
<p>To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Performance Profiling</b> from the Files of Type dropdown list.</li>
  <li>Browse to and then select the files you are interested in viewing.</li>
  <li>Repeat steps 2-4 as needed.</li>
  <li>Click the Open button in the Report Browser window.</li>
</ol>
<p>To open these reports from the command line, simply treat the one or more files 
  you are interested in viewing as parameters to the command line <code><b>studio</b></code>.</p>
<p>The report is organized as follows: at the top of each report is a pie chart 
  detailing each function/method (up to six) that monopolize 5 or more percent 
  of total execution time. Beneath the pie chart is a sortable table listing each 
  function/method and various associated statistics. A mouse click on a column 
  header will sort the overall list by the contents of that column; a mouse click 
  on any function/method named opens the corresponding source code. No value is 
  necessarily good or bad - large function execution times, or target function 
  + descendant execution times, simply highlights potentially inefficient algorithms 
  and thus candidates for optimization.</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing performance profiling reports see the <i>Rational 
  Test RealTime User Guide</i>, and refer to the chapter Runtime Analysis-&gt;Performance 
  Profiling.</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>



<h3><a name="CodeCoverageAnalysis">Code Coverage Analysis</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>Code coverage analysis reports for all supported languages&#151;C, C++, Ada 
  and Java&#151;are stored in XML-based files within the Project folder or the 
  TDP folder, depending on the language.</p>
<p>To open these reports using the Project Browser tab in the Project Window on 
  the right-hand side of the Test RealTime user interface, right-click a test 
  node and select View Report-&gt;Memory Profile.</p>
<p>To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Code Coverage</b> from the Files of Type dropdown list.</li>
  <li>Browse to and then select the files you are interested in viewing.</li>
  <li>Repeat steps 2-4 as needed.</li>
  <li>Click the Open button in the Report Browser window.</li>
</ol>
<p>To open these reports from the command line, simply treat the one or more files 
  you are interested in viewing as parameters to the command line <code><b>studio</b></code>.</p>
<p>The report is organized into two main components, a Source component and a 
  Rates component.</p>
<ul>
  <li><i>Source &#151 </i>The Source tab reflects two levels of code coverage 
    information: 
    <ul>
      <li>When the Root folder is selected, the Source tab summarizes overall 
        code coverage using a bar chart.</li>
      <li>When any other node in the Report Window is selected, the Source tab 
        uses a color-coded display to reflect which code has and has not been 
        covered. The Source tab displays information related to whichever node 
        has been selected.</li>
    </ul>
    <br>
  </li>
  <li><i>Rates &#151</i> The Rates tab breaks down the level of coverage for each 
    function/method/procedure into percentages.<br>
    <br>
  </li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing Code Coverage reports see the <i>Rational Test RealTime 
  User Guide</i>, and refer to the chapter Runtime Analysis-&gt;Code Coverage.</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>



<h3><a name="RuntimeTracing">Runtime Tracing</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>Runtime tracing reports for all supported languages&#151;C, C++ and Java&#151;are 
  stored in XML-based files within the Project folder or the TDP folder, depending 
  on the language.</p>
<p>To open these reports using the Project Browser tab in the Project Window on 
  the right-hand side of the Test RealTime user interface, right-click a test 
  node and select View Report-&gt;Memory Profile.</p>
<p>To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Trace Files</b> from the Files of Type dropdown list.</li>
  <li>Browse to and then select the files you are interested in viewing.</li>
  <li>Repeat steps 2-4 as needed.</li>
  <li>Click the Open button in the Report Browser window.</li>
</ol>
<p>To open these reports from the command line, simply treat the one or more files 
  you are interested in viewing as parameters to the command line <code><b>studio</b></code>.</p>
<p>The runtime tracing report is a sequence diagram of all events that occurred 
  during the execution of application or test code. This sequence diagram uses 
  a notation taken from the Unified Modeling Language, thus it can be correctly 
  referred to as a UML-based sequence diagram. Vertical lines are lifelines; each 
  lifeline represents a Java object instance. The very first lifeline, represented 
  by a stick figure, is considered the &quot;world&quot; - that is, the operating 
  system. Horizontal lines connect one lifeline to another. Green lines are constructor 
  calls, black lines are method calls, red lines are method returns, blue lines 
  are destructor calls, orange lines are exceptions. Hovering the mouse over any 
  method call to see the full text. Every call and call return is time stamped. 
  Every vertical and horizontal line is hyperlinked to the monitored source code. 
  The menu item Runtime Trace-&gt;Filters can be used to create filters that make 
  the runtime tracing report more manageable. </p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing runtime tracing reports see the <i>Rational Test RealTime 
  User Guide</i>, and refer to the chapter Runtime Analysis-&gt;Runtime Tracing 
  .</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>



<h3><a name="StaticMetrics">Static Metrics</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a>
</h3>
<p>Memory profiling reports for all supported languages&#151;C, C++ and Java&#151;are 
  stored in XML-based files within the Project folder or the TDP folder, depending 
  on the language.</p>
<p>To open these reports using the Project Browser tab in the Project Window on 
  the right-hand side of the Test RealTime user interface, right-click a test 
  node and select View Report-&gt;Memory Profile.</p>
<p>To open these reports using the Test RealTime menu:</p>
<ol>
  <li>Select the menu item File-&gt;Browse Reports.</li>
  <li>Select the Add toolbar button.</li>
  <li>Select <b>Metric</b> from the Files of Type dropdown list.</li>
  <li>Browse to and then select the files you are interested in viewing.</li>
  <li>Repeat steps 2-4 as needed.</li>
  <li>Click the Open button in the Report Browser window.</li>
</ol>
<p>To open these reports from the command line, simply treat the one or more files 
  you are interested in viewing as parameters to the command line <code><b>studio</b></code>.</p>
<p>The report is organized into two levels, the File view and the Object view:</p>
<ul>
  <li><i>File view &#151 </i>When the Root folder is selected, a bar graph of 
    one of seven Halstead metrics is presented for every file that was selected. 
    The particular metric that is displayed can be changed using the menu. When 
    any other node is selected, static metrics specific to that node are presented.<br>
    <br>
  </li>
  <li><i>Object View &#151</i> When the Root folder is selected, a graph is presented. 
    This graph compares certain static metrics for each function/method - this 
    can be changed using the menu. When any other node is selected, static metrics 
    specific to that node are presented.<br>
    <br>
  </li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information about viewing static metrics reports see the <i>Rational Test RealTime 
  User Guide</i>, and refer to the chapter Runtime Analysis-&gt;Static Metrics.</p>
<p><b><img border="0" height="16" src="../../images/book.gif" width="16"> </b>For 
  detailed technical information on working with report files, refer to the <i>Rational 
  Test RealTime Reference Guide</i>, focusing on the sections discussing the various 
  test report generators. In particular, see the page Appendices-&gt;File Types.</p>

<br>
<br>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 
</body>

</html>

