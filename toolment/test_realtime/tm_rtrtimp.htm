<!-- RPW META DATA START --
 
 
-- RPW META DATA END -->

<html>

<head>
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Tool Mentor:&nbsp;Implementing Developer Tests using Rational Test RealTime</title>
</head>

<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 



<h2 class="banner"><a name="Top"></a>Tool Mentor:&nbsp;<rpw name="PresentationName">Implementing 
  Developer Tests using Rational Test RealTime</rpw> </h2>


<h3>Purpose</h3>
<p>This tool mentor describes how to implement tests using RationalTest RealTime.</p>

<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_tst_imptstste.htm">Implement Test Suite</a></li>
<li><a href="../../process/activity/ac_tst_imptst.htm">Implement Test</a></li>
<li><a href="../../process/activity/ac_impdvltst.htm">Implement Developer Test</a></li>
</ul>
<br>
   
</p>

<h3>Overview</h3>
<p>Test RealTime integrates three testing tools:</p>
<ul>
  <li>Unit Testing automates C and Ada software component testing. 
  <li>Object Testing is an object-oriented approach to behavior testing of C++ 
    code. 
  <li>System Testing is a powerful environment for testing message-based applications.</li>
</ul>
<p>The choice of which testing tool you should use with your application depends 
  on the development environment and the nature of the application. For each testing 
  tool, you need to develop a dedicated test script.</p>
<p>Before writing the actual tests for your application, Test RealTime requires 
  that you create the test project and link the project to the application under 
  test.</p>


<h4>Tool Steps</h4>
<p>To create a test script in Test RealTime, perform the following actions:</p>
<ol>
  <li><a href="#ComponentTestingWizard">Run the Component Testing Wizard</a></li>
  <li><a href="#SetupTestData">Enter test data and expected results</a></li>
  <li><a href="#ModifyStubBehavior">Modify stub behavior</a></li>
</ol>


<h3>1. <a name="ComponentTestingWizard">Run the Component Testing Wizard</a>  <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a></h3>

<p>Test RealTime provides a component testing wizard which, when executed, analyzes 
  specified source code and generates a fully executable test harness. All that 
  remains for the developer to ensure the target code is tested as intended is 
  to define stub behavior (see second Tool Step) and enter test data and expected 
  results (see third Tool Step).</p>
<p>NOTE: It is not required that the component testing wizard be used - all files 
  and code necessary to support a test can be generated by hand. The wizard, however, 
  can save a significant amount of effort. Either way, test execution and test 
  reporting are automated.</p>
<p>The component testing wizard can be accessed in one of two ways. Either method 
  assumes that a Test RealTime project has already been opened</p>
<ul>
  <li>Select the Activities link located on the left-hand side of the Test RealTime 
    Start Page. Selection of this link brings up a list of the three primary activities 
    that can be chosen by the developer. To perform component testing, the developer 
    should now select the Component Testing link.<br><br></li>
  <li>Right-click any source file/class/method/function/procedure in the Asset 
    Browser of the Project Window located on the right-hand side of Test RealTime. 
    Selection of the Test&#133; option in the popup menu opens the component testing 
    wizard.<br></li>
</ul>
<p>The primary difference between these two methods of initiating the component 
  testing wizard is that the first option requires the user to select the source 
  file(s) containing the functions/methods/procedures to be tested - the second 
  option already knows what source file will be used and thus skips the initial 
  steps of the component testing wizard.</p>
<p>In either case, the developer will be asked to select a Test Mode - either 
  Typical or Expert. The difference is related to desired stubbing behavior. As 
  a reminder, a stub is &quot;a component containing functionality for testing 
  purposes&quot; - that is, a component designed to act in a predefined way to 
  facilitate the testing of some other system component. In Typical Mode, Test 
  RealTime will automatically generate a stub template for any function/method/procedure 
  explicitly referenced in the selected source file(s). Expert Mode allows you 
  to additionally select components not explicitly referenced in the chosen source 
  file(s). Either way, the actual functionality of these stubs are defined later 
  - see the second Tool Step below.</p>
<p>Once the wizard has been executed to its conclusion, Test RealTime creates 
  a node within the active project. This node contains a reference to the selected 
  source file(s) as well as to the files required for test harness creation. These 
  additional files need to be modified in order to:</p>
<ul>
  <li>define stub behavior</li>
  <li>specify date used to drive the functions/methods/procedures under test</li>
  <li>specify expected results for each input data set</li>
</ul>
<p>For C, C++ and Ada, the test harness, test stubs and test script languages 
  were built by Rational Software to accommodate the specific intricacies of those 
  languages. For Java, Test RealTime uses Java as the test script language and 
  bases its test harness and test stub frameworks on the JUnit framework (http://www.junit.org). 
</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information refer to the <i>Rational Test RealTime User Guide</i>, the chapter 
  Graphical User Interface-&gt;Activity Wizards-&gt;Component Testing Wizard.</p>


<h3>2. <a name="SetupTestData">Enter test data and expected results</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a></h3>

<p>The test scripts generated by the component testing wizard can execute immediately. 
  However, until the developer specifies the actual data with which to drive the 
  component under test - as well as the expected output values -the test will 
  not be very useful nor informative.</p>
<p>Each language supported by Test RealTime facilitates test creation in a different 
  manner; each approach has been optimized for the unique characteristics of each 
  language. C++ is further unique in that not only can standard tests be generated 
  and executed, but optional contract checks can be made as well. Contract checks 
  act like assertions - they are used to verify items such as pre/post-conditions 
  and invariants.</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to C and Ada, refer to the following chapter in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing-&gt;Component Testing for C and Ada-&gt;C and Ada Test 
    Script-&gt;Overview-&gt;Test Script Structure </li>
  <li>Automated Testing->Component Testing for C and Ada->C and Ada Test Script->Ada<br>
    <p><img border="0" height="16" src="../../images/book.gif" width="16"> and 
      refer to the following chapters in the <i>Rational Test RealTime Reference 
      Guide</i></p>
  </li>
  <li>Component Testing Scripting Languages-&gt;C Test Script Language-&gt;C Test 
    Script Language Keywords-&gt;ELEMENT&#133;END ELEMENT</li>
  <li>Component Testing Scripting Languages-&gt;C Test Script Language-&gt;C Test 
    Script Language Keywords-&gt;ENVIRONMENT&#133;END ENVIRONMENT</li>
  <li>Component Testing Scripting Languages-&gt;Ada Test Script Language-&gt;Ada 
    Test Script Language Keywords-&gt;ELEMENT&#133;END ELEMENT</li>
  <li>Component Testing Scripting Languages-&gt;Ada Test Script Language-&gt;Ada 
    Test Script Language Keywords-&gt;ENVIRONMENT&#133;END ENVIRONMENT</li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to C++, refer to following chapters in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing-&gt;Component Testing for C++-&gt;C++ Testing Overview<br>
    <p><img border="0" height="16" src="../../images/book.gif" width="16"> and 
      refer to the following chapters in the <i>Rational Test RealTime Reference 
      Guide</i></p>
  </li>
  <li>Component Testing Scripting Languages-&gt;C++ Test Script Language-&gt;C++ 
    Test Driver Scripts</li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to Java, refer to following chapters in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing-&gt;Component Testing for Java-&gt;Java Testing Overview-&gt;About 
    JUnit<br>
    <p><img border="0" height="16" src="../../images/book.gif" width="16"> and 
      refer to the following chapters in the <i>Rational Test RealTime Reference 
      Guide</i></p>
  </li>
  <li>Component Testing Scripting Languages-&gt;Java Test Primitives</li>
</ul>


<h3>3. <a name="ModifyStubBehavior">Modify stub behavior</a> <a href="#Top"><img alt="To top of page" border="0" src="../../images/top.gif" width="26" height="20"></a></h3>

<p>Components are designed to act in a particular manner. These components, regardless 
  of their level of granularity, should respond to a given set of inputs with 
  a particular, predefinable set of outputs. &quot;Predefinable&quot; means the 
  results can be specified, either explicitly or algorithmically, prior to test 
  execution.</p>
<p>Very often, components require the assistance of other components within the 
  system in order to perform their functionality. These other components can be 
  as simple as an additional function or as grandiose as an entire subsystem located 
  somewhere else in the system. Either way, it is not uncommon for a developer 
  to discover that their efforts at component testing are hampered by the fact 
  that the components upon which their code relies do not yet exist, or at least 
  are not yet reliably functioning. The act of stubbing compensates for this difficulty. 
  (In fact, stubbing can be used to guarantee proper functioning by eliminating 
  all reliance on third-party code.)</p>
<p>It is the responsibility of the developer to properly simulate components upon 
  which the component under test relies. Proper simulation means that the stubbed 
  functionality must be sufficiently accurate to ensure that the success or failure 
  of the component under test can always be traced to the component itself, rather 
  than to incorrect information produced by the stubs.</p>
<p>Rational Test RealTime facilitates the creation of stubs via the supported 
  test scripting languages. In particular, for information about the creation 
  of test stubs:</p>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to C and Ada, refer to the following chapter in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing-&gt;Component Testing for C and Ada-&gt;C and Ada Test 
    Script-&gt;Simulations-&gt;Stub Simulation Overview<br>
    <p><img border="0" height="16" src="../../images/book.gif" width="16"> and 
      refer to the following chapters in the <i>Rational Test RealTime Reference 
      Guide</i></p>
  </li>
  <li>Component Testing Scripting Languages-&gt;C Test Script Language-&gt;C Test 
    Script Language Keywords-&gt;STUB</li>
  <li>Component Testing Scripting Languages-&gt;Ada Test Script Language-&gt;Ada 
    Test Script Language Keywords-&gt;STUB</li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to C++, refer to following chapters in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing->Component Testing for C++->C++ Testing Overview->C++ 
    Test Driver Script<br>
    <p><img border="0" height="16" src="../../images/book.gif" width="16"> and 
      refer to the following chapters in the <i>Rational Test RealTime Reference 
      Guide</i></p>
  </li>
  <li>Component Testing Scripting Languages-&gt;C++ Test Script Language-&gt;C++ 
    Test Script Keywords-&gt;STUB</li>
</ul>
<p><img border="0" height="16" src="../../images/book.gif" width="16"> For detailed 
  information related to Java, refer to following chapters in the <i>Rational 
  Test RealTime User Guide</i>:</p>
<ul>
  <li>Automated Testing-&gt;Component Testing for Java-&gt;Java Testing Overview-&gt;Java 
    Stub Harness<br>
  </li>
</ul>


<h3>For More Information</h3>
<p>For detailed information on how to run the test campaign, refer to the Tool 
  Mentor titled <a href="tm_rtrtexe.htm">Executing Tests Using Rational Test RealTime</a>. 
</p>
<br>
<br>

 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>