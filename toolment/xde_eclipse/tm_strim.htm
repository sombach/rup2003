<!-- RPW META DATA START --

 
 
-- RPW META DATA END -->
<html>

<head>
<title>Tool Mentor:&nbsp;Structuring the Implementation Model Using Rational XDE Developer - Java Platform Edition</title>

<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="StyleSheet" href="../../rop.css" type="text/css">
<script language="JavaScript" SRC="online_help_link.js"></script>

</head>
<body>

 
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top">

<script language="JavaScript">
<!--

//Tell the TreePath to update itself
var thePath = "";
var type = typeof parent.ory_button;
if (type != "undefined") {
	 type = typeof parent.ory_button.getTreePath();
	 if (type != "undefined") {
	 	 thePath = parent.ory_button.getTreePath();
	 }
}
document.write(thePath);
-->
</script>

 


<h2 class="banner">Tool Mentor:&nbsp;<rpw name="PresentationName">Structuring the Implementation Model Using Rational XDE Developer - Java Platform Edition</rpw><a name="Top"></a></h2>


<h3>Purpose</h3>

<p>This section provides links to additional information related to this tool mentor.<br>
  <ul>
<li><a href="../../process/activity/ac_strim.htm">Structure the Implementation Model</a></li>
</ul>
<br>
  
</p>

<p>The steps in this tool mentor match those in the activity. Links to topics
  in Rational XDE&#153; online Help are marked with <img src="../../images/helpbook.gif" width="16" height="16">.</p>


<h3>Overview</h3>

<p> This tool mentor assumes that you have defined the top level structure of 
  your Implementation Model as described in the <a href="model_structure_guidelines.htm">Rational 
  XDE Model Structure Guidelines</a>. The steps in this tool mentor permit this 
  initial structure to be refined.</p>

<p>The following steps are performed in this tool mentor:</p>

<ul>
  <li><a href="#Establish the Implementation Model Structure">Establish the Implementation
    Model Structure</a></li>

  <li><a href="#Adjust Subsystems">Adjust Implementation Subsystems</a></li>

  <li><a href="#Define Imports for Each Subsystem">Define Imports for Each Implementation
    Subsystem</a></li>

  <li><a href="#Decide how to treat executables (and other derived objects)">Decide
    How to Treat Executables (and Other Derived Objects)</a></li>

  <li><a href="#Decide how to treat test assets">Decide How to Treat Test Assets</a></li>

  <li><a href="#Update the Implementation View">Update the Implementation View</a></li>

  <li><a href="#Evaluate the implementation model">Evaluate the Implementation
    Model</a></li>
</ul>



<h3> <a name="Establish the Implementation Model Structure">Establish the Implementation
  Model Structure</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>As Implementation Subsystems are identified, they can be modeled as packages
  on component diagrams to show dependencies between the subsystems. These diagrams
  define the <a href="../../process/workflow/implemen/co_impvw.htm">Implementation
  View</a>. To create this, follow these steps:</p>

<ol>
  <li>Navigate to the model and package that will contain the Implementation Subsystems.
    (In the recommended <a href="model_structure_guidelines.htm">Rational XDE
    Model Structure Guidelines</a>, this is the Integration Support Model.)
  </li>

  <li>Create a component diagram providing an overview of the Implementation Subsystems. See
    <script language=javascript>ReferenceHelpTopic("Adding Diagrams","rs","rs_t_add_dgm");</script>.
  </li>

  <li>Create a package for each Implementation Subsystem. (See
    <script language=javascript>ReferenceHelpTopic("Adding Shapes to Diagrams","rs","rs_t_add_shp_dgm");</script>.)
    Note that there is no specific support in Rational XDE for Implementation
    Subsystems, so this diagram is just a picture.
  </li>

  <li>(optional) If the relationship of these Implementation Subsystems to projects
    and/or elements in the various code models is not obvious, then a Traceabilty
    to Design Elements diagram can be created. See
    <script language=javascript>ReferenceHelpTopic("Adding Diagrams","rs","rs_t_add_dgm");</script>.
  </li>
</ol>

<p>Larger granularity subsystems typically become 
  <!-- begin - wsw -->
   
  XDE projects  
  <!-- end - wsw -->
  <!-- begin - vsnet -->
   
  <!-- end - vsnet -->
  containing code models and source code.</p>

<p>Each project's code model must be structured in accordance with the <a href="model_structure_guidelines.htm">Rational
  XDE Model Structure Guidelines</a>. (See
  <script language=javascript>ReferenceHelpTopic("Grouping Model Elements in Packages","rs","rs_t_group_mod_ele_package");</script>
  .) Alternatively, create directories in the file system and packages in code, 
  and synchronize to create the corresponding packages in the model.</p>

<p>For more information, refer to

<!-- begin - wsw -->
 

   <script language=javascript>ReferenceHelpTopic("Round-Trip Engineering Models and Source","j","j_o_rndtrp_eng");</script>.
 
 <!-- end - wsw -->


<!-- begin - vsnet -->
 
 <!-- end - vsnet -->

</p>


<h3><a name="Adjust Subsystems">Adjust Implementation Subsystems</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>There is no Rational XDE specific guidance for this step.
</p>


<h3><a name="Define Imports for Each Subsystem">Define Imports for Each Implementation
  Subsystem</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Capture import dependencies on the Implementation View component diagram created
  previously. (See
  <script language=javascript>ReferenceHelpTopic("Adding Dependency Relationships","rs","rs_t_add_depend_relshp");</script>.)
  Note that these dependencies only provide guidance to developers. There is
  no enforcement or checking performed by Rational XDE.</p>

<p>Project imports should match these dependencies.</p>

<!-- begin - wsw -->
 

   <p>To define or modify imports of JARs from outside the project, click <b>Window</b>
    on the toolbar, click <b>Preferences</b>, and then click <b>Java, Organize Imports</b>.</p>
 
 <!-- end - wsw -->


<!-- begin - vsnet -->
 
 <!-- end - vsnet -->



<h3><a name="Decide how to treat executables (and other derived objects)">Decide
  How to Treat Executables (and Other Derived Objects)</a> <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>Executables and other deployable files can be modeled as UML components. See
  the Deployment Support Model in the <a href="model_structure_guidelines.htm">Rational
  XDE Model Structure Guidelines</a>. If you decide to model these files, the
  following steps apply: </p>

<ol>
  <li>Navigate to the model and package which will contain these files. (In the
    recommended <a href="model_structure_guidelines.htm">Rational XDE Model Structure
    Guidelines</a>, this is the Deployment Support Model.)
  </li>
  <li>Create a component diagram. See
    <script language=javascript>ReferenceHelpTopic("Adding Diagrams","rs","rs_t_add_dgm");</script>.
  </li>
  <li>Add each of the executables and other deployable files (modeled as UML components).
    See
    <script language=javascript>ReferenceHelpTopic("Adding Shapes to Diagrams","rs","rs_t_add_shp_dgm");</script>.
  </li>
  <li>Organize into packages (as described in <a href="model_structure_guidelines.htm">
    Rational XDE Model Structure Guidelines</a>). See
    <script language=javascript>ReferenceHelpTopic("Grouping Model Elements in Packages","rs","rs_t_group_mod_ele_package");</script>.
  </li>
</ol>

<p>Note that there is no round-trip engineering support for executables, so this model
  must be maintained by hand.</p>


<h3><a name="Decide how to treat test assets">Decide How to Treat Test Assets</a>
  <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>There is no Rational XDE specific guidance for this step.</p>


<h3><a name="Update the Implementation View">Update the Implementation View</a>
  <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a></h3>

<p>If there is a separate Logical View, it must be maintained. See <a href="model_structure_guidelines.htm">Rational
  XDE Model Structure Guidelines</a>.</p>


<h3><a name="Evaluate the implementation model">Evaluate the Implementation Model</a>
  <a href="#Top"><img src="../../images/top.gif" alt="To top of page" border="0" width="26" height="20"></a><br>
</h3>

<p>It can be helpful to publish models to html format. Also note that diagrams
  can be copied from Rational XDE to Microsoft Word and other programs.
</p>

<p> For more information, refer to
  <script language=javascript>ReferenceHelpTopic("Reporting in Rational XDE","cr","cr_o_rptg_xde");</script>.
</p>


 

<p>
 <font face="Arial"><a href="../../copyrite/copyrite.htm">
 <font size="-2">Copyright&nbsp;&copy;&nbsp;1987 - 2003 Rational Software Corporation</font>
 </a></font>
</p>


</td><td valign="top" width="24"></td><td valign="top" width="1%">
<p>
<a href="../../index.htm"></a>
</p>

<script language="JavaScript">
<!--

function loadTop()
{
  if(parent.frames.length!=0 && parent.frames[1].name=="ory_toc")
  {
     alert("The Rational Unified Process is already displayed using frames");
  }
  else
  {
    var expires = new Date();
    expires.setTime (expires.getTime() + (1000 * 20));
    document.cookie = "rup_ory_doc=" + escape (document.URL) +
    "; expires=" + expires.toUTCString() +  "; path=/";

    var new_ory_doc_loc = null;

    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href;
         break;
       }
    }

    if(new_ory_doc_loc!=null)
    {
	if( self.name == "ory_doc" )
	{
		window.close();
		window.open( new_ory_doc_loc );		
	}
	else
	{
	       	top.location = new_ory_doc_loc;
	}
    }
   }
}
// -->
</script>
<script language="JavaScript">
<!--
  function getImageUrl(image)
  {
    var new_ory_doc_loc=null;
    for(i=document.links.length-1;i>=0;i--)
    {
       if(document.links[i].href.indexOf("index.htm")!=-1)
       {
         new_ory_doc_loc = document.links[i].href.substring(0,document.links[i].href.lastIndexOf("/"));
         new_ory_doc_loc = new_ory_doc_loc + "" + image;
         return new_ory_doc_loc;
       }
    }
    return null;
  }
// -->
</script>
<script
language="JavaScript">
<!--
MSFPhover =
(((navigator.appName == "Netscape") &&
  (parseInt(navigator.appVersion) >= 3 )) ||
  ((navigator.appName == "Microsoft Internet Explorer") &&
  (parseInt(navigator.appVersion) >= 4 )));

  function MSFPpreload(img)
  {
     var a=new Image();
     a.src=img;
     return a;
  }
// -->
</script>
<script language="JavaScript">
<!--
    if(MSFPhover)
    {
        RupGray=MSFPpreload(getImageUrl('/images/rup1.gif'));
        RupBlue=MSFPpreload(getImageUrl('/images/rup1_a.gif'));
    }
// -->

//new code to display the load button or not
var ory_toc_exist = typeof parent.ory_toc;
if (ory_toc_exist == "undefined") {
	document.write("<a href=\"JavaScript:loadTop();\" onmouseover=\"if(MSFPhover) document['Home'].src=RupBlue.src; self.status='Display Rational Unified Process using frames'; return true\" onmouseout=\"if(MSFPhover) document['Home'].src=RupGray.src; self.status= ' ';return true\"> <br> <img src=\"../../images/rup1.gif");
	document.write("\"  border=\"0\" alt=\Display Rational Unified Process using frames\" name=\"Home\" width=\"26\" height=\"167\"></a>");
}
else {
	document.write("&nbsp;");
}

</script>
</td></tr></table><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>
<p align="right"><font face="Arial"><small><small>Rational Unified
Process&nbsp;&nbsp; 
<img border="0" width="63" height="7" src="../../images/rupversion.gif">
</small></small></font>
</td></tr></table>
 

</body>

</html>
